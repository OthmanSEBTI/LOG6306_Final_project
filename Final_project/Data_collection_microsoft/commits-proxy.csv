sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
41d3f1d218fd3569072855e5d8ae484b9362c3d7,add proxy pattern example,https://github.com/microsoft/Flash_University/commit/41d3f1d218fd3569072855e5d8ae484b9362c3d7,511240053,microsoft/Flash_University,False,False
b363e3aa9b403221774817098837d9a2517883f0,add subscription id telemetry (#2070)//* add subscription id telemetry////* catch any exception and set azure sub id to empty////* initialize httpclient with client handler for correctly working with proxy////* trace exception message////* remove unnecessary $ sign////* use async pattern for get sub id,https://github.com/microsoft/azure-pipelines-agent/commit/b363e3aa9b403221774817098837d9a2517883f0,53052789,microsoft/azure-pipelines-agent,False,False
e648c53c5c7c68caeea1a154ef6335350ce75a4b,"[PM] Remove an overly aggressive assert now that I can actually test the/pattern that triggers it. This essentially requires an immutable/function analysis, as that will survive anything we do to invalidate it./When we have such patterns, the function analysis manager will not get/cleared between runs of the proxy.//If we actually need an assert about how things are queried, we can add/more elaborate machinery for computing it, but so far I'm not aware of/significant value provided.//Thanks to Justin Lebar for noticing this when he made a (seemingly/innocuous) change to FunctionAttrs that is enough to trigger it in one/test there. Now it is covered by a direct test of the pass manager code.//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@261627 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/e648c53c5c7c68caeea1a154ef6335350ce75a4b,29704274,microsoft/llvm,False,False
c5d211ef2c5e50508da4b6309ff5f354d9e8f1f1,"[PM] Remove an overly aggressive assert now that I can actually test the/pattern that triggers it. This essentially requires an immutable/function analysis, as that will survive anything we do to invalidate it./When we have such patterns, the function analysis manager will not get/cleared between runs of the proxy.//If we actually need an assert about how things are queried, we can add/more elaborate machinery for computing it, but so far I'm not aware of/significant value provided.//Thanks to Justin Lebar for noticing this when he made a (seemingly/innocuous) change to FunctionAttrs that is enough to trigger it in one/test there. Now it is covered by a direct test of the pass manager code.//llvm-svn: 261627",https://github.com/microsoft/checkedc-clang/commit/c5d211ef2c5e50508da4b6309ff5f354d9e8f1f1,60645050,microsoft/checkedc-clang,False,False
e648c53c5c7c68caeea1a154ef6335350ce75a4b,"[PM] Remove an overly aggressive assert now that I can actually test the/pattern that triggers it. This essentially requires an immutable/function analysis, as that will survive anything we do to invalidate it./When we have such patterns, the function analysis manager will not get/cleared between runs of the proxy.//If we actually need an assert about how things are queried, we can add/more elaborate machinery for computing it, but so far I'm not aware of/significant value provided.//Thanks to Justin Lebar for noticing this when he made a (seemingly/innocuous) change to FunctionAttrs that is enough to trigger it in one/test there. Now it is covered by a direct test of the pass manager code.//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@261627 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/e648c53c5c7c68caeea1a154ef6335350ce75a4b,60644745,microsoft/checkedc-llvm,False,False
d793a053ad9839e40bf59293b8f2190dc5b21dc1,"[PM] Switch analysis managers to be threaded through the run methods/rather than the constructors of passes.//This simplifies the APIs of passes significantly and removes an error/prone pattern where the *same* manager had to be given to every/different layer. With the new API the analysis managers themselves will/have to be cross connected with proxy analyses that allow a pass at one/layer to query for the analysis manager of another layer. The proxy will/both expose a handle to the other layer's manager and it will provide/the invalidation hooks to ensure things remain consistent across layers./Finally, the outer-most analysis manager has to be passed to the run/method of the outer-most pass manager. The rest of the propagation is/automatic.//I've used SFINAE again to allow passes to completely disregard the/analysis manager if they don't need or want to care. This helps keep/simple things simple for users of the new pass manager.//Also, the system specifically supports passing a null pointer into the/outer-most run method if your pass pipeline neither needs nor wants to/deal with analyses. I find this of dubious utility as while some/*passes* don't care about analysis, I'm not sure there are any/real-world users of the pass manager itself that need to avoid even/creating an analysis manager. But it is easy to support, so there we go.//Finally I renamed the module proxy for the function analysis manager to/the more verbose but less confusing name of/FunctionAnalysisManagerModuleProxy. I hate this name, but I have no idea/what else to name these things. I'm expecting in the fullness of time to/potentially have the complete cross product of types at the proxy layer://{Module,SCC,Function,Loop,Region}AnalysisManager{Module,SCC,Function,Loop,Region}Proxy//(except for XAnalysisManagerXProxy which doesn't make any sense)//This should make it somewhat easier to do the next phases which is to/build the upward proxy and get its invalidation correct, as well as to/make the invalidation within the Module -> Function mapping pass be more/fine grained so as to invalidate fewer fuction analyses.//After all of the proxy analyses are done and the invalidation working,/I'll finally be able to start working on the next two fun fronts: how to/adapt an existing pass to work in both the legacy pass world and the new/one, and building the SCC, Loop, and Region counterparts. Fun times!//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@195400 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/d793a053ad9839e40bf59293b8f2190dc5b21dc1,29704274,microsoft/llvm,False,False
b3e721995ff0712d0cecfc1bbce1a0cfc591bccf,"[PM] Switch analysis managers to be threaded through the run methods/rather than the constructors of passes.//This simplifies the APIs of passes significantly and removes an error/prone pattern where the *same* manager had to be given to every/different layer. With the new API the analysis managers themselves will/have to be cross connected with proxy analyses that allow a pass at one/layer to query for the analysis manager of another layer. The proxy will/both expose a handle to the other layer's manager and it will provide/the invalidation hooks to ensure things remain consistent across layers./Finally, the outer-most analysis manager has to be passed to the run/method of the outer-most pass manager. The rest of the propagation is/automatic.//I've used SFINAE again to allow passes to completely disregard the/analysis manager if they don't need or want to care. This helps keep/simple things simple for users of the new pass manager.//Also, the system specifically supports passing a null pointer into the/outer-most run method if your pass pipeline neither needs nor wants to/deal with analyses. I find this of dubious utility as while some/*passes* don't care about analysis, I'm not sure there are any/real-world users of the pass manager itself that need to avoid even/creating an analysis manager. But it is easy to support, so there we go.//Finally I renamed the module proxy for the function analysis manager to/the more verbose but less confusing name of/FunctionAnalysisManagerModuleProxy. I hate this name, but I have no idea/what else to name these things. I'm expecting in the fullness of time to/potentially have the complete cross product of types at the proxy layer://{Module,SCC,Function,Loop,Region}AnalysisManager{Module,SCC,Function,Loop,Region}Proxy//(except for XAnalysisManagerXProxy which doesn't make any sense)//This should make it somewhat easier to do the next phases which is to/build the upward proxy and get its invalidation correct, as well as to/make the invalidation within the Module -> Function mapping pass be more/fine grained so as to invalidate fewer fuction analyses.//After all of the proxy analyses are done and the invalidation working,/I'll finally be able to start working on the next two fun fronts: how to/adapt an existing pass to work in both the legacy pass world and the new/one, and building the SCC, Loop, and Region counterparts. Fun times!//llvm-svn: 195400",https://github.com/microsoft/checkedc-clang/commit/b3e721995ff0712d0cecfc1bbce1a0cfc591bccf,60645050,microsoft/checkedc-clang,False,False
d793a053ad9839e40bf59293b8f2190dc5b21dc1,"[PM] Switch analysis managers to be threaded through the run methods/rather than the constructors of passes.//This simplifies the APIs of passes significantly and removes an error/prone pattern where the *same* manager had to be given to every/different layer. With the new API the analysis managers themselves will/have to be cross connected with proxy analyses that allow a pass at one/layer to query for the analysis manager of another layer. The proxy will/both expose a handle to the other layer's manager and it will provide/the invalidation hooks to ensure things remain consistent across layers./Finally, the outer-most analysis manager has to be passed to the run/method of the outer-most pass manager. The rest of the propagation is/automatic.//I've used SFINAE again to allow passes to completely disregard the/analysis manager if they don't need or want to care. This helps keep/simple things simple for users of the new pass manager.//Also, the system specifically supports passing a null pointer into the/outer-most run method if your pass pipeline neither needs nor wants to/deal with analyses. I find this of dubious utility as while some/*passes* don't care about analysis, I'm not sure there are any/real-world users of the pass manager itself that need to avoid even/creating an analysis manager. But it is easy to support, so there we go.//Finally I renamed the module proxy for the function analysis manager to/the more verbose but less confusing name of/FunctionAnalysisManagerModuleProxy. I hate this name, but I have no idea/what else to name these things. I'm expecting in the fullness of time to/potentially have the complete cross product of types at the proxy layer://{Module,SCC,Function,Loop,Region}AnalysisManager{Module,SCC,Function,Loop,Region}Proxy//(except for XAnalysisManagerXProxy which doesn't make any sense)//This should make it somewhat easier to do the next phases which is to/build the upward proxy and get its invalidation correct, as well as to/make the invalidation within the Module -> Function mapping pass be more/fine grained so as to invalidate fewer fuction analyses.//After all of the proxy analyses are done and the invalidation working,/I'll finally be able to start working on the next two fun fronts: how to/adapt an existing pass to work in both the legacy pass world and the new/one, and building the SCC, Loop, and Region counterparts. Fun times!//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@195400 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/d793a053ad9839e40bf59293b8f2190dc5b21dc1,60644745,microsoft/checkedc-llvm,False,False
30f74216028193e619826809897085a9f536a607,"Adding OpenSSL support to FFMPEG, fixed Assmimp UWP build (#2018)//* Enable ffmpeg to build using openssl for HTTPS/TLS support////* [ffmpeg] Add contract versions to libpath////* Updated FFMPEG to 3.3.3; Fixed unistd.h issue in ffmpeg build////* merge fix////* merge fix////* fix merge////* removed extra files////* Assimp UWP build fix////* [assimp] Bump version////* [ffmpeg] Implement openssl support through features.////* [opencv] remove ffmpeg depenency////OpenCV has own prebuilt ffmpeg library////* Fix version, package name is not a part of it////* Add support build option to PCL port////Add support build options (pcap, qt) to PCL port.////* Update VTK to 8.0.1////Update VTK to 8.0.1.////* [vcpkg] Enable pkg[*] as alias for all features.////* Using CP_UTF8 macro instead of magic numbers.////* [vcpkg] Add optional Abi field to BinaryParagraph for future use.////* [double-conversion] Fix --head builds////* [vcpkg] --head should only apply to USER_REQUESTED packages.////* [vcpkg] Fix bug where packages with uninstalled features appear to be uninstalled.////* Update Catch to 1.11.0////* Fix proxy usage in Win7 (powershell 2.0)////* [findVSInstances] Data lines are now placed within <sol><eol> tags. Text outside these tags is ignored////This means we can print text in powershell now and it won't break vcpkg.////* [fetchDependency] Now also returns output in the form <sol>data<eol>////* [git] Update to 2.15.0 (was 2.14.3)////* [bootstrap-vcpkg] Added better diagnostics in case of MSBuild failure.////* [poco] build with MySQL support (#2088)////* [poco] build with MySQL support////Set proper variables to enable MySQL support if libmysql port is installed////* [poco] Move Mysql support to a feature. Enable CMake config files.////* help assimp find vcpkg's copy of zlib so it does not build its own////* [assimp] Bump revision////* [assimp] Fix assimp overwriting CMAKE_PREFIX_PATH.////* [boost] Handle spaces in vcpkg path.////* [vcpkg] Fix use of features in undocumented build command////* Update to v1.2.0. Remove man pages////* [opencv] Remove ffmpeg from dependencies -- it is not currently possible to use an external ffmpeg with opencv.////Add features for cuda and vtk.////* Enable OpenGL support for GUI////Enable OpenGL support for GUI.////* [protobuf] Add feature packages for zlib////ZLib based features like Gzip streams.////* [llvm] Require Python3////* [blaze] Fix remaining stray _INVALID_ROOT_////* Add option to enable Qt GUI support////Add option to enable Qt GUI support.////* Sorting CMake options for maintainability////Sorting CMake options based on grouped of CMake-GUI  for//maintainability.////* VTK: implement features (#2071)////* [vtk/portfile] add OpenVR option////* [vtk/control] add OpenVR feature////* [vtk/portfile] Add OpenVR feature to portfile////* [vtk/CONTROL] add features////* [vtk/portfile] implement features////* [vtk/CONTROL] fix syntax////* [vtk/CONTROL] fix case////* [vtk/portfile] fix case////* [vtk/CONTROL] fix syntax////* [vtk/CONTROL] fix syntax////* [vtk/portfile] fix module name////* [vtk] Bump version////* [uwebsockets] Remove boost from dependency list to follow upstream's official README////* [libharu] Fix DLLIMPORT macro replacement////* Update CHANGELOG and bump version to v0.0.95////* Fix date in CHANGELOG.md////* [apr] Update to 1.6.3////* Enable C++11 features////Enable C++11 features.////* Enable Microsoft Media Foundation support for Video I/O////Enable Microsoft Media Foundation support for Video I/O.////* [double-conversion] Fix regression introduced in vcpkg_fixup_cmake_targets.////* [vcpkg] Refactor argument parsing to use common code paths.////* [vcpkg] Improve `vcpkg help` -- now has per-command help!////* [vcpkg-help-export-ifw] Add settings description////* [opencv] Disable MSMF in UWP due to an upstream bug////* [vcpkg_download_distfile] Now downloads in a temp dir and rename to the target location////* [vcpkg_find_acquire_program] Use vcpkg_download_distfile()////* Remove vcpkg_acquire_depot_tools////* [downloads] Don't show progress by default////* [vcpkg_acquire_msys] Use vcpkg_download_distfile()////* vcpkg_from_github] Use vcpkg_download_distfile()////* [vcpkg_from_bitbucket] Use vcpkg_download_distfile()////* [ports.cmake] Use vcpkg_download_distfile()////* [antlr] upgrade to antlr4.7////* [antlr4] bump version to 4.7////* Use download-at-temp-and-rename pattern in powershell too////* Print error message when there is a syntax error in triplet file////As it is now vcpkg fails silently (actually, it outputs two empty lines).////* [fdk-aac] init////* [fetchDependendy.ps1] Remove obsolete comment////* [fetchDependency.ps1] Improve error message on hash mismatch////* [vswhere] Update to 2.2.11 (was 2.2.7)////* libaiff////* Append W////* [libaiff] fix uninitialized buffer////* Add the flint2 library (#1988)////* Add the ""flint2"" library.////* FIX: update library name////* FIX: only set MSVC version to VC14////* FIX: use static linkage////* DOC: display notification to the user////* [flint/CONTROL] add gettimeofday dependency////* [flint/portfile] move up linkage////* [flint/portfile] attempt to override the CRT linkage////* Add arblib (#1991)////* Fix rename libraries of FLANN////Fix rename libraries of FLANN.////* Fix line endings////* [cmake] Update to 3.9.5 (was 3.9.4)////* Porting ITK////* Sourcing from GitHub, using a master version with vcpkg patch////* Update CHANGELOG and bump version to v0.0.96////* [fftw] update to 3.3.7////* [dlib] update to 19.7 and use vcpkg_from_github////* fix issue 2111////* Revert ""Updated libsigcpp to version 2.99.9""////This reverts commit 079ef9785ad539e1484f876577913a7269021288.////* Added glibmm and giomm.////* Added atkmm.////* Added pangomm.////* Added gtkmm////* Use unicode////* [glibmm] Add missing dependency: libsigcpp",https://github.com/microsoft/vcpkg/commit/30f74216028193e619826809897085a9f536a607,68312233,microsoft/vcpkg,False,False
