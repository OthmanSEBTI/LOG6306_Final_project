sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
2769a42731daaf34607f04580df14822f217b225,"Remove the @expectedFailure decorators, as rdar://problem/8542091 is supposed to be fixed./Also change the expected matching pattern of the 'expr -o -- my' output.//llvm-svn: 116645",https://github.com/microsoft/checkedc-clang/commit/2769a42731daaf34607f04580df14822f217b225,60645050,microsoft/checkedc-clang,False,False
84d521393b2a31bf491983dfc7ca4767e5c7851f,Implement ThemedReactContext as a decorator (#897)//* Syncing with upstream////* Reverting the Examples to the previous version////* Changed ThemedReactContext implementation to use the decorator pattern////* Removing virtuals since there are no inheiritors////* Added property to provide direct access to the ReactContext being decorated////* Removing public ReactContext Property Accessor////* Sorting Usings,https://github.com/microsoft/react-native-windows/commit/84d521393b2a31bf491983dfc7ca4767e5c7851f,48009214,microsoft/react-native-windows,False,False
7c44e99cd4aaea69e235fe687390092792db8d72,"Add code coverage color and pattern options -- fixes #1302 (#1695)//* Fixes #1683; column 8 is the coverage count, not a boolean////* Adds color/pattern options for coverage decorators. Fixes #1302////* Add missing semicolon////* Fix typo in some svg files.////* trivial change to trigger CI again////* Remove unused isWholeLine////* Support the complex types in the schema",https://github.com/microsoft/vscode-go/commit/7c44e99cd4aaea69e235fe687390092792db8d72,44264925,microsoft/vscode-go,False,False
bfbbf5dc5e5965931c91b2032bf725e1b81508b4,"Implement listMethods for lua generic app (#570)//* Virtualise list_methods, override in luageneric////* Add parametrisable test requirement////* Example usage////* Parametrisable decorators, standard enforcement pattern////* Provide simple lua_generic_app req////* batched test requires specific methods////* Wrapper should forward return value!////* Reduce boilerplate////* Remove temp docstring",https://github.com/microsoft/CCF/commit/bfbbf5dc5e5965931c91b2032bf725e1b81508b4,180112558,microsoft/CCF,False,False
e244ceec2e365b3a9bc0c1ea6585977615885bd8,"Adding a test case for pr15415 - partial backtrace with -fomit-frame-pointer/that is patterned after its parent TestInferiorCrashing.py.//- The xfail decorator limits the xfail to tool-chains that support this compiler option./- Included a TODO concerning the platform-specific behavior when 'next' is issued after a crash./- Toggling -fomit-frame-pointer results in an xpass as mentioned in pr15415.//Thanks to Daniel for the review, and Samuel for the bug report and reproducer.//llvm-svn: 183434",https://github.com/microsoft/checkedc-clang/commit/e244ceec2e365b3a9bc0c1ea6585977615885bd8,60645050,microsoft/checkedc-clang,False,False
5ecdca834ff5fb4a5f343b18d3068dd883ce95e1,Shimmer: refactor in preparation for migration to OUFR (#4958)//* Adds new prop: className.//Removes some styling from shimmer container.////* Removes unnecessary styles.//Setup of elements wrapper.////* Refactoring some styles.//Extracts some logic to a new module.////* A lot of refactor.//Still a lot to do.////* Change new prop name for better semantics.////* Apply new prop to application in detailsList example.////* Use the new prop in TilesList.////* More REFACTOR.////* More examples...////* Enums refactor and documentation.////* Overflow text fix in LoadData example.////* Moves deprecated props down.////* Brings logic for RTL animation.////* Introduces @customizable decorator to enable custom theming of the colors.////* Sets an example for getStyles prop.////* Adds more documentation to Shimmer Page.////* Sets up a flag to remove the shimmerWrapper from the flow as soon as the transition animation is done.////* Adds rounded corners to shimmer lines.////* More refactor :)////* Clears a timeout for application example.////* Adds accessibility capabilities for screenreaders.////* Refactors some highContrast styling.//Refactors common styles in ShimmerLine.styles////* Modularize ShimmerElementsGroup////* Customize ShimmerElementsGroup.////* Refactor mergeStyles pattern in ShimmerElementsGroup////* Convert subelements to the new pattern of mergeStyles.////* Removes some styles.////* Fixes support for various browsers.//High Contrast capability.////* Fill color for line corners in high contrast mode.////* Rush change log.////* Fix tslint warnings.////* Adds a default prop in ShimmerElementsGroup,https://github.com/microsoft/fluentui/commit/5ecdca834ff5fb4a5f343b18d3068dd883ce95e1,60537144,microsoft/fluentui,False,False
5e3e4bb26b4225156344eaa3ef538396a5993e3b,"[CodeView] Decouple record deserialization from visitor dispatch.//Until now, our use case for the visitor has been to take a stream of bytes/representing a type stream, deserialize the records in sequence, and do/something with them, where ""something"" is determined by how the user/implements a particular set of callbacks on an abstract class.//For actually writing PDBs, however, we want to do the reverse. We have/some kind of description of the list of records in their in-memory format,/and we want to process each one. Perhaps by serializing them to a byte/stream, or perhaps by converting them from one description format (Yaml)/to another (in-memory representation).//This was difficult in the current model because deserialization and/invoking the callbacks were tightly coupled.//With this patch we change this so that TypeDeserializer is itself an/implementation of the particular set of callbacks. This decouples/deserialization from the iteration over a list of records and invocation/of the callbacks.  TypeDeserializer is initialized with another/implementation of the callback interface, so that upon deserialization it/can pass the deserialized record through to the next set of callbacks. In/a sense this is like an implementation of the Decorator design pattern,/where the Deserializer is a decorator.//This will be useful for writing Pdbs from yaml, where we have a/description of the type records in Yaml format. In this case, the visitor/implementation would have each visitation callback method implemented in/such a way as to extract the proper set of fields from the Yaml, and it/could maintain state that builds up a list of these records. Finally at/the end we can pass this information through to another set of callbacks/which serializes them into a byte stream.//Reviewed By: majnemer, ruiu, rnk/Differential Revision: https://reviews.llvm.org/D23177//llvm-svn: 277871",https://github.com/microsoft/checkedc-clang/commit/5e3e4bb26b4225156344eaa3ef538396a5993e3b,60645050,microsoft/checkedc-clang,False,False
3483f21bbc116d46856212e30472482d991731c6,"[CodeView] Decouple record deserialization from visitor dispatch.//Until now, our use case for the visitor has been to take a stream of bytes/representing a type stream, deserialize the records in sequence, and do/something with them, where ""something"" is determined by how the user/implements a particular set of callbacks on an abstract class.//For actually writing PDBs, however, we want to do the reverse. We have/some kind of description of the list of records in their in-memory format,/and we want to process each one. Perhaps by serializing them to a byte/stream, or perhaps by converting them from one description format (Yaml)/to another (in-memory representation).//This was difficult in the current model because deserialization and/invoking the callbacks were tightly coupled.//With this patch we change this so that TypeDeserializer is itself an/implementation of the particular set of callbacks. This decouples/deserialization from the iteration over a list of records and invocation/of the callbacks.  TypeDeserializer is initialized with another/implementation of the callback interface, so that upon deserialization it/can pass the deserialized record through to the next set of callbacks. In/a sense this is like an implementation of the Decorator design pattern,/where the Deserializer is a decorator.//This will be useful for writing Pdbs from yaml, where we have a/description of the type records in Yaml format. In this case, the visitor/implementation would have each visitation callback method implemented in/such a way as to extract the proper set of fields from the Yaml, and it/could maintain state that builds up a list of these records. Finally at/the end we can pass this information through to another set of callbacks/which serializes them into a byte stream.//Reviewed By: majnemer, ruiu, rnk/Differential Revision: https://reviews.llvm.org/D23177//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@277871 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/3483f21bbc116d46856212e30472482d991731c6,29704274,microsoft/llvm,False,False
3483f21bbc116d46856212e30472482d991731c6,"[CodeView] Decouple record deserialization from visitor dispatch.//Until now, our use case for the visitor has been to take a stream of bytes/representing a type stream, deserialize the records in sequence, and do/something with them, where ""something"" is determined by how the user/implements a particular set of callbacks on an abstract class.//For actually writing PDBs, however, we want to do the reverse. We have/some kind of description of the list of records in their in-memory format,/and we want to process each one. Perhaps by serializing them to a byte/stream, or perhaps by converting them from one description format (Yaml)/to another (in-memory representation).//This was difficult in the current model because deserialization and/invoking the callbacks were tightly coupled.//With this patch we change this so that TypeDeserializer is itself an/implementation of the particular set of callbacks. This decouples/deserialization from the iteration over a list of records and invocation/of the callbacks.  TypeDeserializer is initialized with another/implementation of the callback interface, so that upon deserialization it/can pass the deserialized record through to the next set of callbacks. In/a sense this is like an implementation of the Decorator design pattern,/where the Deserializer is a decorator.//This will be useful for writing Pdbs from yaml, where we have a/description of the type records in Yaml format. In this case, the visitor/implementation would have each visitation callback method implemented in/such a way as to extract the proper set of fields from the Yaml, and it/could maintain state that builds up a list of these records. Finally at/the end we can pass this information through to another set of callbacks/which serializes them into a byte stream.//Reviewed By: majnemer, ruiu, rnk/Differential Revision: https://reviews.llvm.org/D23177//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@277871 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/3483f21bbc116d46856212e30472482d991731c6,60644745,microsoft/checkedc-llvm,False,False
