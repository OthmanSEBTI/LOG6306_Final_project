sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
f5e4f37cb67114cde73bea8befa0187b1c32b4c5,Update HostProcess to use the same facade pattern as HostThread.//llvm-svn: 217632,https://github.com/microsoft/checkedc-clang/commit/f5e4f37cb67114cde73bea8befa0187b1c32b4c5,60645050,microsoft/checkedc-clang,False,False
627e0f9985ffc5df68931914a76468e1e555e39e,"[IR] Make SwitchInst::CaseIt almost a normal iterator.//This moves it to the iterator facade utilities giving it full random/access semantics, etc. It can also now be used with standard algorithms/like std::all_of and std::any_of and range adaptors like llvm::reverse.//Also make the semantics of iterating match what every other iterator/uses and forbid decrementing past the begin iterator. This was used as/a hacky way to work around iterator invalidation. However, every/instance trying to do this failed to actually avoid touching invalid/iterators despite the clear documentation that the removed and all/subsequent iterators become invalid including the end iterator. So I've/added a return of the next iterator to removeCase and rewritten the/loops that were doing this to correctly follow the iterator pattern of/either incremneting or removing and assigning fresh values to the/iterator and the end.//In one case we were trying to go backwards to make this cleaner but it/doesn't actually work. I've made that code match the code we use/everywhere else to remove cases as we iterate. This changes the order of/cases in one test output and I moved that test to CHECK-DAG so it/wouldn't care -- the order isn't semantically meaningful anyways.//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@298791 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/627e0f9985ffc5df68931914a76468e1e555e39e,29704274,microsoft/llvm,False,False
0d256c0f5d246e884ec0320b703bb3a0606aefc5,"[IR] Make SwitchInst::CaseIt almost a normal iterator.//This moves it to the iterator facade utilities giving it full random/access semantics, etc. It can also now be used with standard algorithms/like std::all_of and std::any_of and range adaptors like llvm::reverse.//Also make the semantics of iterating match what every other iterator/uses and forbid decrementing past the begin iterator. This was used as/a hacky way to work around iterator invalidation. However, every/instance trying to do this failed to actually avoid touching invalid/iterators despite the clear documentation that the removed and all/subsequent iterators become invalid including the end iterator. So I've/added a return of the next iterator to removeCase and rewritten the/loops that were doing this to correctly follow the iterator pattern of/either incremneting or removing and assigning fresh values to the/iterator and the end.//In one case we were trying to go backwards to make this cleaner but it/doesn't actually work. I've made that code match the code we use/everywhere else to remove cases as we iterate. This changes the order of/cases in one test output and I moved that test to CHECK-DAG so it/wouldn't care -- the order isn't semantically meaningful anyways.//llvm-svn: 298791",https://github.com/microsoft/checkedc-clang/commit/0d256c0f5d246e884ec0320b703bb3a0606aefc5,60645050,microsoft/checkedc-clang,False,False
627e0f9985ffc5df68931914a76468e1e555e39e,"[IR] Make SwitchInst::CaseIt almost a normal iterator.//This moves it to the iterator facade utilities giving it full random/access semantics, etc. It can also now be used with standard algorithms/like std::all_of and std::any_of and range adaptors like llvm::reverse.//Also make the semantics of iterating match what every other iterator/uses and forbid decrementing past the begin iterator. This was used as/a hacky way to work around iterator invalidation. However, every/instance trying to do this failed to actually avoid touching invalid/iterators despite the clear documentation that the removed and all/subsequent iterators become invalid including the end iterator. So I've/added a return of the next iterator to removeCase and rewritten the/loops that were doing this to correctly follow the iterator pattern of/either incremneting or removing and assigning fresh values to the/iterator and the end.//In one case we were trying to go backwards to make this cleaner but it/doesn't actually work. I've made that code match the code we use/everywhere else to remove cases as we iterate. This changes the order of/cases in one test output and I moved that test to CHECK-DAG so it/wouldn't care -- the order isn't semantically meaningful anyways.//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@298791 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/627e0f9985ffc5df68931914a76468e1e555e39e,60644745,microsoft/checkedc-llvm,False,False
