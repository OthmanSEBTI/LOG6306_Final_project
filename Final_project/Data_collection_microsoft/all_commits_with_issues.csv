,sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork,issues,issues_count
1,a6a1e9265b2963e08bf7034feb2d59f1942e8d2f,"Update Facebook, Slack, Webex adapters (#4214)//* Update Facebook, Slack, Webex adapters to follow pattern from Twilio adapter////* Tweak exception messages",https://github.com/microsoft/botbuilder-dotnet/commit/a6a1e9265b2963e08bf7034feb2d59f1942e8d2f,117021670,microsoft/botbuilder-dotnet,False,False,['#4214'],1
2,593918dc8ee17297d034c1b9119c412ea4b5af41,Filter adapter dlls from vstest default pattern (#5730),https://github.com/microsoft/azure-pipelines-tasks/commit/593918dc8ee17297d034c1b9119c412ea4b5af41,27631673,microsoft/azure-pipelines-tasks,False,False,['#5730'],2
3,44843fdace107f23bb9351c05e0d5789aea3164e,Users/nigurr/fix adapter pattern (#3677)//* Ignore case sensitivity while searching Adapters - xunit as an example////* Bumped up task version,https://github.com/microsoft/azure-pipelines-tasks/commit/44843fdace107f23bb9351c05e0d5789aea3164e,27631673,microsoft/azure-pipelines-tasks,False,False,['#3677'],3
7,31eb77e5923f48906844427a1b2a299bb1cadaf5,Fixes #1558 - Bump C# samples should use  new constructor for BotFrameworkHttpAdapter (#1605)//* Update samples to use 4.4.5 BotFrameworkHttpAdapter////use new Adapter pattern using IConfiguration//remove ICredentialProvider//update csproj files to use 4.4.5 of the bot fx////* More gov cloud updates////* address code review feedback////remove unnecessary package references from csproj files,https://github.com/microsoft/BotBuilder-Samples/commit/31eb77e5923f48906844427a1b2a299bb1cadaf5,68730444,microsoft/BotBuilder-Samples,False,False,"['#1558', '#1605']",4
8,9825df042ad28440663130cd9e2e8b2a3685a501,"Wrap Convert.ToInt32 method to catch conversion error  (#4211)//* Double cancellation test: improve test////* Add OnPreBubble smartness to consult with QnA to decide whehter to allow interruptions.//If QnAMaker is interrupted end the dialog.////* Adaptive: Minor tweaks to CycleDetectionObserver. Clone from cache on non-loops, don't clone on loops - just stitch things together.////* nuget.client is a package which is no longer being updated, they replaced it with nuget.packaing which is many versions past the one we were using.//Worse, nuget.client had a bad prerelase package pushed in 2017 that breaks install adaptive into linqpad.//also fixed .dialog files which were not compliant to schema (missing actions node)////* Do NOT call TeamsInfo.getMember for the bot (#3923) (#3924)////* Do NOT call TeamsInfo.getMember for the bot////* Add TestConversationUpdateBotTeamsMemberAdded////* Add interdependencies graph to readme (#3921)////* Add dependency graph////* Update README.md////* Update README.md////* Remove DependencyGraph folder////* Update graph title////* Update graph title 2////* Title tweak 3////* Fix path to graph////* Fix unit test for formatting numbers////On my machine, this unit test fails. The issue is that the expected value is incorrect. The `CurrencyGroupSeparator` for `fr-FR` is `\x202F` not `00a0`////* Fix some typos in the same test////* Slack sets timestamp as unix time in seconds////If the server validates that the timestamp is recent to prevent replay attacks, then this would fail.////* convert datetime object from memory to iso timestamp////* revert////* supoort datetime object input////* Update to link to the new 4.9.1 dependency graph (#3929)////* Remove functional-test-setup-steps.yml call from botbuilder-dotnet-sign.yml. (#3948)////* add test cases////* change error message////* modify isDateTime function////* Add badges for Win functional tests and Linux functional tests (#3950)////* Maintain the high priority and independence of multiline (#3944)////* Support long/int64 in number constant (#3912)////* add long support////* just use long to parse integer////* revert int parse////* add unit tests////* [LG] Make template name format consistent with function name format (#3946)////* Restrict the format of templateName////* typo////* modify the message////* Remove path excludes from triggers (#3951)////* Eliminate path-based excludes for CI build checks required by github////* Add comment////* Fixes BadRequest message in Teams (#3966) (#3967)////* Added check to ensure we don't send EoC when a skill is done and we are at the root bot.//Updated tests to handle this case and removed duplicated test after refactoring.//Fixed some typos and trace message names.////* Hardened prompts (#3949)////* hardened prompts////* rename message to utterance////* Update to support object defaultOperations.////* support expression in debug evaluate////* Improve handling of PROPERTYName.////* Add property to EntityInfo.////* Fix assignment swallowing.////* Fix issue where loop stops early.////* Udpate generator unit tests to include operations and arrays.////* Move strings to constants.////* Normalize line endings in assert.////* [Cherry pick from 4.9] Auth: Tighten JWT validation of channel-issued tokens with certificate signature (#3983)////* Auth: Tighten JWT validation of channel issued tokens with certificate signature////* Fix comment in test////* Auth improvements: add test category and adjust linux build settings////* Auth tests: cleanup self-signed certs after tests////* Update README.md (#3999)////* [Expression] Add DateTimeDiff prebuilt function (#3934)////* add DateTimeDiff prebuilt function////* remove unnecessary import////* fix the error message////* modify input types////* Add sentenceCase && titleCase builtin function (#3994)////* add sentanceCase builtin function////* add titleCase function////* refine////* refine sentenceCase////* add EOL builtin function (#3992)////* Make data and locale optional in multilingual LG (#3932)////* fix datetime timezone (#4002)////* Change Platform to TestCategory (#3991)////* Change error messages in pre-built functions to make the descriptions more accurate (#3987)////* modify error messages////* fix typos////* fix spelling of time zone////* fix comments////* remove redundent words////* fix grammer issue////* Add ticksToDays, ticksToHours, ticksToMinutes pre-built functions (#3988)////* add TicksToDays, TicksToHours, TicksToMinutes prebuilt functions////* add TicksToDays, TicksToHours, TicksToMinutes prebuilt functions////* resolve test fails////* modify return type////* make ticksperday, etc as constant////* Don't throw exception on unhandled VersionChangeDetected event (#4000) (#4015)////* disable throwing exception if dialog change not handled////* remove trace from versionChanged////Co-authored-by: Tom Laird-McConnell <tomlm@microsoft.com>////* Adjust grammar to improve LG parsing performance (#4021)////* fix LG perf issue////* init////* Calling an event driven dialog did not work because passed in options would override the initial setup of dialog memory.////* Refine template loop detection to enable recursive functions (#4012)////* refine loop detection////* make GetId depends on Version of IMemory////* refine ID////* add self loop test////* cover nullable situation////* enable recursive functions in Expander////* Reduce the recursion stack depth to pass MacOS test////* init error refine////* support null in isObject and isString (#4024)////* add expression parse cache (#4026)////* add source info into error msg////* remove magic string////* ignore line numner of diagnostic for inline text////* rename,FakeTemplateId -> InlineTemplateId////* add dialogContext memory scope////* fix corner case of expander////* move activity triggers into folder////* First cut of Teams adaptive library////* fix child scope and moar unit tests////* [LG] Move ""EXPRESSION"" in LG from lexer to parser (#3898)////* init////* maintain the orginal runtime error////* init////* add test////* add tests////* updatee tests.schema////* update schema////* Make Activity valid for there is only channelData////* Add floor, ceiling, round pre-built functions (#4017)////* add floor, ceiling, round////* fix comments////* modify numberTransform method////* fix comments////* fix strict mode issue in expander////* adjust test cases////* add expandText LG function////* change Regex replace with EvaluateText////* Update doc XML (#4031)////- Fixes warnings in ref doc build, primarily.//- Also fixes a small amount of wording and grammar.////* Sets warnings as errors and adds FxCop analyzer to Schema project. (#4061)////* Configured TreatWarningsAsErrors on all projects in the libraries folder except for Microsoft.Bot.Builder.Dialogs.Adaptive.Testing (that needs to be addressed separatelly).//Created Directory.Build.props for FunctionalTests and Tests to manage excludes for the projects in those folders.//Added NoWarn properties for documentation on each project (these will be addressed by another issue).//Fixed long hanging fruit warnings.//Added Roslyn FxCop analyzer to Microsoft.Bot.Schema and fixed violation or excluded them using #pragma.////* Fixed binary compat issues////* Fixed more binary compat issues////* Add ContinueConversation event activity support to BotFrameworkAdapter//Add PostActivityAsync method to BotFrameworkHttpClient to make it easy to post EventActivity to your bot//Add ContinueConversationLater action to BotBuilder.Azure//Add unit tests, etc.////* fix project dependencies////* update tests.schema////* add 'new' attribute to kind////* reverted changes to BotFrameworkAdapter, realized they weren't required.////* fix unit test logic.////* update declearitve tests////* disable merge test on linux/mac////* only build schema file on windows////* add http body expression evaluate////* add body is null condition////* apply list in concat////* add tests////* rename to align with teamshandler names////* renamed $kind namespace to ""Teams""////* change kind namespace for ContinueConversationLater to AzureQueues////* Add community docs (#4067)////* Added PR template, Code of Conduct doc and Contributing guidance doc as per community guidelines.////* Amends for code of conduct////* Readded deleted files////* Fix httprequest for string content,//add mocked httprequest unit tests for HttpRequest////* add header binding to unit test////* fix linux breaks////* Refactor of Slack adapter to address dependency on 3rd party library (#4046)////* Further WIP////* - Removed unused files//- Updated tests//- Removed remaining dependencies on client model classes////* Remove redundant error supression////* Added missing classes as per PR #3760////* Fix up namespaces for model classes////* Fix up tests////* Fixed warnings on build////* Removed redundant XML comment////* Fix HtpRequest tests on linux/mac (\r\n vs \n )////* change order of using////* changes based on PR feedback, copyright and disposing of response////* Fix functional test builds to not fail on code analysis errors (#4074)////* Add --no-build parameter to dotnet publish////* Change dotnet publish argument to ""-p RunCodeAnalysis=False""////* Fix arg to ""-p:RunCodeAnalysis=False""////* Add arg ""/p:StyleCopEnabled=false""////* Fix case of false in -p:RunCodeAnalysis=false /p:StyleCopEnabled=false////* Set 4 command line properties////* Set --verbosity diag////* Remove $(SolutionDir) references, as they don't work in ""dotnet publish"".////* Clean up args////* Set -p:CodeAnalysisRuleSet=''////* Revert .csproj to use $(SolutionDir).////* Add SolutionDir var////* Fix quotes////* Clean up////* Add comment////* Update the other pipelines////* Add aadGroupId to TeamInfo (#4078)////* Add aadGroupId to TeamInfo////* Remove additional constructor from TeamInfo////* address Gabo's feedback////* add HttpRequestMock and test////* Update OAuthInput.cs////* Enables FxCop Analyzer for the Connector library (#4110)////* Enables FxCop Analyzer for the Connector library and addressed violations.//Marked OAuthClientOld as obsolete.//Makred a lot of private methods in AdalAuthenticator as statics (that's the big diff here)////* Address Carlos feedback.////* Added intial cut at daily build spec////* Migrates Tests tests to Xunit (#4082)////* migrating teams tests////* adding skills////* Updates to Daily Build Proposal////* Porting Adapters folder to Xunit (#4115)////* migrating testadapters to xunit////* fixes #4107 migrating adapters folder to xunit//// Please enter the commit message for your changes. Lines starting////* disable codeSignValidationInjection task in main CI (#4056)////* Merge 4.9 back to master (#4032)////* Do NOT call TeamsInfo.getMember for the bot (#3923)////* Do NOT call TeamsInfo.getMember for the bot////* Add TestConversationUpdateBotTeamsMemberAdded////* Declarative: disable cycle detection to reduce release risk////* Update Nuget.Client to resolve circular reference exceptions (#3964)////* Fixes BadRequest message in Teams (#3966)////* Added check to ensure we don't send EoC when a skill is done and we are at the root bot.//Updated tests to handle this case and removed duplicated test after refactoring.//Fixed some typos and trace message names.////* Auth: Tighten JWT validation of channel-issued tokens with certificate signature (#3978)////* Auth: Tighten JWT validation of channel issued tokens with certificate signature////* Fix comment in test////* Auth improvements: add test category and adjust linux build settings////* Auth tests: cleanup self-signed certs after tests////* Change filter to ""TestCategory"". (#3986)////* Don't throw exception on unhandled VersionChangeDetected event (#4000)////* disable throwing exception if dialog change not handled////* remove trace from versionChanged////Co-authored-by: Eric Dahlvang <v-eridah@microsoft.com>//Co-authored-by: Carlos Castro <ccastro@microsoft.com>//Co-authored-by: Monica Rivera <44449640+mrivera-ms@users.noreply.github.com>//Co-authored-by: Gabo Gilabert <gabog@users.noreply.github.com>//Co-authored-by: Carlos Castro <carlosscastro@users.noreply.github.com>//Co-authored-by: BruceHaley <v-bruhal@microsoft.com>////* Update LuisExtensions.cs (#4011)////* Fixes issue #3960 [QnAMaker] [DotNet] Implementing QnAMaker's precise answering capability as an additional feature for BotFramework users (#3935)////* AnswerSpanRequest property in Request.////* Answer span changes for request and response data sstructures////* Request and Result object conversion////* datatype definition change from boolean to bool for enable AnswerSpan////* Text////* spaces////* MRCEnable instead of AnswerSpanRequest////* Answerspan text set to answer for MRC////* Mock changes////* Review comments changes////* Tests for both and precise////* Update GetQnAPromptsCard invocation in tests////* GetQnAPromptsContentCard method////* Review comments////* Request changes////* refactoring////* Refactoring Tests////* Tests refactoring for comments////* Added Copyright headers////* Modified comment text for review comment.////* Update QnAMakerDialog.cs////* document text modified.////* Copy right header formatting////* Remove unused import////* Revert ""Added Copyright headers""////This reverts commit b13d2ebdf428643a648c0711f642d74fd53813b8.////* Copyright header////* Comment modified for grammar and clarity////* Review comments////* For fixing assembly difference issue////* Revert ""For fixing assembly difference issue""////This reverts commit fdfcbe0c0e4ac1885f8d1f84b5267a2c1c94d662.////* For assemblies issue////* Added purpose of property in summary.////* Comments improved////* For Review comments////* For review comments////* Spellings Syntax////* Content corrections////* Content comments changes////* content request////* content changes////* Content changes for comments////* Content review updates////* Content changes////* content chagnes////* Revert enablePreciseAnswer to bool////* removing json property for enable preccise////* Reverting Recognizer changes////* schema change and BoolExpression////* Review comments////* initialization of EnablePreciseAnswer////* schema changes for Display Precise AnswerOnly////* BoolExpression for DisplayPreciseAnswerOnly////* bool property for displayPreciseAnswer////* Updated comments////* Null checks and CardEqualityComparer comments////* Undo contenttype change.////* format////* Final Commit////* Spaces formating.////* Indentation for schema files.////* update schema////* Make content type check more robust (#4125)////* If there is no utterance we should return no intents.////* update regexrecognizer to return no intents if there is no utterance just like LuisRecognizer.////* update oracle tests////* added custom isDialogActive function to adaptive assembly.////* add unit tests for EditActions AppendActions and EditAction InsertActions////* Migrating Schema to Xunit (#4130)////* migrating tests to Xunit////* fixes #4105 removing MSTest packages////* fix expandText return type error (#4132)////* fix expandText return type error////* fix////* Add hasPendingActions() function which returns true if there is an executing plan for the current active adaptive dialog.////* add declarative function test for isDialogActive////* Updates to Facebook Adapter (#4123)////* - Updated Facebook Adapter to accept Facebook Adapter Options, with an optional param to override the client.//- Update code docs and removed error supression for code doc warnings////* Updates following review////* add isActionActive() alias for isDialogActive()//add unit test for multiple editactions////* Josh/botbuilder tests (#4128)////* migrating teams tests////* adding skills////* fixing rebase////* resolving individual xunit functions////* fixing missed params////* removing TestContext from util////* removing MSTest packages////* deleting test folder before tests run////* adding file resets to other test files////* cleaning up assert logic////* change to xunit////* Add ToAttachment method for OAuthCard (#4126)////* Add OAuthCards ToAttachment method////* Add unit tests for ToAttachment methods////* Refactor tests:////- Replace MSTest with Xunit//- Remove Bot.builder project dependency////* Add empty recognizer support for composer scenario////* Porting adaptiveexpressions tests to xunit (#4138)////* porting tests to xunit////* Removing packages////* * Fix switch to not treat expression errors as exceptions but instead as false condition//* Fix switch to treat ambiguity in string case definition more robustly.////* Add DialogException, catch and throw////* Add constants for dialogcontext paths////* make dialogException calculate full contextual stack frame////* only keep dialog ids in exception, state is duplicate of data in the state bag////* removed dialogException and use Exception.Data to annotate exceptions with dialog context metadata.////* Updates to readme for accuracy, consistency across languages and consolidating wiki content. (#4159)////* Fix Slack functional test build (#4160)////* add az group create////* Switch to template-with-preexisting-rg.json////* Fix template args for az deployment sub create////* Fix arg appServicePlanLocation////* Try ""call az deployment group create""////* Fix call az deployment group create #4////* Minor updates to proposal for review.////* Markdown fixes for formatting////* Fix 3 functional test builds (#4163)////* add az group create////* Switch to template-with-preexisting-rg.json////* Fix template args for az deployment sub create////* Fix arg appServicePlanLocation////* Try ""call az deployment group create""////* Fix call az deployment group create #4////* Fix facebook pipeline////* Fix facebook call az deployment group create////* Fix template reference////* Fix webex pipeline////* Drop --location ""westus""////* Fix windows func test build////* Fix botgroup////* Remove slack refs from windows template////* Add message to ""Set up directline keys""////* Change endpoint to mybot from messages (#4167)////* Added FxCop to Microsoft.BotBuilder and addressed errors. (#4141)////* Added FxCop to Microsoft.BotBuilder and addressed errors.//Enabled the SX1309 (FieldNamesShouldBeginWithUnderscores) stylecop rule and addressed the violations on BotBuilder but excluded it from the other projects for now to avoid collisions.//Enabled CA1309 (Use ordinal StringComparison) to the main ruleset and addressed violations.//Added ($NoWarn) to root dir props to make sure tests take this value.////* Enabled AsyncUsage analyzer and fixed violations wherever ir was possible.////* Refactore Task.Run usages to await/async equivalents.////* Updated Adapters folder to use FxCop 3.0////* Refactored ShowTypingMiddleware to avoid using Task.Run so we don't create unnecessary threads.////* Updated constructor to use _httpClient field instead of the expression.////* Revert ""Fixes issue #3960 [QnAMaker] [DotNet] Implementing QnAMaker's precise answering capability as an additional feature for BotFramework users (#3935)"" (#4170)////This reverts commit 48461190c2e52b123d15aebceecbeb1711091b5a.////* Enabled FxCop on the Dialogs project and Integration folder (#4168)////* Enabled FxCop on the Dialogs project and fixed errors.////* Enabled FxCop and Async usage analyzers on the integration folder projects usinga BuildProps file and fixed errors.////* Fixed some FxCop issues for WebApi projects that only show when targetting Windows in the build.//Added reference to editorconfig to the sln file to make it easier to maintain.////* Port LanguageGeneration to Xunit (#4181)////* adding xunit packages////* porting language generation tests to xunit////* removing MS Test////* Add Obsolete attribute to Microsoft.Bot.Configuration.LuisService (#4136)////* Update////* Further improve LG's performance (#4083)////* add templateBodyCache////* update////* re-do updateTemplate////* improve perf for addTemplate and DeleteTemplate////* add more tests and remove cache////* adjust test////* adjust////* fix environment newline issue////* try fix ci error////* add tests////* extract methods////* refine////* fix////* revert////* renaming and add more tests////* add more comments////* extract range offset////* properly escape slashes in constant strings////* Add LinkToMessage in MessageActionsPayload class (#4150)////* Add LinkToMessage property////* Add unit tests for MessageActionsPayload class////* Apply feedback in unit test and constructor////* Add assertion of LinkToMessage property in test.////Co-authored-by: Cecilia Avila <cecilia.avila@southworks.com>////* update tests for tab roundtrip too////* Add missing code docs for Configuration lib (#4190)////* Add missing code docs for the webex adapter (#4127)////* Extend 'getProperty' builtin function to support accessing top memory. (#4176)////* enhance getProperty////* add more tests////* adjust the error message////* Add logging to BotFrameworkHttpClient.PostActivityAsync() (#4134)////* Add logging to BotFrameworkHttpClient.PostActivityAsync()////* Adding message logged message lost after refactor.////* add Microsoft.Test.SettingsPropertiesMock with test////* refactor Convert.ToInt32////* refactor Convert.ToInt32////* update & add schema////* Remove references to MissingMemberException (#4196)////* Porting Transcript tests to Xunit (#4135)////* fixing rebase////* removing MSTest packages////* rebasing////* readding visualstuio package////* Refactoring AI Luis V3 to Xunit (#4151)////* refactoring to xunit////* removing MS TEst////* Remove Slack from the list of channels that support Suggested Actions (#4177)////* Update missing code docs for the Azure library (#4189)////* Move TelemetryClient property to DialogContainer (#4178)////* Add ImageAltText to CardAction (#4195)////* [Adaptive] Add Binary Data Parsing For Http Request (#3813)////* add binary data support to http request////* fix comment////* fix space////* update schema////* binary type return bytes directly////* fix compile error////* add ut for response types.////* Add Teams Channel Restored event (#4202)////* Add Teams' ChannelRestored event////* Add test for OnTeamsChannelRestoredAsync method////* Add missing documentation for TeamsActivityHandler////Co-authored-by: Cecilia Avila <cecilia.avila@southworks.com>////* Porting Adaptive Templates to Xunit (#4183)////* porting tests to xunit////* removing unused file////* removing MS Test////* registering components once per test suite////* Add missing code docs for the AI libraries (LUIS / QnA) (#4147)////* Add missing code docs for the AI libraries (LUIS / QnA)////* Manually fixed some merge conflicts to match master////* Fixed other naming errors for new variables that came with the merge////Co-authored-by: Gabo Gilabert <ggilaber@microsoft.com>////* doc cleanup (#4162)////Co-authored-by: Vishwac Sena Kannan <vishwacsenakannan@MININT-KG5GAD9.fareast.corp.microsoft.com>////* [Engineering] Update codeowners (#4171)////* updated codeowners// - @microsoft/bb-dotnet// - @microsoft/bf-admin// - @microsoft/bf-adaptive////* add comments and more GH Teams to CODEOWNERS////* change normalizeDateTime and add tests////* change normalizeDateTime and add tests////* add test case for formatNumber////* add test case for formatNumber////* Add missing code docs to integration libraries (#4137)////* Added code docs to AppInsights Core lib////* Add missing code docs to integration libraries////Co-authored-by: Chris Mullins <cleemullins@users.noreply.github.com>////* Update Facebook, Slack, Webex adapters (#4214)////* Update Facebook, Slack, Webex adapters to follow pattern from Twilio adapter////* Tweak exception messages////* add Microsoft.Test.UserTokenMock & tests (#4145)////* add Microsoft.Test.UserTokenMock & tests////* give it more time////* use pretty approach instead of MockData////* [Expression] Add merge prebuilt function for merging JSON object (#4075)////* add merge function////* remove support of JArray in merge////* fix some format and error msgs////* fix two error msgs////* fix typos////* add using////* Remove preview tag from adapters (#4215)////* Remove preview tag from adapters////* Updated to include package version property////* use invariant culture////* fix merge and allow either 00A0 or 202F in fr-fr numbers////* use WrapDialogForPropertyMocks for all kinds of properties////add more tests////* add comment////* Add null check for locale into MultiLanguageRecognizer////* fix (#4229)////Co-authored-by: Vishwac Sena Kannan <vishwacsenakannan@MININT-G8HVI76.redmond.corp.microsoft.com>////* add directlinespeech support to prompts (#4224)////* fix (#4231)////Co-authored-by: Vishwac Sena Kannan <vishwacsenakannan@MININT-G8HVI76.redmond.corp.microsoft.com>////* Add EndOfConversationCodes to EndOfConversation activity from Skill (#4235)////* Fixes issue with InvokeResponse<T> hidding the underlying value for Body. (#4232)////Makes methods ins SkillHttpClient virtual so they can be mocked in tests.//Updated BotFrameworkClient to use a deepclone of the activity rather than try/catch/finally to simply code and make sure we don't risk altering the original activity while the async request is being executed.//Improved test coverage for BotFrameworkClient and SkillHttpClient.////* Updated FN Test projects to match samples (#4236)////* Fixes issue with InvokeResponse<T> hidding the underlying value for Body.//Makes methods ins SkillHttpClient virtual so they can be mocked in tests.//Updated BotFrameworkClient to use a deepclone of the activity rather than try/catch/finally to simply code and make sure we don't risk altering the original activity while the async request is being executed.//Improved test coverage for BotFrameworkClient and SkillHttpClient.////* Updated Skill test projects to match samples.////* Deleted composer testing project////* Update botbuilder-dotnet-sign.yml for Azure Pipelines////Make Nightly build have 4-digit year////* Update CODEOWNERS (#4237)////* Streamline codeowners////* Add Connector.Authentication code owners////* Assign bf-dialogs to Microsoft.Bot.Builder.Dialogs////* additional updates to codeowners////* Refine ActivityFactory (#4210)////* refine activityFactory////* small property fixc////* Refactor AdaptiveExpressions method GetStandardFunctions() (#4222)////* init////* init////* update////* add copyright////* remove builtin alias////* fix error////* fix error////* remove unused using////* remove unused code////* add comments////* fix comments////* fix small access modifier////* add missing document////* fix typo////* Clm/fix nuget versions in adapaters (#4242)////* Fixes #4241////* Update ReleasePackageVersion to pickup version numbers////* Updated checma files to point to the new friendly https://schemas.botframework.com/schemas/component/v1.0/component.schema URL (#4243)////* Add code owners for /**/*.schema (#4249)////* rework after refactor builtin functions////* rework after refactor builtin functions////Co-authored-by: Carlos Castro <ccastro@microsoft.com>//Co-authored-by: Tom Laird-McConnell <tomlm@microsoft.com>//Co-authored-by: Carlos Castro <carlosscastro@users.noreply.github.com>//Co-authored-by: Eric Dahlvang <v-eridah@microsoft.com>//Co-authored-by: BruceHaley <v-bruhal@microsoft.com>//Co-authored-by: Phil Haack <haacked@gmail.com>//Co-authored-by: Lu Han <32191031+luhan2017@users.noreply.github.com>//Co-authored-by: Hongyang Du (hond) <hond@microsoft.com>//Co-authored-by: Gabo Gilabert <gabog@users.noreply.github.com>//Co-authored-by: Michael Richardson <40401643+mdrichardson@users.noreply.github.com>//Co-authored-by: Chris McConnell <chrimc@microsoft.com>//Co-authored-by: xieofxie <xieofxie@126.com>//Co-authored-by: Monica Rivera <44449640+mrivera-ms@users.noreply.github.com>//Co-authored-by: Hongyang Du <1990512dhy@163.com>//Co-authored-by: Fei Chen <feich@microsoft.com>//Co-authored-by: Fei Chen <43032123+feich-ms@users.noreply.github.com>//Co-authored-by: Jonathan Fingold <jonathan.m.fingold@gmail.com>//Co-authored-by: Qi Kang <qika@microsoft.com>//Co-authored-by: Gary Pretty <gary@garypretty.co.uk>//Co-authored-by: Chris Mullins <cmullins@gmail.com>//Co-authored-by: Josh <50158775+Virtual-Josh@users.noreply.github.com>//Co-authored-by: Steven Gum <14935595+stevengum@users.noreply.github.com>//Co-authored-by: vipeketi <58211229+vipeketi@users.noreply.github.com>//Co-authored-by: Cecilia Avila <44245136+ceciliaavila@users.noreply.github.com>//Co-authored-by: Chris Mullins <cleemullins@users.noreply.github.com>//Co-authored-by: Denise Scollo <dens.scollo@gmail.com>//Co-authored-by: Cecilia Avila <cecilia.avila@southworks.com>//Co-authored-by: Kyle Delaney <kyled@aditiconsulting.com>//Co-authored-by: Eric Dahlvang <ericdahlvang@outlook.com>//Co-authored-by: Qi Kang <kangqidev@gmail.com>//Co-authored-by: Gabo Gilabert <ggilaber@microsoft.com>//Co-authored-by: Vishwac Sena Kannan <vishwack@hotmail.com>//Co-authored-by: Vishwac Sena Kannan <vishwacsenakannan@MININT-KG5GAD9.fareast.corp.microsoft.com>//Co-authored-by: johnataylor <johtaylo@microsoft.com>//Co-authored-by: Vishwac Sena Kannan <vishwacsenakannan@MININT-G8HVI76.redmond.corp.microsoft.com>//Co-authored-by: Eric Dahlvang <EricDahlvang@gmail.com>",https://github.com/microsoft/botbuilder-dotnet/commit/9825df042ad28440663130cd9e2e8b2a3685a501,117021670,microsoft/botbuilder-dotnet,False,False,"['#4211', '#3923', '#3924', '#3921', '#3929', '#3948', '#3950', '#3944', '#3912', '#3946', '#3951', '#3966', '#3967', '#3949', '#3983', '#3999', '#3934', '#3994', '#3992', '#3932', '#4002', '#3991', '#3987', '#3988', '#4000', '#4015', '#4021', '#4012', '#4024', '#4026', '#3898', '#4017', '#4031', '#4061', '#4067', '#4046', '#3760', '#4074', '#4078', '#4110', '#4082', '#4115', '#4107', '#4056', '#4032', '#3923', '#3964', '#3966', '#3978', '#3986', '#4000', '#4011', '#3960', '#3935', '#4125', '#4130', '#4105', '#4132', '#4123', '#4128', '#4126', '#4138', '#4159', '#4160', '#4', '#4163', '#4', '#4167', '#4141', '#3960', '#3935', '#4170', '#4168', '#4181', '#4136', '#4083', '#4150', '#4190', '#4127', '#4176', '#4134', '#4196', '#4135', '#4151', '#4177', '#4189', '#4178', '#4195', '#3813', '#4202', '#4183', '#4147', '#4162', '#4171', '#4137', '#4214', '#4145', '#4075', '#4215', '#4229', '#4224', '#4231', '#4235', '#4232', '#4236', '#4237', '#4210', '#4222', '#4242', '#4241', '#4243', '#4249']",5
9,5d082ffe67c9714472dcc1548c6b5b7b60780d2c,"Helix Testing (#6992)//Use the Helix testing orchestration framework to run our Terminal LocalTests and Console Host UIA tests.////## References//#### Creates the following new issues://- #7281 - re-enable local tests that were disabled to turn on Helix//- #7282 - re-enable UIA tests that were disabled to turn on Helix//- #7286 - investigate and implement appropriate compromise solution to how Skipped is handled by MUX Helix scripts////#### Consumes from://- #7164 - The update to TAEF includes wttlog.dll. The WTT logs are what MUX's Helix scripts use to track the run state, convert to XUnit format, and notify both Helix and AzDO of what's going on.////#### Produces for://- #671 - Making Terminal UIA tests is now possible//- #6963 - MUX's Helix scripts are already ready to capture PGO data on the Helix machines as certain tests run. Presuming we can author some reasonable scenarios, turning on the Helix environment gets us a good way toward automated PGO.////#### Related://- #4490 - We lost the AzDO integration of our test data when I moved from the TAEF/VSTest adapter directly back to TE. Thanks to the WTTLog + Helix conversion scripts to XUnit + new upload phase, we have it back!////## PR Checklist//* [x] Closes #3838//* [x] I work here.//* [x] Literally adds tests.//* [ ] Should I update a testing doc in this repo?//* [x] Am core contributor. Hear me roar.//* [ ] Correct spell-checking the right way before merge.////## Detailed Description of the Pull Request / Additional comments//We have had two classes of tests that don't work in our usual build-machine testing environment://1. Tests that require interactive UI automation or input injection (a.k.a. require a logged in user)//2. Tests that require the entire Windows Terminal to stand up (because our Xaml Islands dependency requires 1903 or later and the Windows Server instance for the build is based on 1809.)////The Helix testing environment solves both of these and is brought to us by our friends over in https://github.com/microsoft/microsoft-ui-xaml.////This PR takes a large portion of scripts and pipeline configuration steps from the Microsoft-UI-XAML repository and adjusts them for Terminal needs.//You can see the source of most of the files in either https://github.com/microsoft/microsoft-ui-xaml/tree/master/build/Helix or https://github.com/microsoft/microsoft-ui-xaml/tree/master/build/AzurePipelinesTemplates////Some of the modifications in the files include (but are not limited to) reasons like://- Our test binaries are named differently than MUX's test binaries//- We don't need certain types of testing that MUX does.//- We use C++ and C# tests while MUX was using only C# tests (so the naming pattern and some of the parsing of those names is different e.g. :: separators in C++ and . separators in C#)//- Our pipeline phases work a bit differently than MUX and/or we need significantly fewer pieces to the testing matrix (like we don't test a wide variety of OS versions).////The build now runs in a few stages://1. The usual build and run of unit tests/feature tests, packaging verification, and whatnot. This phase now also picks up and packs anything required for running tests in Helix into an artifact. (It also unifies the artifact name between the things Helix needs and the existing build outputs into the single `drop` artifact to make life a little easier.)//2. The Helix preparation build runs that picks up those artifacts, generates all the scripts required for Helix to understand the test modules/functions from our existing TAEF tests, packs it all up, and queues it on the Helix pool.//3. Helix generates a VM for our testing environment and runs all the TAEF tests that require it. The orchestrator at helix.dot.net watches over this and tracks the success/fail and progress of each module and function. The scripts from our MUX friends handle installing dependencies, making the system quiet for better reliability, detecting flaky tests and rerunning them, and coordinating all the log uploads (including for the subruns of tests that are re-run.)//4. A final build phase is run to look through the results with the Helix API and clean up the marking of tests that are flaky, link all the screenshots and console output logs into the AzDO tests panel, and other such niceities.////We are set to run Helix tests on the Feature test policy of only x64 for now. ////Additionally, because the set up of the Helix VMs takes so long, we are *NOT* running these in PR trigger right now as I believe we all very much value our 15ish minute PR turnaround (and the VM takes another 15 minutes to just get going for whatever reason.) For now, they will only run as a rolling build on master after PRs are merged. We should still know when there's an issue within about an hour of something merging and multiple PRs merging fast will be done on the rolling build as a batch run (not one per).////In addition to setting up the entire Helix testing pipeline for the tests that require it, I've preserved our classic way of running unit and feature tests (that don't require an elaborate environment) directly on the build machines. But with one bonus feature... They now use some of the scripts from MUX to transform their log data and report it to AzDO so it shows up beautifully in the build report. (We used to have this before I removed the MStest/VStest wrapper for performance reasons, but now we can have reporting AND performance!) See https://dev.azure.com/ms/terminal/_build/results?buildId=101654&view=ms.vss-test-web.build-test-results-tab for an example. ////I explored running all of the tests on Helix but.... the Helix setup time is long and the resources are more expensive. I felt it was better to preserve the ""quick signal"" by continuing to run these directly on the build machine (and skipping the more expensive/slow Helix setup if they fail.) It also works well with the split between PR builds not running Helix and the rolling build running Helix. PR builds will get a good chunk of tests for a quick turn around and the rolling build will finish the more thorough job a bit more slowly.////## Validation Steps Performed//- [x] Ran the updated pipelines with Pull Request configuration ensuring that Helix tests don't run in the usual CI//- [x] Ran with simulation of the rolling build to ensure that the tests now running in Helix will pass. All failures marked for follow on in reference issues.",https://github.com/microsoft/terminal/commit/5d082ffe67c9714472dcc1548c6b5b7b60780d2c,100060912,microsoft/terminal,False,False,"['#6992', '#7281', '#7282', '#7286', '#7164', '#671', '#6963', '#4490', '#3838']",6
10,a19f787657c2f0e85bc93f5b078cc3481774ba01,"M2 Integration (#132)//* botbuilder-core refactor with unit tests////* implementation of botbuilder-core-extensions////* updated unit tests////* Added conversation state unit tests////* Added support for middleware as an object////* Changed conversation state middleware to be a class////* Added UserState middleware and tests////* Added test for better code coverage.////* Added browser storage tests////* Added more unit tests////* Broke out separate BotState class////* Renamed TurnContext back to BotContext////* Added new BotStateSet class////* Added additional test to middlewareSet////* 100% code coverage on BotState, ConversationState, and UserState classes.////* 100% code coverage for BotStateSet////* updated test adapter to better support updateActivity() and deleteActivity()////* changed BotContext.sendActivities() to take a variable number of params.////* 100% code coverage for TestAdapter////* 100% code coverage on CardFactory////* 100% code coverage for MessageFactory////* Updated BotAdapter.deleteActivity to take a conversation reference instead of an id.////* 100% code coverage for BotFrameworkAdapter////* Implemented new style ConsoleAdapter////* updated botbuilder-core unit tests////* updated botbuilder-ai to use latest middleware pattern////* Updated UserState and ConversationState to add a property accessor to context object////* Updated BotContext to not be a generic////* new qna maker and file storage impl////* combined docs for botbuilder botbuilder-core botbuilder-core-extensions////* updated docs////* updated docs////* updated docs////* updated docs////* update docs////* update docs////* updated docs////* updated docs////* update docs////* update docs////* update docs////* updated docs////* updated docs////* updated docs////* update docs////* added BatchOutput class////* added BatchOutput middleware////* Updated botbuilder-azure to m2////* Updated botbuilder-choices to m2////* updated botbuilder-dialogs to m2////* updated docs////* updated echobot example////* updated echobot-es6 sample////* updated alarmbot sample////* fixed issue with recognizers-text dependency////* fixed broken recognizer-text refs////* fixed bug in waterfall////* updated alarm bot samples////* Added passing of locale through to recognizers////* botbuilder-prompts////* updated prompts for botbuilder-dialogs////* updated dialogs echobot sample////* updated dialogs alarmbot////* updated dialog samples to use async/await////* updated dialogs prompts sample////* removed un used import////* updated inside-middleware sample for dialogs////* updated echobot-ts sample to use async/await////* Updated alarmbot-es6 sample////* updated alarmbot-ts to use async/await////* cleaned up merge junk////* Added echobot-console-ts sample////* Updated console sample////* Added context to onSendActivity(), onUpdateActivity(), and onDeleteActivity()////* updated version num////* Fixed issue with connectors credential provider////* Added ability to pass a BotContext instnace into the constructor of anotehr BotContext////* Updated code coverage tests////* Tweak to simplify token refresh code////* removed inbound endOfConversation check as it wasn't working////* feat(DevTools): Improvements to Lerna and Developer Workflow. (#113)////Added npm postinstall scripts to automate lerna bootstrapping and make lerna transparent to the developer.//Added various npm run scripts to enable a single command to link botbuilder to the global node_modules folder to make it easier for developers to add their local cloned repo to a project.////* package files////* Added logic to return last call to end() as a DialogResult////* Added dialog based Control creation and sample////* Added support using symbols as keys off context cache////* sample update////* Updated DialogContext.endAll() to be fluent.////* updated BotState classes to use Symbols for cache keys////* Updated BatchOutput ot use Symbol based cache keys////* ListControl sample////* Updated sample////* Fixed build break////* fixed broken dialogs test////* Cleaned up control concept////- Created separate CompositControl and Control concepts.//- Both types of controls now automatically suport being used outside of Dialogs.//- Control usage is more consistant regardless of mode.//- Made state passed into DialogSet.createContext() more opaque.////* Stevenic/invoke (#122)////* Added support for 'invoke'////* added logic to cleanup saved invokeReponse entiries from map",https://github.com/microsoft/botbuilder-js/commit/a19f787657c2f0e85bc93f5b078cc3481774ba01,117021493,microsoft/botbuilder-js,False,False,"['#132', '#113', '#122']",7
12,f516a03c01b82fcc45fec792b5dfd792f9e06a83,Merge pull request #317 from jterry75/simplify_request_return//Simplify the bridge request/return pattern,https://github.com/microsoft/opengcs/commit/f516a03c01b82fcc45fec792b5dfd792f9e06a83,95602435,microsoft/opengcs,False,False,['#317'],8
32,9f4c2cffd08c102107992cd01c12c4a53475baf6,"Merge branch 'mlxsw-Un-offload-FDB-on-NVE-detach-attach'//Ido Schimmel says://====================/mlxsw: Un/offload FDB on NVE detach/attach//Petr says://When a VXLAN device is attached to a bridge of a driver capable of/offloading such, or upped, the FDB entries already present at the device/need to be offloaded. Similarly when an offloaded VXLAN device ceases/being interesting (it is downed, or detached, or a front-panel port/netdevice is detached from the bridge that the VXLAN device is attached/to), any offloaded FDB entries need to be unoffloaded and unmarked. This/attach / detach processing is implemented in this patchset.//In patch #1, a code pattern is extracted into a named function for/easier reuse.//In patch #2, vxlan_fdb_replay() is added to send/SWITCHDEV_VXLAN_FDB_ADD_TO_DEVICE for each FDB entry with a given VNI./The intention is that the offloading driver will interpret these events/like any other and thus offload the FDB entries that existed prior to/VXLAN attach.//In patches #3 and #4, the functions vxlan_fdb_clear_offload() resp./br_fdb_clear_offload() are added. These clear the offloaded flag at/matching FDB entries.//In patches #5-#9, we introduce FID-type-specific and NVE-type-specific/ops necessary to properly abstract invocations of the replay/clear/functions.//Finally patch #10 implements the FDB management.//In patch #11, the mlxsw-specific test case is extended to check that the/management of offload marks under the newly-supported situations is/correct. Patch #12, from Ido, exercises the new code paths in actual/functional test.//v2:/- Patch #1:/    - Modify vxlan_fdb_switchdev_notifier_info() to initialize the/      structure through a passed-in pointer argument, instead of returning/      it as a value./- Patch #2:/    - Adapt to API change in vxlan_fdb_switchdev_notifier_info()/====================//Signed-off-by: David S. Miller <davem@davemloft.net>",https://github.com/microsoft/WSL2-Linux-Kernel/commit/9f4c2cffd08c102107992cd01c12c4a53475baf6,187922067,microsoft/WSL2-Linux-Kernel,False,False,"['#1', '#2', '#3', '#4', '#5', '#9', '#10', '#11', '#12', '#1', '#2']",9
38,8a890ddfd749a2f46609f8e234f192780bb41356,"Sync ORTModule branch with master and fix tests (#6526)//* Deprecate Python global configuration functions [Part 1] (#5923)////Enable options to be set via execution provider (EP)-specific options and log deprecation warning from current global configuration functions.////* remove dnnl_dll_path from post build copy (#6142)////* Model Fusion For Bart (#6105)////Fusion fix for Bart models////* Unify IExecutionProvider and IExecutionProviderFactory interfaces (#6108)////* Remove Provider_IExecutionProvider and make the internal IExecutionProvider usable by shared providers//* Change Provider_IExecutionProviderFactory to be the core version.////* Enable running the mnist_training sample without cuda (#6085)////Signed-off-by: George Nash <george.nash@intel.com>////* nnapi add min max support (#6117)////* Fix CUDA test hang: (#6138)////- Make condition check in `CUDAAllocatorTest` to ensure CUDA device is present.////* Fix TensorRT kernel conflict issue for subgraphs of control flow operators (#6115)////* add static subgraph kernel index////* change kernel naming to avoid conflicts////* Add gradient registration for Abs. (#6139)////* Partition initial optimizer state for Zero-1 (#6093)////* Initial changes////* Working changes////* Working changes////* Cleanup////* fix windows CI////* Review comments////* review comments////* Fix edge case in BFCArena where allocation failures could lead to an infinite loop. (#6145)////#4656////* Revert ""work around of the build break in mac (#6069)"" (#6150)////This reverts commit 3cae28699bed5de1fcaadb219fa69bae0fc3cee8.////* Fix clean_docker_image_cache.py detection of image pushes. (#6151)////Fix clean_docker_image_cache.py detection of image pushes. They were being ignored because the expected HTTP status code was wrong. For pushes, it's 201 instead of 200.////* MLAS: add NEON version of int8 depthwise convolution (#6152)////* Using a map of of ops to stages as input of partition function. (#5940)////* New partition algorithm running before AD////* Convert cut_group_info into device map. Work in progress -- works for  bert-tiny with pp=2////* Removing code for partition of bwd graphs////* Remove old code////* Adding some verification code////* Handle Shared Initializer////* Renaming rank with stage////* Added first unit test////* new test////* redundant check////* undo change in bert////* Moved cut-based partition to testing utils file////Co-authored-by: xzhu1900//Co-authored-by: wschin////* New conversion function and tests////* minor////* remove test that is not needed2////* improve GetDeviceAssignment and PR comments////* minor changes////* PR comments////* improving documentation and variable naming////* add documentation////* Variable naming and docs////* more doc improvements////* more doc improvements////* missing static cast////* Fix test file for windows////* Fix test file for windows////* Fix test file for windows////* stage id is not the same as rank id////* PR comments////* PR comments////* More comments////* More comments////* Minor fix to satisfy c++14 (#6162)////* Deprecating Horovod and refactored Adasum computations (#5468)////deprecated horovod submodule//refactored adasum logic to be ort-native//added tests for native kernel and e2e tests////* Update TensorRT-ExecutionProvider.md (#6161)////* Bugfix for topk cuda kernel (#6164)////* fix the issue that std::numeric_limits cannot handle half type////* adding a test////Co-authored-by: Du Li <duli@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>////* Revert ""Fuse MatMulIntegerToFloat only when scales are scalar (#6008)"" (#6169)////This reverts commit f2dcba7afe0d42ebdaaef0c6cdf913a1156c9e98.////* Remove ignored build warnings for pybind on Mac (#6165)////* save_checkpoint, load_checkpoint and aggregate_checkpoints (#6136)////* save_checkpoint and load_checkpoint implementations////* checkpoint aggregation logic////* unit tests for save_checkpoint, load_checkpoint and aggregate_checkpoints////* Don't try to bind unused inputs in the Training frontend (#6166)////* Update documentation for contributing a PR and add deprecation notices for PyOp and ORT server. (#6172)////* aggregate model states only for the case when mixed precision was true (#6176)////* [NNAPI EP] Enable per-channel quantization for QlinearConv  (#6155)////* Enable qlinearconv per-channel quantization////* Fix the android CI test failure////* Add Android Version Check for Per-Channel Quant////* Address PR comments////* Fix some minor issues////* Add verification of per-channel zero points////* Make the error tolerance configurable////* Fix typo in BERT pretraining script (#6175)////A misplaced `}` meant that the `'enable_adasum'` option was interpreted incorrectly, causing the test to fail.////* Update get_docker_image.py to enable use without image cache container registry. (#6177)////Update get_docker_image.py to enable use without image cache container registry.////* Helper for compiling EP to generate deterministic unique ids for use in MetaDef names (#6156)////* Create a helper for generating unique ids that can be used by an EP that creates compiled nodes and needs ids to be deterministic for a model when used in multiple sessions.////Added to IExecutionProvider as this can potentially be used by all compiling EPs and is more robust than a simplistic counter (although EP implementer is free to choose either approach).////* Restructure the helper so it can be called across the EP bridge.//Add ability to call id generation helper from EP bridge//  - convert DNNL EP to use helper to validate//Address issue where a new Model may be loaded into the same address as a previous one.//  - hash the bytes in the Graph instance (1728 bytes currently) to use as the key to the full hash for the model//Add lock around id generation to ensure no issues if multiple sessions partitions graphs at exactly the same time.//  - Extremely unlikely but would be hard to debug and the locking cost is not an issue as it's only incurred during graph partitioning and not execution.////* Backend APIs for checkpointing (#5803)////* Add backend API GetOptimizerState and GetModelState////* add GetPartitionInfoMap////* Android coverage dashboard (#6163)////* Write the report to a file.////* Post code coverage to the Dashboard database.////* Add usage details of unified MCR container image (#6182)////Going forward, a single unifed docker image will be published in//MCR. The hardware accelerator target choice will have to be made//in the application using OpenVINO EP's runtime config options.////* improve perf for softmax (#6128)////* improve perf for both gathergrad and softmax////* revert the change in gathergrad and will be done in another PR.////* address comments from code review.////* Tune fast Gelu to use exp(x) instead of tanh(x) on Rocm platform (#6174)////* tune fast gelu to use exp(x) instead of tanh(x) on rocm////* update to use expression 2/(1+exp(-2x))-1 for stability////* Add Status.csv to EP Perf Tool (#6167)////* merge master, keep postprocess status commit////* download float16.py everytime////* removing hardcoded values////* Lochi/quantization tool for trt (#6103)////* Initial implementation of generating calibration dynamic range table////* Initialize validation support for Quantization////* Initialize validation support for Quantization (cont.)////* Improve validation support for Quantization////* Improve validation support for Quantization////* Rewrite/Refine for calibration and validation////* Rewrite/Refine for calibration and validation (cont.)////* Refine code////* Refine code////* Add data reader for BERT////* Add flatbuffers to serialize calibration table////* Refine code and add BERT evaluation////* Refine the code////* minor modification////* Add preprocess/postprocess of vision team yolov3 and refine the code////* Update annotation////* Make bbox cooridates more accurate////* Fix bug////* Add support of batch processing////* Batch processing for model zoo yolov3////* Add batch inference for evaluation////* Refine the code////* Add README////* Add comments////* Refine the code for PR////* Remove batch support checking in data_reader and refine the code////* Refine the code for PR////* Refine the code for PR review////Co-authored-by: Olivia Jain <oljain@microsoft.com>////* Implement ScatterND for CUDA EP (#6184)////* Condition fix in Resize operator (#6193)////* Clean up checkpoint tests to use the new checkpoint functions (#6188)////* add deprecation warning for old checkpoint functions////* update all the distributed checkpoint tests to use new checkpoint functions////* Implement comparing outputs that are sequence of maps of strings to floats (#6180)////* Implement conversion from ortvalue to Itensor for string tensors and comparing sequence of maps of strings to floats////* PR comments////* Dockerfile to build onnxruntime with ROCm 4.0////* Add ability to skip GPU tests based on GPU adapter name (#6198)////* Implement conversion from ortvalue to Itensor for string tensors and comparing sequence of maps of strings to floats////* PR comments////* Add ability to skip gpu tests according to adapter description////* spacing////* spacing////* spacing////* Openvino ep 2021.2 (#6196)////* Enabling fasterrcnn variant and vehicle detector////* changes for 2021_2 branch////* yolov3_pytorch commit////* fixed braces in basic_backend.cc////* ci information added////* faster rcnn variant and vehicle detector changes were made in 2021.1 and not in 2021.2////* some changes to support unit tests////* disable some tests which are failing////* fix myriad tests for vehicle detector////* Did some cleanup//*cleaned up comments//*Disabled Add_Broadcast_0x1 and Add_Broadcast_1x0//tests on MYRIAD_FP16 backend due to a bug//*cleaned up capability_2021_2.cc file//*Removed extra conditions which were added//for some validation in backend_utils////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* yolov3 pytorch workaround to ensure that the output names are matched////* gemmoptest fixed on myriad////* Fixed MYRIADX CPP Test Failures////*Expand,GatherND,Range,Round op's//are only supported in model////*where op with float input data//types are not supported and fixed////*Scatter and ScatterElements op's with//negative axis are fixed////*Reshape op with 0 dim value are not//supported and fixed////*Disabled InstanceNorm_2 test on MYRIADX////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* make changes to yolov3 pytorch////* Fixed python unit tests//*Fixed failing python tests on vpu,//GPU and CPU////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* Fixes POW op failures on GPU_FP16////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* Clean up capability_2021_2.cc////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* Updated docx for MultiThreading option//*Added extra info on setting the num_of_threads//option using the API and it's actual usage////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* fixed slice and removed extra prints////* Disabled failing python tests////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* Minor changes added in capabilty_2021_2////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* made changes to slice to avoid failures////* Disabling FP16 support for GPU_FP32//->Inferencing an FP16 model on GPU_FP32//leads to accuracy mismatches. so, we would//rather use GPU_FP16 to infer an FP16 model//on GPU Device////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* Updated docx for Inferencing a FP16 Model////Signed-off-by: MaajidKhan <n.maajidkhan@gmail.com>////* fix for mask rcnn////* Script for installing openvino from source////* Updated with openvino 2021.2 online installation////* code comment fixes//fixed accuracy mismatch for div////* Update OpenvinoEP-ExecutionProvider.md////updated for 2021.2 branch////* Update README.md////updated dockerfile documentation////* Update BUILD.md////build.md update documentation////* permissiong change of install_openvino.sh////* made changes to align with microsoft onnxruntime changes////* Updated with ov 2021.2.200////Co-authored-by: suryasidd <surya.siddharth.pemmaraju@intel.com>//Co-authored-by: sfatimar <sahar.fatima@intel/com>//Co-authored-by: MaajidKhan <n.maajidkhan@gmail.com>//Co-authored-by: mohdansx <mohdx.ansari@intel.com>////* Fix a memory leak in test_inference.cc (#6201)////* Fix a memory leak in test_inference.cc////* Use TArray in AMD element-wise kernels, rather than manually copying memory to device.////* Remove most ROCm-specific element-wise code and reuse CUDA element-wise code.////* Minor change to improve performance for operator Pad. (#5537)////* small improvment for pad////* Support double for operators Log, Reciprocal, Sum (CPU) (#6032)////* Support double for operators Log, Reciprocal, Sum//* remove tesdt erf_double////* Support double for operators Where, LpNormalisation (#6034)////* Support double for operators Relu, Tanh, Sigmoid (#6221)////* Fix ImportError in build.py (#6231)////There is a possible ImportError where build.py can import the wrong 'util' package if there are others present in `sys.path` already////* Removed executor todo that looks dead. (#6234)////* Remove MKLML/openblas/jemalloc build config (#6212)////* Remove python 3.5////* Update the readme file////* Upgrade build.py to assert for python 3.6+////Upgrade build.py to assert for python 3.6+//as python 3.5 cannot build anymore todays master.////* Support MLFloat16 type in Pow opset-12 CUDA kernel (#6233)////* MLAS: handle MlasGemm(M/N/K==0) cases (#6238)////* Support double for operator TopK + fix one bug in TopK implementation for GPU for double (#6220)////* Support double for operator TopK//* add static classes for topk/double//* fix cast issue in topk////* Support double for operator Gemm + fix bug in gemm implementation for cuda, rocm when sizeof(type) != sizeof(float) (#6223)////* Support double for operator Gemm//* fix type size while copying data in gemm operator for GPU//* fix type in gemm implementation for rocm////* Support double for operator ReduceMean, ReduceLogSumExp (#6217)////* Support double for operators ReduceMean, ReduceLogSumExp////* Support double for operator ArgMin (#6222)////* Support double for operator ArgMin//* add test specifically for double//* add new test on pai-excluded-tests.txt////* Update BUILD.md////* Update manylinux docker image to the latest (#6242)////* Fix allocator issue for TensorRT IOBinding (#6240)////* Fix issue: https://github.com/microsoft/onnxruntime/issues/6094////Root cause: we didn't expose the OrtMemoryInfo for TRT, so it will cause issue if user want use IObinding for Tensorrt.////Short term fix, add the OrtMemoryInfo for TRT. Long term should unify the allocator for CUDA and TRT////* Tune BiasGeluGradDx kernel in approximation mode to avoid tanh(...) on Rocm (#6239)////* bias gelu grad use exp(...) instead////* update cuda to rocm////* missing semicolon////* comment////* remove dockerfile////* missing factor of two////* Refactor EP Perf Tool  (#6202)////* merge master, keep postprocess status commit////* download float16.py everytime////* using variables to reference eps////* adding ACL EP to ep perf tool////* accuracy with absolute tolerance configurable////* add acl to dict + remove commented line////* Documentation for distributed CI tests pipeline (#6140)////* Remove a debug log in provider_test_utils.cc (#6200)////* Add the Concat Slice Elimination transform, fix constant_folding transform (#5457)////* Add concat slice transform + test////* Cosmetic improvements in concat slice transform////* Remove unrelated file, fix comment, fix constant folding bug////* Add test onnx graph////* fix windows build////* Review comments////* review comment////Co-authored-by: Aishwarya <aibhanda@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>////* Add MakeStringLite which uses current locale, update some MakeString call sites to use it instead. (#6252)////* Add MakeStringLite which uses current locale, update macros to use that to generate messages.////* Convert calls to MakeStringLite().////* Liqun/speech model loop to scan (#6070)////Provide a tool to convert Loop to Scan for Nuphar performance//Fix Nuphar CI pipeline failures.////Co-authored-by: liqun <liqun@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>////* model parallel refinement (#6244)////* Megatron Transformation as a seperate step////* remove useless header////* clang formating////* Re-Structure megatron transformer for subsquent changes////* fix  comments////* Allow querying a GraphProto's doc_string as part of ModelMetadata (#6248)////* Fix Linux/Mac error message on input type mismatch (#6256)////* add bfloat16 to gathergrad type constrains (#6267)////Co-authored-by: Cheng Tang <chenta@microsoft.com>////* Fix VS 2017 build break (#6276)////* Deprecate Python global configuration functions [Part 2] (#6171)////Update Python API to allow more flexibility for setting providers and provider options.////The providers argument (InferenceSession/TrainingSession constructors, InferenceSession.set_providers()) now also accepts a tuple of (name, options dict).//Fix get_available_providers() API (and the corresponding function in the C API) to return the providers in default priority order. Now it can be used as a starting point for the providers argument and maintain the default priority order.//Convert some usages of the deprecated global configuration functions to use EP-specific options instead.////Update some EP-specific option parsing to fail on unknown options.////Other clean up.////* Add script to preprocess python documentation before publishing (#6129)////* add script to preprocessing python documentation before publishing////* rename past to past_key_values for GPT-2 (#6269)////rename past to past_key_values for transformers 4.*////* Rename MakeString and ParseString functions. (#6272)////Rename MakeString to MakeStringWithClassicLocale, MakeStringLite to MakeString, *ParseString to *ParseStringWithClassicLocale.//Add missing pass-through versions of MakeStringWithClassicLocale for string types.////* Increase timeout for Linux GPU CUDA11 build. (#6280)////* Add helper to compare model with different precision (#6270)////* add parity_check_helper.py////* add real example////* remove lines////* Fix Min/Max CPU kernels for float16 type (#6205)////* fix data_ptr assertion error for past_sequence_length=0 in GPT-2 (#6284)//// fix io binding crash for past_sequence_length=0////* A list of changes in transformers tool (#6224)////* longformer fp16 e2e////* add fp16/fp32 parity check helper file////* excludes nodes with subgraph in profiling////* use onnxconverter_common to do fp32->fp16////* add version check for onnxconverter_common////* remove helper file////* add pkg installation on notebooks and script////* Workaround for static_cast<double>(half)////* Add workaround to remove ROCm-specific binary-elementwise files.////* Update nuget build (#6297)////1. Update the ProtoSrc path. The old one is not used anymore.//2. Regenerate OnnxMl.cs//3. Delete some unused code in tools/ci_build/build.py//4. Avoid set intra_op_param.thread_pool_size in ModelTests in OpenMP build.//5. Fix a typo in the C API pipeline.////* Enable ONNX backend test of SequenceProto input/output  (#6043)////* assert sequence tensor and remove skips////* update testdata json////* use ONNX 1.8 in cgmanifest.json////* use previous commit to workaround////* update ONNX commit ID in docker////* skip test_maxpool_2d_dilations test for now////* update function name////* add --sequence_lengths option (#6285)////* more dtype for Equal CUDA kernel (#6288)////Co-authored-by: Vincent Wang <weicwang@microsoft.com>////* Force reinstall onnx python package on Windows (#6309)////* update transformers required package versions (#6315)////* Remove abs in LpPool (#6303)////* Support 1D input for Conv + Mul/Add fusion optimizer with test (#6295)////* Support 1D input (N C H) for Conv + Mul/Add fusion optimizer with test cases and test models.////* Add longformer to  python package (#6314)////* add longformer to python package//* move test related script and data to a new folder////* Avoid false sharing on thread pool data structures (#6298)////Description: This change adds alignment and padding to avoid false sharing on fields in the thread pool. It also adds a new microbenchmark to profile thread-pool performance over short loops.////Motivation and Context//MobileNet on a 2*12-core system showed a performance gap between the ORT thread pool and OpenMP. One cause appeared to be false sharing on fields in the thread pool: ThreadPoolParallelSection::tasks_finished (which the main thread spins on waiting for workers to complete a loop), and the RunQueue::front_ and back_ fields (used respectively by the worker thread and the main thread).////The additional micro-benchmark BM_ThreadPoolSimpleParallelFor tests performance of loops of different sizes at different thread counts. The results below are on a machine with 2*14-core processors (E5-2690 v4) running with 1, 14, 15, and 28 threads. For each test, the microbenchmark has N threads run a loop with N iterations; hence a perfect result is for the time taken to be constant as additional threads are added (although we will also see power management effects helping at very low thread counts). The loop durations (100000, 10000, 1000) correspond roughly to 200us, 20us, and 2us on this machine.////Before change://BM_ThreadPoolSimpleParallelFor/1/1/100000/real_time 17153 us 17154 us 32//BM_ThreadPoolSimpleParallelFor/14/14/100000/real_time 22553 us 22553 us 30//BM_ThreadPoolSimpleParallelFor/15/15/100000/real_time 21521 us 21521 us 29//BM_ThreadPoolSimpleParallelFor/28/28/100000/real_time 24111 us 24111 us 24//BM_ThreadPoolSimpleParallelFor/1/1/10000/real_time 1719 us 1719 us 407//BM_ThreadPoolSimpleParallelFor/14/14/10000/real_time 3409 us 3409 us 200//BM_ThreadPoolSimpleParallelFor/15/15/10000/real_time 3541 us 3541 us 201//BM_ThreadPoolSimpleParallelFor/28/28/10000/real_time 4576 us 4576 us 151//BM_ThreadPoolSimpleParallelFor/1/1/1000/real_time 174 us 174 us 4017//BM_ThreadPoolSimpleParallelFor/14/14/1000/real_time 1586 us 1586 us 402//BM_ThreadPoolSimpleParallelFor/15/15/1000/real_time 1586 us 1586 us 397//BM_ThreadPoolSimpleParallelFor/28/28/1000/real_time 2864 us 2864 us 232////After change://BM_ThreadPoolSimpleParallelFor/1/1/100000/real_time 17160 us 17160 us 33//BM_ThreadPoolSimpleParallelFor/14/14/100000/real_time 20989 us 20989 us 31//BM_ThreadPoolSimpleParallelFor/15/15/100000/real_time 22286 us 22286 us 31//BM_ThreadPoolSimpleParallelFor/28/28/100000/real_time 24631 us 24631 us 25//BM_ThreadPoolSimpleParallelFor/1/1/10000/real_time 1718 us 1718 us 407//BM_ThreadPoolSimpleParallelFor/14/14/10000/real_time 2868 us 2868 us 242//BM_ThreadPoolSimpleParallelFor/15/15/10000/real_time 2907 us 2907 us 240//BM_ThreadPoolSimpleParallelFor/28/28/10000/real_time 3872 us 3872 us 186//BM_ThreadPoolSimpleParallelFor/1/1/1000/real_time 175 us 175 us 3938//BM_ThreadPoolSimpleParallelFor/14/14/1000/real_time 933 us 933 us 659//BM_ThreadPoolSimpleParallelFor/15/15/1000/real_time 912 us 912 us 591//BM_ThreadPoolSimpleParallelFor/28/28/1000/real_time 1976 us 1976 us 317////* fix opset imports for function body  (#6287)////* fix function opsets////* add tests and update onnx////* changes per review comments////* add comments////* plus updates////* build fix////* Remove false positive prefast warning from threadpool (#6324)////* Java: add Semmle to Java publishing pipelines (#6326)////Add Semmle to Java API pipeline//  Add security results publishing and add Java GPU.////* Quantization support for split operator with its NHWC support (#6107)////* Make split working for quantization.////* NHWC transformer support for split operator////* Refactor some according to Feedback. Will add test cases soon.////* Fix build error on windows.////* Add test case for split op on uint8_t support////* Add nhwc_transformer_test for split uint8_t support////* Some change according to PR feedbacks.////* Liqun/enable pipeline parallel test (#6331)////enable pipeline parallel test//Co-authored-by: liqun <liqun@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>////* Use onnxruntime_USE_FULL_PROTOBUF=OFF for the cuda execution provider (#6340)////This removes a special case of the cuda EP.////* MLAS: add fallback implementation for quantized GEMM (#6335)////Add a non-vectorized version of the kernel used for the quantized version of MlasGemm.////* Delete float16.py (#6336)////No longer needed. Also doesn't pass policheck.////* Enable add + softmax fusion for Rocm platform (#6259)////* add bias softmax; tests appear to pass////* check fusion occurs for rocm as well////* check for rocm provider compatible as well////* build for cpu scenario as well////* try again; broader cope////* proper scope on kGpuExecutionProvider////* been editing wrong file////* remove commented #include lines////* try again due to mac os ci error////* try again////* test fusion both cuda and rocm to avoid mac ci error////* add external data support to tensor proto utils (#6257)////* update unpack tensor utilities to support loading external data////* more updates////* fix test////* fix nuphar build////* minor build fix////* add tests////* fix Android CI////* fix warning////* fix DML build failure and some warnings////* more updates////* more updates////* plus few updates////* plus some refactoring////* changes per review////* plus some change////* remove temp code////* plus updates to safeint usage////* build fix////* fix for safeint////* changed wording. (#6337)////* Remove OpSchema dummy definition. Only needed for Function now, and we can just exclude the method in Function (#6321)////* remove gemmlowp submodule (#6341)////* [NNAPI] Add pow support (#6310)////* Add support for running Android emulator from build.py on Windows. (#6317)////* fix the pipeline failure (#6346)////* Train BERT Using BFloat16 on A100 (#6090)////* traing bert using bf16////* Adam support bf16////* bugfix////* add fusedmatmul support////* fix after merge from master.////* bugfix////* bugfix after merge from master////* fast reduction for bf16.////* resolve comments////* fix win build////* bugfix////* change header file.////Co-authored-by: Vincent Wang <weicwang@microsoft.com>////* Fix DerefNullPtr issues raised by SDLNativeRules. (#6348)////* update quantize to support basic optimization and e2e example for image classification (#6313)////update the resnet50-v1 to standard one from onnx zoo.//add an example for mobilenet//run basic optimization before quantization//fix a bug in Clip////* Enable graph save for orttrainer (#6333)////* Enable graph save for orttrainer////* Fix CI////* Update orttraining/orttraining/python/training/orttrainer_options.py////* Update orttraining/orttraining/python/training/orttrainer_options.py////* Update orttraining/orttraining/python/training/orttrainer_options.py////* Update orttraining/orttraining/python/training/orttrainer_options.py////* Update orttraining/orttraining/python/training/orttrainer_options.py////Co-authored-by: Thiago Crepaldi <thiago.crepaldi@microsoft.com>////* Add PREfast to python packaging pipeline (#6343)////* Add PREfast to python packaging pipeline////* fix longformer benchmark io_binding output_buffers (#6345)////* fix longformer benchmark io_binding output_buffers////* format////* import benchmark_helper from parent directory.////* Use readelf for minimal build binary size checks. (#6338)////* Use readelf for minimal build binary size checks.//The on-disk size grows in 4KB chunks which makes it hard to see how much growth an individual checkin causes.//Only downside is that the sum of the sections is larger than the on-disk size (assumably things get packed smaller on disk and some of the section alignment constraints can be ignored)////* Remove unused function////* Java: Set C language warnings to W4 and adjust JNI code (#6347)////Set /W3 for C language and fix up JNI warnings.////* Pipeline Parallel Experimental Python API (#5815)////* Add create session to WinML telemetry to track WinML Usage (#6356)////* Fix one more SDL warning (#6359)////* fix -Wdangling-gsl (#6357)////* Add python example of TensorRT INT8 inference on ResNet model (#6255)////* add trt int8 example on resnet model////* Update e2e_tensorrt_resnet_example.py////* remove keras dependency and update class names////* move ImageNetDataReader and ImageClassificationEvaluator to tensorrt resnet example////* simplify e2e_tensorrt_resnet_example.py////* Update preprocessing.py////* merge tensorrt_calibrate////* Update calibrate.py////* Update calibrate.py////* generalize calibrate////* Update calibrate.py////* fix issues////* fix formating////* remove augment_all////* This added telemetry isn't needed (#6363)////* Wezuo/memory analysis (#5658)////* merged alloc_plan////* pass compilation////* Start running, incorrect allocation memory info////* add in comments////* fix a bug of recording pattern too early.////* debugging lifetime////* fix lifetime////* passed mnist////* in process of visualization////* Add code to generate chrome trace for allocations.////* in process of collecting fragmentation////* before rebuild////* passed mnist////* passed bert tiny////* fix the inplace reuse////* fix the exception of weight in pinned memory////* add guards to ensure the tensor is in AllocPlan////* add customized profiling////* debugging////* debugging////* fix the reuse of differnt location type////* add rank////* add the rank////* add fragmentation////* add time_step_trace////* Add summary for each execution step (total bytes, used/free bytes).////* add top k////* change type of top k parameter////* remove prints////* change heap to set{////* add the name pattern////* add the useage for pattern////* add partition////* change to static class////* add custom group////* remove const////* update memory_info////* in process of adding it as runtime config////* change the memory profiling to be an argument////* add some comments////* add checks to recored meomry_info in traaining session////* set the ""local rank setting"" to correct argument.////* addressing comments////* format adjustment////* formatting////* remove alloc_interval////* update memory_info.cc to skip session when there is no tensor for a particular memory type////* fix memory_info multiple iteration seg-fault////* consolidate mainz changes////* fixed some minor errors////* guard by ORT_MINIMAL_BUILD////* add ORT_MEMORY_PROFILE flag////* added compiler flag to turn on/off memory profiling related code////* clean up the code regarding comments////* add comments////* revoke the onnx version////* clean up the code to match master////* clean up the code to match master////* clean up the code to match master////Co-authored-by: Jesse Benson <benson.jesse@gmail.com>//Co-authored-by: Wei Zuo <wezuo@OrtTrainingDev3.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: wezuo <wezuo@az-eus-v100-32gb-5-worker-mgtbby.eastus.cloudapp.azure.com>//Co-authored-by: wezuo <wezuo@az-eus-v100-32gb-5-worker-yclzsf.eastus.cloudapp.azure.com>////* Support MLFloat16 in CumSum Cuda op for Opset 14 (#6355)////* Add CumSum-14 for Cuda////* fix convert_common version retrival (#6382)////* Refine auto_pad based pad computation in ConvTranspose (#6305)////* Fix SDL warning (#6390)////* Add max_norm for gradient clipping. (#6289)////* add max_norm as user option for gradient clipping////* add adam and lamb test cases for clip norm////* add frontend tests////* Add the custom op project information (#6334)////* Dont use default string marshalling in C# (#6219)////* Fix Windows x86 compiler warnings in the optimizers project  (#6377)////* [Perf] Optimize Tile CPU and CUDA kernels for a corner case (#6376)////* Unblock Android CI code coverage failure (#6393)////* fix build on cuda11 (#6394)////Co-authored-by: Vincent Wang <weicwang@microsoft.com>////* Load the model path correctly (#6369)////* Fix some compile warnings (#6316)////* OpenVino docker file changes to bypass privileged mode////Description: Builds and installs libusb without UDEV support, which is used for communicating with the VPU device.////Motivation and Context////This enables the resulting docker container to be run without '--privileged' and '--network host' options which may not be suitable in deployment environments.////* Megatron checkpointing (#6293)////* Add bart fairseq run script////* Add frontend change to enable megatron////* Initial changes for checkpointing////* Megatron optim state loading, checkpoint aggregation, frontend distributed tests for H, D+H////* Add load_checkpoint changes////* Fix CI////* Cleanup////* Fix CI////* review comments////* review comments////* review comments:////* Fix generate_submodule_cgmanifest.py Windows issues. (#6404)////* Continue memory planning when unknown shape tensor is encountered. (#6413)////* Reintroduce experimental api changes and fix remote build break (#6385)////Co-authored-by: Ori Levari <orlevari@microsoft.com>////* Add support for custom ops to minimal build. (#6228)////* Add support for custom ops to minimal build.//Cost is only ~8KB so including in base minimal build.////* enable pipeline to run quantization tests (#6416)////* enable pipeline to run quantization tests//setup test pipeline for quantization////* Minor cmake change (#6431)////* Liqun/liqun/enable pipeline parallel test2 (#6399)////* enable data and pipeline parallism test////Co-authored-by: liqun <liqun@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>////* Farewell TrainableDropout (#5793)////* Deprecate TrainableDropout kernel.////* Update bert_toy_postprocessed.onnx to opset 12.////* Add more dropout tests.////* Fix BiasDropout kernel.////Co-authored-by: Ubuntu <OrtTrainingDev3@OrtTrainingDev3.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: Sherlock Huang <bahuang@OrtTrainingDev3.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: Sergii Dymchenko <sedymche@microsoft.com>////* fix null dereference warning (#6437)////* Expose graph ModelPath to TensorRT shared library (#6353)////* Update graph_viewer.cc////* Update tensorrt_execution_provider.cc////* Update graph_viewer.h////* Update tensorrt_execution_provider.cc////* Update tensorrt_execution_provider.cc////* Update provider_api.h////* Update provider_bridge_ort.cc////* Update provider_interfaces.h////* Update provider_interfaces.h////* expose GraphViewer ModelPath API to TRT shared lib////* add modelpath to compile////* update////* add model_path to onnx tensorrt parser////* use GenerateMetaDefId to generate unique TRT kernel name////* use GenerateMetaDefId to generate unique TRT engine name////* fix issue////* Update tensorrt_execution_provider.cc////* remove GetVecHash////* Update tensorrt_execution_provider.h////* convert wchar_t to char for tensorrt parser////* update tensorrt parser to include latest changes////* fix issues////* Update tensorrt_execution_provider.cc////* merge trt parser latest change////* add PROVIDER_DISALLOW_ALL(Path)////* add tool for generating test data for longformer (#6415)////* only build experimental api in redist (#6465)////Co-authored-by: Sheil Kumar <sheilk@microsoft.com>////* Add an option to save the training graph after optimization (#6410)////* expose optimized_model_filepath in SessionOptions as `debug.graph_save_paths.model_with_training_graph_after_optimization_path` in `ORTTrainerOptions`////* Share allocator between CUDA EP & TRT EP. (#6332)////* Share allocator between CUDA EP & TRT EP.//limitation://1. Does not cover the per-thread allocator created by CUDA EP, still need to figure out the way to remove it//2. Need to have more identifiers to make it able to share CPU allocator across all EPs////* fix max norm clipping test in python packaging pipeline test (#6468)////* fix python packaging pipeline////* make clip norm test compatabile with both V100 and M60 GPUs////* Initial version of CoreML EP (#6392)////* Bug 31463811: Servicing: Redist (Nuget) conflicts with Microsoft.AI.MachineLearning starting 21H1+ (#6460)////* update load library code to have the fullly qualified path////* make it work for syswow32////* git Revert ""make it work for syswow32""////This reverts commit b9f594341b7cf07241b18d0c376af905edcabae3.////Co-authored-by: Sheil Kumar <sheilk@microsoft.com>////* dequantize 1st input of lstm back if it is quantized (#6444)////* [java] Adds support for OrtEnvironment thread pools (#6406)////* Updates for Gradle 7.////* Adding support for OrtThreadingOptions into the Java API.////* Fixing a typo in the JNI code.////* Adding a test for the environment's thread pool.////* Fix cuda test, add comment to failure.////* Updating build.gradle////* fix SDL native rule warning #6246 (#6461)////* fix SDL rule (#6464)////* use tickcount64 (#6447)////Co-authored-by: Ori Levari <orlevari@microsoft.com>////* Update pypi package metadata (#6354)////* Update setup file data////* add missing comma////* remove python 3.5////* fix typo bracket////* Delete nuget extra configs (#6477)////* Op kernel type reduction infrastructure. (#6466)////Add infrastructure to support type reduction in Op kernel implementations.//Update Cast and IsInf CPU kernels to use it.////* Fixing a leak in OnnxSequences with String keys or values. (#6473)////* Increase the distributes tests pipeline timeout to 120 minutes (#6479)////* [CoreML EP] Add CI for CoreML EP (macOS) and add coreml_flags for EP options (#6481)////* Add macos coreml CI and coreml_flags////* Move save debuggubg model to use environment var////* Move pipeline off from macos CI template////* Fix an issue building using unix make, add parallel to build script////* Fixed build break for shared_lib and cmpile warning////* Fix a compile warning////* test////* Revert the accidental push from another branch////This reverts commit 472029ba25d50f9508474c9eeceb3454cead7877.////* Add ability to track per operator types in reduced build config. (#6428)////* Add ability to generate configuration that includes required types for individual operators, to allow build size reduction based on that.//  - Add python bindings for ORT format models//    - Add script to update bindings and help info//  - Add parsing of ORT format models//  - Add ability to enable type reduction to config generation//  - Update build.py to only allow operator/type reduction via config//    - simpler to require config to be generated first//    - can't mix a type aware (ORT format model only) and non-type aware config as that may result in insufficient types being enabled//  - Add script to create reduced build config//  - Update CIs////* merge e2e with distributed pipeline (#6443)////merge e2e with distributed pipeline////* Fix test breaks in Windows ingestion pipeline (#6476)////* fix various build breaks with Windows build////* fix runtime errors loading libraries from system32////* add build_inbox check to winml_test_common////* use raw string////* cleanup////* fix dll load////Co-authored-by: Sheil Kumar <sheilk@microsoft.com>////* Speed up the Mac CI runs (#6483)////* expose learningmodelpixelrange property (#5877)////* Fix of support api version bug for [de]quantize (#6492)////* SDL fixes: add proper casts/format specifiers (#6446)////* SDL annotation fixes (#6448)////Co-authored-by: Ori Levari <orlevari@microsoft.com>////* [OpenVINO-EP] Remove support for OpenVINO 2020.2 (#6493)////* Removed OpenVINO 2020.2 support////* Updated documentation and build.py////* Removed unnecessary libraries from setup.py////* Support pad operator in quantization and quantized nhwc transformer. Fix Pad operator bug. (#6325)////Support pad operator in quantization tool.//Support pad operator in quantized nhwc transformer.//Fix pad() operator bug when pad input's inner(right) most axis value is zero for Edge and Reflect mode, it copied wrong value to the cells to be padded. Note the Constant mode will not trigger this bug, as Edge/Reflect need copy value from the already copied array while Constant mode only fill specified value.//Add more test cases to cover pad() operator bug fixed here.//Fix quantization tools uint8/int8 value overflow issue when quantize weights in python.////* Improve work distribution for Expand operator, and sharded LoopCounter configuration (#6454)////Description: This PR makes two changes identified while looking at a PGAN model.////First, it uses ThreadPool::TryParallelFor for the main parallel loops in the Expand operator. This lets the thread pool decide on the granularity at which to distribute work (unlike TrySimpleParallelFor). Profiling showed high costs when running ""simple"" loops with 4M iterations each of which copied only 4 bytes.////Second, it updates the sharded loop counter in the thread pool so that the number of shards is capped by the number of threads. This helps make the performance of any other high-contention ""simple"" loops more robust at low thread counts by letting each thread work on its own ""home"" shard for longer.////Motivation and Context////Profiling showed a PGAN model taking 2x+ longer with the non-OpenMP build. The root cause was that the OpenMP build uses simple static scheduling of loop iterations, while the non-OpenMP build uses dynamic scheduling. The combination of large numbers of tiny iterations is less significant with static scheduling --- although still desirable to avoid, given that each iteration incurs a std::function invocation.////* Update document of transformer optimization (#6487)////* nuphar test to avoid test data download to improve passing rate (#6467)////nuphar test to avoid test data download to improve passing rate////* Fuse cuda conv with activation (#6351)////* optimize cuda conv by fused activation////* remove needless print out////* exclude test from cpu////* handle status error from cudnn 8.x////* add reference to base class////* add hipify////* [CoreML EP] Add support for some activations/Transpose, move some shared helpers from NNAPI to shared space (#6498)////* Init change////* Move some helper from nnapi ep to shared////* Add transpose support////* Fix trt ci build break////* Refine transformers profiler output (#6502)////* output nodes in the original order; grouped by node name//* add document for profiler////* Update to match new test setup. (#6496)////* Update to match new test setup.////* Add Gemm(7) manually for now.//Will fix properly on Monday. It's used by mnist.ort as that is created by optimizing mnist.onnx to level 1 causing 2 nodes to be replaced by a Gemm and the op to be missing from the required list as that is created using the original onnx model.////* Enable dense sequence optimized version of Pytorch exported BERT-L on AMD GPU (#6504)////* Permit dense seq optimization on BERT-L pytorch export by enabling ReduceSumTraining, Equal, and NonZero on AMD////* enable Equal tests////* enable fast_matrix_reduction test case////* Optimize GatherGrad for AMD GPU (#6381)////* optimize gathergrad////* address comments////Co-authored-by: Weixing Zhang <wezhan@microsoft.com>////* add explicit barriers for buffer overread and overrwrite (#6484)////Co-authored-by: Ori Levari <orlevari@microsoft.com>////* fix sdl bugs for uninitialized variables and returns (#6450)////Co-authored-by: Ori Levari <orlevari@microsoft.com>////* handle hr error conditions (#6449)////Co-authored-by: Ori Levari <orlevari@microsoft.com>////* Dnnl training (#6045)////* Add ReluGrad and ConvGrad ops for the dnnl provider////* the mnist sample is updated to add the --use_dnnl option that//will cause the sample to use the dnnl execution provider for//nodes that exist in dnnl provider.////* Added the ability to find forward ops. Dnnl backward gradient//ops require the forward primitive description and workspace//from the forward operation.////* Enable specifying the execution provider for Gradient Checker Tests////* Prevent memory leak when running dnnl_provider in training mode////Prevent creating a SubgraphPrimitivePool when the code is built with the//ENABLE_TRAINING build flag. Instead create a SubgraphPrimitive directly.////The SubgraphPrimitivePool was causing a pool of SubgraphPrimitives to be//stashed in a map for reuse. Due to the way the Training Loop uses threads//the pool of SubgraphPrimitives were not being reuse instead a new pool of//SubgraphPrimitives being created each run. The old pool was not instantly//freed. This behavior could be a language error when using thread_local//memory.////Signed-off-by: George Nash <george.nash@intel.com>////* Added fixes to maxpoolgrad and memory leak.////Maxpoolgrad will now pass all unit tests.//With the conv and convgrad disabled for dnnl, mnist is able to train till 95%////Signed-off-by: Chethan Palangotu Keshava <chethan.palangotu.keshava@intel.com>////* Fixed misc issues when testing training code with dnnl provider////* fix conv_grad dnnl tests with dilation to run dnnl execution provider////* update mnist training sample to accept convolution type models////  convolution models require the input shape to be {1, 28, 28}//  instead of the flat {728} image that is used for the gemm models////  this will enable models that require the different shape by adding// `--model_type conv` to the command line when running the mnist sample.// (while testing a workaround was used see #4762)////* Disable weight caching in dnnl conv operator when using training////  When training we can not use cached weights because the weight//  will be updated each run. This re-enables dnnl Conv and ConvGrad Ops.//  The weight caching was the source of the error from Conv when training.////* Fix issues found when building grad ops on Linux//  * The dnnl_convgrad code was over using the scope operator//    causing a compilation problem.//  * The dnnl_maxpoolgrad code had a logic error that is was//    comparing with the source description when it should have//    been comparing with the destination despription.////* Update BUILD.md so it shows DNNL for training//  * Updated the table of contents. Since the same providers//    are listed twice. Once for Infrance and again for Training//    an HTML anchor was added to distinguish the second header//    from the first for the TOC.////* Fix build failure when not using --enable-training build option////* reorganize the gradient operators so they are grouped together////* Fix issues found when running onnx_backend_test_series.py////* Pooling code only supports 2 outputs when built with --enable-training////* Address code review feedback//  * class member variables end in underscore_//  * use dst instead of dist to match pattern use elsewhere in DNNL code.////* Remove workaround that was introduced to handle problems running//  convolution based training models. See issue #4762////Signed-off-by: George Nash <george.nash@intel.com>////* Isolate training code and code cleanup////* Do not build if dnnl_gpu_runtime if enable_training is set training code//  does not support dnnl_gpu_runtime yet.//* Isolated Training code inside ifdefs so that they wont affect//  project if built without training enabled//* Inadvertant changes in whitespace were removed to make code review simpler//* Undid some code reordering that was not needed//* comments added to closing #endif statments to simplify reading complex ifdefs//* Modified the GetPrimitiveDesc functions to return shared_ptr instead of raw//  pointer. This matches what was done in Pool code and is safer memory code.////Signed-off-by: George Nash <george.nash@intel.com>////* Address code review issues////- whitespace changes caused by running clang-format on the code//- Several spelling errors fixed//- Removed/changed some ifdefs to improve readability//- other misc. changes in responce to code review.////Signed-off-by: George Nash <george.nash@intel.com>////* Code changes to address code review////- Simplify iteration code using `auto` keyword//- remove C style cast that was not needed//- remove instance variable that was not needed [relugrad.h]//- added the execution providers to `ComputeGradientErrorInternal()`//  and `ComputeTheoreticalJacobianTranspose()` instead of using//  a pointer to an instance varaible [gradient_checker.h/.cc]////Signed-off-by: George Nash <george.nash@intel.com>////* Combined the default gradient ops test and dnnl gradient ops test for ConvGrad and MaxPoolGrad into one function with the help of a helper function.//This will reduce repeated code.//Signed-off-by: Palangotu Keshava, Chethan's avatarChethan Palangotu Keshava <chethan.palangotu.keshava@intel.com>////* Replaced the stack used by convgrad to vector so that the vector(used as stack) can be easily cleared everytime the graph is created.//This will prevent memory leak from convolution kernels being pushed constantly onto the stack.//Signed-off-by: chethan.palangotu.keshava@intel.com////* Code clean up and formating updates//// - Removed empty else statment// - updated indentation of code that was causing double curly brackets to look unususal// - Changed check for NumDimensions to Size in Relu and ReluGrad error checking code.// - isolated training code////Signed-off-by: George Nash <george.nash@intel.com>////* Restore inadvertantly removed ConvGrad tests////When combining the DNNL and CPU version of the ConvGrad//tests two test were inadvertantly excluded.  This adds//back the Conv3d and Conv3d with strides test cases.////Signed-off-by: George Nash <george.nash@intel.com>////* Add validation to ConvGrad////This validates the dimensions of the ConvGrad match the//passed in Convolution forward primitive description.////The current code for DNNL ConvGrad makes the assumption that the ConvGrad//nodes will be visited in the reverse order from the corresponding Conv nodes////The added validation will return an error if this assumption is not true.////Signed-off-by: George Nash <george.nash@intel.com>////* Do not create new execution providers in provider_test_utils////This removes the code that generated new execution providers in the//OpTester::Run function. This was added because the std::move was//leaving the `entry` value empty so subsequent calls would cause a//segfault.////Problem is this potentially changed the execution_provider because it//would create the default provider dropping any custom arguments.////When the now removed code was originally added the std::move was causing//crashes when the GradientChecker unit tests were run.  However, it is no//longer causing problems even with the code removed.////Signed-off-by: George Nash <george.nash@intel.com>////* Change the forward conv stack to a forward conv map////This changes how the forward conv kernel is mapped to the bwd ConvGrad//kernel the problematic stack is no longer used.////The convolution stack made the assumption that the corresponding//ConvGrad operator would be visited in reverse order of the forward//Conv operators.  This was always problematic and was unlikely to//work for inception models.////Important changes://- The weight_name is added to the ConvGrad dnnl_node making it//  possible to use the weight_name as a lookup key to find the//  Conv forward Kernel//- the `std::vector fwd_conv_stack_` has been replaced with a//  `std::map fwd_conv_kernel_map_`//- Although it is not needed lock_guards were added when writing//  to and reading from the fwd_conv_kernel_map_ as well as the//  fwd_kernel_map_. These should always be accessed by a single//  thread when preparing the dnnl subgraphs so the guard should not//  be needed but its added just in case.//- Updated the comments ConvGrad.h code to no longer mention the//  stack. The error check is not removed. It will be good to verify//  there are no errors as we continue to test against more models.////Signed-off-by: George Nash <george.nash@intel.com>////Co-authored-by: Chethan Palangotu Keshava <chethan.palangotu.keshava@intel.com>//Co-authored-by: unknown <63478620+jeyblu@users.noreply.github.com>////* Lochi/refactor yolov3 quantization (#6290)////* Refactor the code and move data reader, preprocessing, evaluation to//E2E_example_mode////* Refactor the code.////Move data reader, preprocessing, evaluation to model specific example//under E2E_example_mode////* refactor code////* Move yolov3 example to specific folder and add additional pre/post//processing////* Print a warning message for using newer c_api header on old binary (#6507)////* Fix issues with ArmNN build setup (#6495)////* ArmNN build fixes//* Update BUILD.md to document that the ACL paths must be specified to build ArmNN//* Fix CUDA build error. We don't setup the link libraries correctly/consistently so improve that.////* Fix Windows CI builds by updating test scripts to work with numpy 1.20. (#6518)////* Update onnxruntime_test_python.py to work with numpy 1.20.////Some aliases are deprecated in favor of the built-in python types. See https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations////np.array with bytes for entries and dtype of np.void no longer automatically pads. Change a test to adjust for that.////* Fix another test script////* Fix ORTModule branch for orttraining-* pipelines////* Update pytorch nightly version dependency////Co-authored-by: Edward Chen <18449977+edgchen1@users.noreply.github.com>//Co-authored-by: George Wu <jywu@microsoft.com>//Co-authored-by: Cecilia Liu <ziyue.liu7@gmail.com>//Co-authored-by: Ryan Hill <38674843+RyanUnderhill@users.noreply.github.com>//Co-authored-by: George Nash <george.nash@intel.com>//Co-authored-by: Guoyu Wang <62914304+gwang-msft@users.noreply.github.com>//Co-authored-by: Yateng Hong <toothache9010@gmail.com>//Co-authored-by: stevenlix <38092805+stevenlix@users.noreply.github.com>//Co-authored-by: Derek Murray <Derek.Murray@microsoft.com>//Co-authored-by: ashbhandare <ash.bhandare@gmail.com>//Co-authored-by: Scott McKay <skottmckay@gmail.com>//Co-authored-by: Changming Sun <chasun@microsoft.com>//Co-authored-by: Tracy Sharpe <42477615+tracysh@users.noreply.github.com>//Co-authored-by: Juliana Franco <jufranc@microsoft.com>//Co-authored-by: Pranav Sharma <prs@microsoft.com>//Co-authored-by: Tixxx <tix@microsoft.com>//Co-authored-by: Jay Rodge <jayrodge@live.com>//Co-authored-by: Du Li <duli1@microsoft.com>//Co-authored-by: Du Li <duli@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: Yufeng Li <liyufeng1987@gmail.com>//Co-authored-by: baijumeswani <bmeswani@microsoft.com>//Co-authored-by: Sergii Dymchenko <sedymche@microsoft.com>//Co-authored-by: jingyanwangms <47403504+jingyanwangms@users.noreply.github.com>//Co-authored-by: satyajandhyala <satya.k.jandhyala@gmail.com>//Co-authored-by: S. Manohar Karlapalem <manohar.karlapalem@intel.com>//Co-authored-by: Weixing Zhang <weixingzhang@users.noreply.github.com>//Co-authored-by: Suffian Khan <sukha@microsoft.com>//Co-authored-by: Olivia Jain <oljain@microsoft.com>//Co-authored-by: Chi Lo <54722500+chilo-ms@users.noreply.github.com>//Co-authored-by: Hariharan Seshadri <shariharan91@gmail.com>//Co-authored-by: Ryan Lai <rylai@microsoft.com>//Co-authored-by: Jesse Benson <jesseb@microsoft.com>//Co-authored-by: sfatimar <64512376+sfatimar@users.noreply.github.com>//Co-authored-by: suryasidd <surya.siddharth.pemmaraju@intel.com>//Co-authored-by: sfatimar <sahar.fatima@intel/com>//Co-authored-by: MaajidKhan <n.maajidkhan@gmail.com>//Co-authored-by: mohdansx <mohdx.ansari@intel.com>//Co-authored-by: Xavier Dupré <xadupre@users.noreply.github.com>//Co-authored-by: Michael Goin <mgoin@vols.utk.edu>//Co-authored-by: Michael Giba <michaelgiba@gmail.com>//Co-authored-by: William Tambellini <wtambellini@sdl.com>//Co-authored-by: Hector Li <hecli@microsoft.com>//Co-authored-by: Aishwarya <aibhanda@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: liqunfu <liqfu@microsoft.com>//Co-authored-by: liqun <liqun@OrtTrainingDev4.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: pengwa <pengwa@microsoft.com>//Co-authored-by: Tang, Cheng <souptc@gmail.com>//Co-authored-by: Cheng Tang <chenta@microsoft.com>//Co-authored-by: Tianlei Wu <tlwu@microsoft.com>//Co-authored-by: Ye Wang <52801275+wangyems@users.noreply.github.com>//Co-authored-by: Chun-Wei Chen <jacky82226@gmail.com>//Co-authored-by: Vincent Wang <wangwchpku@outlook.com>//Co-authored-by: Vincent Wang <weicwang@microsoft.com>//Co-authored-by: Luyao Ren <375833274@qq.com>//Co-authored-by: Zhang Lei <zhang.huanning@hotmail.com>//Co-authored-by: Tim Harris <tiharr@microsoft.com>//Co-authored-by: Ashwini Khade <askhade@microsoft.com>//Co-authored-by: Dmitri Smirnov <yuslepukhin@users.noreply.github.com>//Co-authored-by: Alberto Magni <49027342+alberto-magni@users.noreply.github.com>//Co-authored-by: Wei-Sheng Chin <wschin@outlook.com>//Co-authored-by: wezuo <49965641+wezuo@users.noreply.github.com>//Co-authored-by: Jesse Benson <benson.jesse@gmail.com>//Co-authored-by: Wei Zuo <wezuo@OrtTrainingDev3.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: wezuo <wezuo@az-eus-v100-32gb-5-worker-mgtbby.eastus.cloudapp.azure.com>//Co-authored-by: wezuo <wezuo@az-eus-v100-32gb-5-worker-yclzsf.eastus.cloudapp.azure.com>//Co-authored-by: Wenbing Li <10278425+wenbingl@users.noreply.github.com>//Co-authored-by: Martin Man <supermt@gmail.com>//Co-authored-by: M. Zeeshan Siddiqui <mzs@microsoft.com>//Co-authored-by: Ori Levari <ori.levari@microsoft.com>//Co-authored-by: Ori Levari <orlevari@microsoft.com>//Co-authored-by: Ubuntu <OrtTrainingDev3@OrtTrainingDev3.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: Sherlock Huang <bahuang@OrtTrainingDev3.af05slrtruoetgaxwwjv5nsq5e.px.internal.cloudapp.net>//Co-authored-by: Sheil Kumar <smk2007@gmail.com>//Co-authored-by: Sheil Kumar <sheilk@microsoft.com>//Co-authored-by: Ryota Tomioka <ryoto@microsoft.com>//Co-authored-by: Adam Pocock <adam.pocock@oracle.com>//Co-authored-by: Yulong Wang <f.s@qq.com>//Co-authored-by: Faith Xu <faxu@microsoft.com>//Co-authored-by: Xiang Zhang <xianz@microsoft.com>//Co-authored-by: suryasidd <48925384+suryasidd@users.noreply.github.com>//Co-authored-by: RandySheriffH <48490400+RandySheriffH@users.noreply.github.com>//Co-authored-by: Weixing Zhang <wezhan@microsoft.com>//Co-authored-by: Chethan Palangotu Keshava <chethan.palangotu.keshava@intel.com>//Co-authored-by: unknown <63478620+jeyblu@users.noreply.github.com>",https://github.com/microsoft/onnxruntime/commit/8a890ddfd749a2f46609f8e234f192780bb41356,156939672,microsoft/onnxruntime,False,False,"['#6526', '#5923', '#6142', '#6105', '#6108', '#6085', '#6117', '#6138', '#6115', '#6139', '#6093', '#6145', '#4656', '#6069', '#6150', '#6151', '#6152', '#5940', '#6162', '#5468', '#6161', '#6164', '#6008', '#6169', '#6165', '#6136', '#6166', '#6172', '#6176', '#6155', '#6175', '#6177', '#6156', '#5803', '#6163', '#6182', '#6128', '#6174', '#6167', '#6103', '#6184', '#6193', '#6188', '#6180', '#6198', '#6196', '#6201', '#5537', '#6032', '#6034', '#6221', '#6231', '#6234', '#6212', '#6233', '#6238', '#6220', '#6223', '#6217', '#6222', '#6242', '#6240', '#6239', '#6202', '#6140', '#6200', '#5457', '#6252', '#6070', '#6244', '#6248', '#6256', '#6267', '#6276', '#6171', '#6129', '#6269', '#6272', '#6280', '#6270', '#6205', '#6284', '#6224', '#6297', '#6043', '#6285', '#6288', '#6309', '#6315', '#6303', '#6295', '#6314', '#6298', '#6287', '#6324', '#6326', '#6107', '#6331', '#6340', '#6335', '#6336', '#6259', '#6257', '#6337', '#6321', '#6341', '#6310', '#6317', '#6346', '#6090', '#6348', '#6313', '#6333', '#6343', '#6345', '#6338', '#6347', '#5815', '#6356', '#6359', '#6357', '#6255', '#6363', '#5658', '#6355', '#6382', '#6305', '#6390', '#6289', '#6334', '#6219', '#6377', '#6376', '#6393', '#6394', '#6369', '#6316', '#6293', '#6404', '#6413', '#6385', '#6228', '#6416', '#6431', '#6399', '#5793', '#6437', '#6353', '#6415', '#6465', '#6410', '#6332', '#6468', '#6392', '#6460', '#6444', '#6406', '#6246', '#6461', '#6464', '#6447', '#6354', '#6477', '#6466', '#6473', '#6479', '#6481', '#6428', '#6443', '#6476', '#6483', '#5877', '#6492', '#6446', '#6448', '#6493', '#6325', '#6454', '#6487', '#6467', '#6351', '#6498', '#6502', '#6496', '#6504', '#6381', '#6484', '#6450', '#6449', '#6045', '#4762', '#4762', '#6290', '#6507', '#6495', '#6518']",10
40,12ade69c1eb9958b13374edf5ef742ea20ccffde,"KVM: PPC: Book3S HV: XIVE: Ensure VP isn't already in use//Connecting a vCPU to a XIVE KVM device means establishing a 1:1/association between a vCPU id and the offset (VP id) of a VP/structure within a fixed size block of VPs. We currently try to/enforce the 1:1 relationship by checking that a vCPU with the/same id isn't already connected. This is good but unfortunately/not enough because we don't map VP ids to raw vCPU ids but to/packed vCPU ids, and the packing function kvmppc_pack_vcpu_id()/isn't bijective by design. We got away with it because QEMU passes/vCPU ids that fit well in the packing pattern. But nothing prevents/userspace to come up with a forged vCPU id resulting in a packed id/collision which causes the KVM device to associate two vCPUs to the/same VP. This greatly confuses the irq layer and ultimately crashes/the kernel, as shown below.//Example: a guest with 1 guest thread per core, a core stride of/8 and 300 vCPUs has vCPU ids 0,8,16...2392. If QEMU is patched to/inject at some point an invalid vCPU id 348, which is the packed/version of itself and 2392, we get://genirq: Flags mismatch irq 199. 00010000 (kvm-2-2392) vs. 00010000 (kvm-2-348)/CPU: 24 PID: 88176 Comm: qemu-system-ppc Not tainted 5.3.0-xive-nr-servers-5.3-gku+ #38/Call Trace:/[c000003f7f9937e0] [c000000000c0110c] dump_stack+0xb0/0xf4 (unreliable)/[c000003f7f993820] [c0000000001cb480] __setup_irq+0xa70/0xad0/[c000003f7f9938d0] [c0000000001cb75c] request_threaded_irq+0x13c/0x260/[c000003f7f993940] [c00800000d44e7ac] kvmppc_xive_attach_escalation+0x104/0x270 [kvm]/[c000003f7f9939d0] [c00800000d45013c] kvmppc_xive_connect_vcpu+0x424/0x620 [kvm]/[c000003f7f993ac0] [c00800000d444428] kvm_arch_vcpu_ioctl+0x260/0x448 [kvm]/[c000003f7f993b90] [c00800000d43593c] kvm_vcpu_ioctl+0x154/0x7c8 [kvm]/[c000003f7f993d00] [c0000000004840f0] do_vfs_ioctl+0xe0/0xc30/[c000003f7f993db0] [c000000000484d44] ksys_ioctl+0x104/0x120/[c000003f7f993e00] [c000000000484d88] sys_ioctl+0x28/0x80/[c000003f7f993e20] [c00000000000b278] system_call+0x5c/0x68/xive-kvm: Failed to request escalation interrupt for queue 0 of VCPU 2392/------------[ cut here ]------------/remove_proc_entry: removing non-empty directory 'irq/199', leaking at least 'kvm-2-348'/WARNING: CPU: 24 PID: 88176 at /home/greg/Work/linux/kernel-kvm-ppc/fs/proc/generic.c:684 remove_proc_entry+0x1ec/0x200/Modules linked in: kvm_hv kvm dm_mod vhost_net vhost tap xt_CHECKSUM iptable_mangle xt_MASQUERADE iptable_nat nf_nat xt_conntrack nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ipt_REJECT nf_reject_ipv4 tun bridge stp llc ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter squashfs loop fuse i2c_dev sg ofpart ocxl powernv_flash at24 xts mtd uio_pdrv_genirq vmx_crypto opal_prd ipmi_powernv uio ipmi_devintf ipmi_msghandler ibmpowernv ib_iser rdma_cm iw_cm ib_cm ib_core iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi ip_tables ext4 mbcache jbd2 raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor xor async_tx raid6_pq libcrc32c raid1 raid0 linear sd_mod ast i2c_algo_bit drm_vram_helper ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm ahci libahci libata tg3 drm_panel_orientation_quirks [last unloaded: kvm]/CPU: 24 PID: 88176 Comm: qemu-system-ppc Not tainted 5.3.0-xive-nr-servers-5.3-gku+ #38/NIP:  c00000000053b0cc LR: c00000000053b0c8 CTR: c0000000000ba3b0/REGS: c000003f7f9934b0 TRAP: 0700   Not tainted  (5.3.0-xive-nr-servers-5.3-gku+)/MSR:  9000000000029033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 48228222  XER: 20040000/CFAR: c000000000131a50 IRQMASK: 0/GPR00: c00000000053b0c8 c000003f7f993740 c0000000015ec500 0000000000000057/GPR04: 0000000000000001 0000000000000000 000049fb98484262 0000000000001bcf/GPR08: 0000000000000007 0000000000000007 0000000000000001 9000000000001033/GPR12: 0000000000008000 c000003ffffeb800 0000000000000000 000000012f4ce5a1/GPR16: 000000012ef5a0c8 0000000000000000 000000012f113bb0 0000000000000000/GPR20: 000000012f45d918 c000003f863758b0 c000003f86375870 0000000000000006/GPR24: c000003f86375a30 0000000000000007 c0002039373d9020 c0000000014c4a48/GPR28: 0000000000000001 c000003fe62a4f6b c00020394b2e9fab c000003fe62a4ec0/NIP [c00000000053b0cc] remove_proc_entry+0x1ec/0x200/LR [c00000000053b0c8] remove_proc_entry+0x1e8/0x200/Call Trace:/[c000003f7f993740] [c00000000053b0c8] remove_proc_entry+0x1e8/0x200 (unreliable)/[c000003f7f9937e0] [c0000000001d3654] unregister_irq_proc+0x114/0x150/[c000003f7f993880] [c0000000001c6284] free_desc+0x54/0xb0/[c000003f7f9938c0] [c0000000001c65ec] irq_free_descs+0xac/0x100/[c000003f7f993910] [c0000000001d1ff8] irq_dispose_mapping+0x68/0x80/[c000003f7f993940] [c00800000d44e8a4] kvmppc_xive_attach_escalation+0x1fc/0x270 [kvm]/[c000003f7f9939d0] [c00800000d45013c] kvmppc_xive_connect_vcpu+0x424/0x620 [kvm]/[c000003f7f993ac0] [c00800000d444428] kvm_arch_vcpu_ioctl+0x260/0x448 [kvm]/[c000003f7f993b90] [c00800000d43593c] kvm_vcpu_ioctl+0x154/0x7c8 [kvm]/[c000003f7f993d00] [c0000000004840f0] do_vfs_ioctl+0xe0/0xc30/[c000003f7f993db0] [c000000000484d44] ksys_ioctl+0x104/0x120/[c000003f7f993e00] [c000000000484d88] sys_ioctl+0x28/0x80/[c000003f7f993e20] [c00000000000b278] system_call+0x5c/0x68/Instruction dump:/2c230000 41820008 3923ff78 e8e900a0 3c82ff69 3c62ff8d 7fa6eb78 7fc5f378/3884f080 3863b948 4bbf6925 60000000 <0fe00000> 4bffff7c fba10088 4bbf6e41/---[ end trace b925b67a74a1d8d1 ]---/BUG: Kernel NULL pointer dereference at 0x00000010/Faulting instruction address: 0xc00800000d44fc04/Oops: Kernel access of bad area, sig: 11 [#1]/LE PAGE_SIZE=64K MMU=Radix MMU=Hash SMP NR_CPUS=2048 NUMA PowerNV/Modules linked in: kvm_hv kvm dm_mod vhost_net vhost tap xt_CHECKSUM iptable_mangle xt_MASQUERADE iptable_nat nf_nat xt_conntrack nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ipt_REJECT nf_reject_ipv4 tun bridge stp llc ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter squashfs loop fuse i2c_dev sg ofpart ocxl powernv_flash at24 xts mtd uio_pdrv_genirq vmx_crypto opal_prd ipmi_powernv uio ipmi_devintf ipmi_msghandler ibmpowernv ib_iser rdma_cm iw_cm ib_cm ib_core iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi ip_tables ext4 mbcache jbd2 raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor xor async_tx raid6_pq libcrc32c raid1 raid0 linear sd_mod ast i2c_algo_bit drm_vram_helper ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm ahci libahci libata tg3 drm_panel_orientation_quirks [last unloaded: kvm]/CPU: 24 PID: 88176 Comm: qemu-system-ppc Tainted: G        W         5.3.0-xive-nr-servers-5.3-gku+ #38/NIP:  c00800000d44fc04 LR: c00800000d44fc00 CTR: c0000000001cd970/REGS: c000003f7f9938e0 TRAP: 0300   Tainted: G        W          (5.3.0-xive-nr-servers-5.3-gku+)/MSR:  9000000000009033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 24228882  XER: 20040000/CFAR: c0000000001cd9ac DAR: 0000000000000010 DSISR: 40000000 IRQMASK: 0/GPR00: c00800000d44fc00 c000003f7f993b70 c00800000d468300 0000000000000000/GPR04: 00000000000000c7 0000000000000000 0000000000000000 c000003ffacd06d8/GPR08: 0000000000000000 c000003ffacd0738 0000000000000000 fffffffffffffffd/GPR12: 0000000000000040 c000003ffffeb800 0000000000000000 000000012f4ce5a1/GPR16: 000000012ef5a0c8 0000000000000000 000000012f113bb0 0000000000000000/GPR20: 000000012f45d918 00007ffffe0d9a80 000000012f4f5df0 000000012ef8c9f8/GPR24: 0000000000000001 0000000000000000 c000003fe4501ed0 c000003f8b1d0000/GPR28: c0000033314689c0 c000003fe4501c00 c000003fe4501e70 c000003fe4501e90/NIP [c00800000d44fc04] kvmppc_xive_cleanup_vcpu+0xfc/0x210 [kvm]/LR [c00800000d44fc00] kvmppc_xive_cleanup_vcpu+0xf8/0x210 [kvm]/Call Trace:/[c000003f7f993b70] [c00800000d44fc00] kvmppc_xive_cleanup_vcpu+0xf8/0x210 [kvm] (unreliable)/[c000003f7f993bd0] [c00800000d450bd4] kvmppc_xive_release+0xdc/0x1b0 [kvm]/[c000003f7f993c30] [c00800000d436a98] kvm_device_release+0xb0/0x110 [kvm]/[c000003f7f993c70] [c00000000046730c] __fput+0xec/0x320/[c000003f7f993cd0] [c000000000164ae0] task_work_run+0x150/0x1c0/[c000003f7f993d30] [c000000000025034] do_notify_resume+0x304/0x440/[c000003f7f993e20] [c00000000000dcc4] ret_from_except_lite+0x70/0x74/Instruction dump:/3bff0008 7fbfd040 419e0054 847e0004 2fa30000 419effec e93d0000 8929203c/2f890000 419effb8 4800821d e8410018 <e9230010> e9490008 9b2a0039 7c0004ac/---[ end trace b925b67a74a1d8d2 ]---//Kernel panic - not syncing: Fatal exception//This affects both XIVE and XICS-on-XIVE devices since the beginning.//Check the VP id instead of the vCPU id when a new vCPU is connected./The allocation of the XIVE CPU structure in kvmppc_xive_connect_vcpu()/is moved after the check to avoid the need for rollback.//Cc: stable@vger.kernel.org # v4.12+/Signed-off-by: Greg Kurz <groug@kaod.org>/Reviewed-by: Cédric Le Goater <clg@kaod.org>/Signed-off-by: Paul Mackerras <paulus@ozlabs.org>",https://github.com/microsoft/WSL2-Linux-Kernel/commit/12ade69c1eb9958b13374edf5ef742ea20ccffde,187922067,microsoft/WSL2-Linux-Kernel,False,False,"['#38', '#38', '#1', '#38']",11
46,8098db491eb98df84a28c6f795f5d2efdbd6ab39,"Refactor regexp creator (#184)//* it now should work in IE, but it needs optimizations////* second refactor shaves it from 139k to 67k////* all tests pass, one more pattern to convert////* uncommenting regex builders////* renaming, updating patterns",https://github.com/microsoft/powerquery-parser/commit/8098db491eb98df84a28c6f795f5d2efdbd6ab39,177661498,microsoft/powerquery-parser,False,False,['#184'],12
49,ab5f89bf930b2918232293820280c7eea5da690e,Rework Config.Builder.Build to return new each time (#109)//The expectation for a builder pattern seems to be that a new object should be created each time Build() is called. This change fixes the issue where Config.Builder.Build() would have returned the same object if Build() had been called multiple times.,https://github.com/microsoft/axe-windows/commit/ab5f89bf930b2918232293820280c7eea5da690e,182308830,microsoft/axe-windows,False,False,['#109'],13
55,db387eb770c24a931da1633469b7d3da29fefdb2,Fixing the layering in the base folder (#5308)//* removes more builder references////* remove builder from profiler////* formatting////* fix profiler dailog////* remove builder from oatuhdialog////* remove the rest of builder references////* formatting////* add more strict null checks to base////* enable strict tslint rules////* code layering of base////* wip////* working through changes to table data view////* fix tests////* update editabledropdown to not use layout service////* wip////* fix imports////* fix import////* fix compile error////* add more localization////* add comments to changes to import patterns////* add more import comments,https://github.com/microsoft/azuredatastudio/commit/db387eb770c24a931da1633469b7d3da29fefdb2,109200851,microsoft/azuredatastudio,False,False,['#5308'],14
62,2dfa00c0f4bd3d0de184df83d0c91ca24d6daee1,Add basic build crate for build.rs support (#154)//* Add basic build crate for build.rss support////* Use builder pattern////* Build in example////* Rebuild only if changed////* Support nuget////* Address PR feedback////* Last PR comments////Co-authored-by: Kenny Kerr <kekerr@microsoft.com>,https://github.com/microsoft/windows-rs/commit/2dfa00c0f4bd3d0de184df83d0c91ca24d6daee1,208102250,microsoft/windows-rs,False,False,['#154'],15
71,a29f2022d5e6bda1f005dac002e997318c8709ed,"New model (#2625)//* Start of significant pipeline redesign for improved API-driven use.////* Resolve test breaks.////* All tests pass.////* More test fixes.////* Start providing facility for tracking skipped files in artifact provider.////* Ongoing architectural and test updates for new pipeline model.////* Formatting updates.////* More work for unit-testing.////* Remove instance data from analyze command base////* Update logger dispose pattern to be driven by context dispose.////* Eliminate single-threaded analysis command base.////* Update release history and move location.////* Update release history for single threaded engine removal.////* Restore build after converting various URL dereferences to call GetFileName/Path extenson method.////* Clean up dispose pattern for validation command.////* Update package build for release history move.////* Update various references to moved release history markdown file.////* Formatting changes.////* Code clean-up in support of broader driver functionality.////* All tests pass after recent pipeline updates (to flow context, mostly).////* Continue converging functionality on the context object.////* All tests pass with ongoing pipeline redesign.////* Formatting.////* Updates for upstream consumers for build.////* Add rich return code to context.////* Collapse new pipeline model into single method with options and context.////* Add explicit return error for command-line processing issue.////* Allow null context to LogUnhandedEngineException.////* Correct exit reason on analysis cancellation.////* Restore tests.////* Resolve merge conflict passing incorrect context object.////* All tests pass.////* Ready for new model mvp.////* Update release notes.////* Add new set classes.////* Update release notes.////* Fix test breaks.////* All tests pass.////* Small updates after code review.////* Make traces test windows only.////* Disable misbehaving test.",https://github.com/microsoft/sarif-sdk/commit/a29f2022d5e6bda1f005dac002e997318c8709ed,45640472,microsoft/sarif-sdk,False,False,['#2625'],16
72,266039f238653df676863fc8d7dcbbb1a7579a79,"Performance pipeline using artifacts built by previous pipelines (#12778)//This PR allows us to reuse artifacts that are created in the pipeline//that builds our client packages to run the memory and runtime//performance tests on.////There are some changes that we've had to make the repo structure in//order for this to function. I have written them down here://**Execution Time Profiling Tests**////1. For both `experimental-tree` and `tree`: The packed `dist/test`//folder does not have the json files necessary to run the benchmark tests//so we have to change the postpack script to copy over the .ts files from//`src/test` and publish them as `test_files`, and in the pipeline, we//have to run a separate `npm build:test` to build the test files before//running the benchmark tests. See: microsoft/FluidFramework@996ba23//2. `experimental-tree` does not have a `buidl:test` command so we faked//it and introduced `build:test : npm run build` to the package.json so//that it could follow the same pattern at the others. See//microsoft/FluidFramework@f0642e790d407657bc8209f6ef5b4d00477c3679////Because of number 1 above, we didn't have to make the following changes,//but I am recording those changes here so we know about them:////**Memory Profiling Tests**////- For all the three packages (map, sequence and matrix), the packed//`dist/test` folder does not have the .mocharc.js file necessary to run//the test, so we need to move the `.mocharc.js` file from `src/test/`//files up to the root directory of the package in order to run the npm//command memory commands to work. See://microsoft/FluidFramework@f4af0671d7cf3c95acf4aa1396981f3b970d3caa////Currently, the runs take about 24 minutes, which is longer than the//pipeline that builds everything from scratch (generally 21 minutes) as//there is no parallelization in this current approach.////Co-authored-by: Alex Villarreal <716334+alexvy86@users.noreply.github.com>",https://github.com/microsoft/FluidFramework/commit/266039f238653df676863fc8d7dcbbb1a7579a79,203843667,microsoft/FluidFramework,False,False,['#12778'],17
73,a55313314fb4732070b515237470e94627e9f332,"chore(deps-dev): Bump rimraf from 4.1.3 to 4.2.0 (#1574)//Bumps [rimraf](https://github.com/isaacs/rimraf) from 4.1.3 to 4.2.0.//<details>//<summary>Changelog</summary>//<p><em>Sourced from <a//href=""https://github.com/isaacs/rimraf/blob/main/CHANGELOG.md"">rimraf's//changelog</a>.</em></p>//<blockquote>//<h1>v4.2</h1>//<ul>//<li>Brought back <code>glob</code> support, using the new and improved//glob v9</li>//</ul>//<h1>v4.1</h1>//<ul>//<li>Improved hybrid module with no need to look at the//<code>.default</code>//dangly bit. <code>.default</code> preserved as a reference to//<code>rimraf</code>//for compatibility with anyone who came to rely on it in v4.0.</li>//<li>Accept and ignore <code>-rf</code> and <code>-fr</code> arguments to//the bin.</li>//</ul>//<h1>v4.0</h1>//<ul>//<li>Remove <code>glob</code> dependency entirely. This library now only//accepts actual file and folder names to delete.</li>//<li>Accept array of paths or single path.</li>//<li>Windows performance and reliability improved.</li>//<li>All strategies separated into explicitly exported methods.</li>//<li>Drop support for Node.js below version 14</li>//<li>rewrite in TypeScript</li>//<li>ship CJS/ESM hybrid module</li>//<li>Error on unknown arguments to the bin. (Previously they were//silently ignored.)</li>//</ul>//<h1>v3.0</h1>//<ul>//<li>Add <code>--preserve-root</code> option to executable (default//true)</li>//<li>Drop support for Node.js below version 6</li>//</ul>//<h1>v2.7</h1>//<ul>//<li>Make <code>glob</code> an optional dependency</li>//</ul>//<h1>2.6</h1>//<ul>//<li>Retry on EBUSY on non-windows platforms as well</li>//<li>Make <code>rimraf.sync</code> 10000% more reliable on Windows</li>//</ul>//<h1>2.5</h1>//<ul>//<li>Handle Windows EPERM when lstat-ing read-only dirs</li>//<li>Add glob option to pass options to glob</li>//</ul>//<h1>2.4</h1>//<ul>//<li>Add EPERM to delay/retry loop</li>//<li>Add <code>disableGlob</code> option</li>//</ul>//<h1>2.3</h1>//<!-- raw HTML omitted -->//</blockquote>//<p>... (truncated)</p>//</details>//<details>//<summary>Commits</summary>//<ul>//<li><a//href=""https://github.com/isaacs/rimraf/commit/80aef8b8a1f49a68c7fc8db3cb8d281ecf2bdfaf""><code>80aef8b</code></a>//4.2.0</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/0d19a99c30eb341d67f9e572a4e603361714d7e3""><code>0d19a99</code></a>//changelog 420</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/f768f26d6a67e7b482340712bc285f5a1bb6e670""><code>f768f26</code></a>//treat paths as glob patterns when glob option set</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/5760716a45786d1d75f48d1fffca78d04a9f0f71""><code>5760716</code></a>//make rimraf cancelable with AbortSignals</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/417cdc7184b8f80bf1414aca599f543a6e8ffb76""><code>417cdc7</code></a>//4.1.4</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/bdfa60c7dc37ee795bfd5c04f56a3270962ef416""><code>bdfa60c</code></a>//update deps, export types properly for cjs module</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/20e37999eb78fe9122c1201832ea4a76476663b6""><code>20e3799</code></a>//use NodeJS.ErrnoException instead of FsError</li>//<li>See full diff in <a//href=""https://github.com/isaacs/rimraf/compare/v4.1.3...v4.2.0"">compare//view</a></li>//</ul>//</details>//<br />//////[![Dependabot compatibility//score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rimraf&package-manager=npm_and_yarn&previous-version=4.1.3&new-version=4.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)////Dependabot will resolve any conflicts with this PR as long as you don't//alter it yourself. You can also trigger a rebase manually by commenting//`@dependabot rebase`.////[//]: # (dependabot-automerge-start)//[//]: # (dependabot-automerge-end)////---////<details>//<summary>Dependabot commands and options</summary>//<br />////You can trigger Dependabot actions by commenting on this PR://- `@dependabot rebase` will rebase this PR//- `@dependabot recreate` will recreate this PR, overwriting any edits//that have been made to it//- `@dependabot merge` will merge this PR after your CI passes on it//- `@dependabot squash and merge` will squash and merge this PR after//your CI passes on it//- `@dependabot cancel merge` will cancel a previously requested merge//and block automerging//- `@dependabot reopen` will reopen this PR if it is closed//- `@dependabot close` will close this PR and stop Dependabot recreating//it. You can achieve the same result by closing it manually//- `@dependabot ignore this major version` will close this PR and stop//Dependabot creating any more for this major version (unless you reopen//the PR or upgrade to it yourself)//- `@dependabot ignore this minor version` will close this PR and stop//Dependabot creating any more for this minor version (unless you reopen//the PR or upgrade to it yourself)//- `@dependabot ignore this dependency` will close this PR and stop//Dependabot creating any more for this dependency (unless you reopen the//PR or upgrade to it yourself)//////</details>////Signed-off-by: dependabot[bot] <support@github.com>//Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",https://github.com/microsoft/accessibility-insights-action/commit/a55313314fb4732070b515237470e94627e9f332,238042767,microsoft/accessibility-insights-action,False,False,['#1574'],18
74,70b39a3b68060875833cfdaf5fa04c5f962fe848,Converted task command extension to new pattern (#2579)//* Converted task command extension to new pattern////* Fixed typo,https://github.com/microsoft/azure-pipelines-agent/commit/70b39a3b68060875833cfdaf5fa04c5f962fe848,53052789,microsoft/azure-pipelines-agent,False,False,['#2579'],19
75,7f9a43a39eae321af6a769006aeecc091cb1b3af,Converted plugin internal commands to use new pattern (#2573)//* Converted plugin internal commands to use new pattern////* Added back missing 'sealed',https://github.com/microsoft/azure-pipelines-agent/commit/7f9a43a39eae321af6a769006aeecc091cb1b3af,53052789,microsoft/azure-pipelines-agent,False,False,['#2573'],20
76,1be616802d32670607dd0888b5be022cceef0e38,Convert build commands to new pattern (#2568)//* Converted TelemetryCommandExtension to new pattern////* Missed one strings file////* Converted build commands to new pattern////* Added stack trace to flaky test to help debug it////* Fixed bad merge,https://github.com/microsoft/azure-pipelines-agent/commit/1be616802d32670607dd0888b5be022cceef0e38,53052789,microsoft/azure-pipelines-agent,False,False,['#2568'],21
77,45bf96f54193d40a82f0cbaf3a13f6a24789457e,Converted code coverage commands to new pattern (#2584),https://github.com/microsoft/azure-pipelines-agent/commit/45bf96f54193d40a82f0cbaf3a13f6a24789457e,53052789,microsoft/azure-pipelines-agent,False,False,['#2584'],22
78,b2620d6dfd586a957b2bf79ac1c7f82c83b954fb,Merge pull request #649 from cristianossd/deprecated-patterns//Remove deprecated list patterns command,https://github.com/microsoft/botbuilder-tools/commit/b2620d6dfd586a957b2bf79ac1c7f82c83b954fb,121688576,microsoft/botbuilder-tools,False,False,['#649'],23
80,69a6b60cab2a7e5c8b71ca31827827a7312dbf9a,ADL prettier plugin and `adl format` command (#511)//Added a new package prettier-plugin-adl providing adl support to prettier. Just installing the plugin next to prettier will automatically enable it for .adl files.////Added new adl format command.////Usage:////adl format **/*.adl////This will format all the files matching the pattern.,https://github.com/microsoft/typespec/commit/69a6b60cab2a7e5c8b71ca31827827a7312dbf9a,381857226,microsoft/typespec,False,False,['#511'],24
81,922003f8fbcd4af4d378cb372ba17f7544d5fb31,Remove deprecated list patterns command. It fixed #628,https://github.com/microsoft/botbuilder-tools/commit/922003f8fbcd4af4d378cb372ba17f7544d5fb31,121688576,microsoft/botbuilder-tools,False,False,['#628'],25
83,171ee8989a561c43cf099d1dd41d2de0c1a1654e,Scale - use the ls-files command to search a pattern in git rather than filter with node (#315)//* Making beachball getPackageInfos scale much better with a different git command////* Change files,https://github.com/microsoft/beachball/commit/171ee8989a561c43cf099d1dd41d2de0c1a1654e,193793350,microsoft/beachball,False,False,['#315'],26
88,968db6e7a12f080c24e021955c97758766eb7481,"Added Models, Parser Logic, Console App, Tests. (#12)//* Added Console App Conditions////* Added TB7 and TM7 models////* Removed test code////* Project name fix////* Fixed reference////* Implemented strategy pattern for parser////* Deleted unused project////* Added commands to command line tool////* Added arguments for console app////* Added models and test cases////* Added GetData Method////* Removed Unused Nuget Packages////* Added Models////* Added TM7 Models////* Added null check////* Handled Exception in Console Application////* Replaced preprocessing with regular expression////* Updated .net version////* Updated dependencies////* Handled case sensitivity////* Modified tm7 models////* Handled xxe attacks////Co-authored-by: Chaitanya Babu M G <chmg@microsoft.com>",https://github.com/microsoft/tm-file-parser/commit/968db6e7a12f080c24e021955c97758766eb7481,337742691,microsoft/tm-file-parser,False,False,['#12'],27
89,654c759b3ef2538220508ca390bf0e94c12e4d24,Added models and read logic (#10)//* Added Console App Conditions////* Added TB7 and TM7 models////* Removed test code////* Project name fix////* Fixed reference////* Implemented strategy pattern for parser////* Deleted unused project////* Added commands to command line tool////* Added arguments for console app////* Added models and test cases////* Added GetData Method////* Removed Unused Nuget Packages////* Added Models////* Added TM7 Models////* Added null check////* Handled Exception in Console Application////* Replaced preprocessing with regular expression////* Updated .net version////* Updated dependencies////* Handled case sensitivity////* Modified tm7 models////* Handled xxe attacks////Co-authored-by: Chaitanya Babu M G <chmg@microsoft.com>,https://github.com/microsoft/tm-file-parser/commit/654c759b3ef2538220508ca390bf0e94c12e4d24,337742691,microsoft/tm-file-parser,False,False,['#10'],28
98,ef32b2fea053970e32e530cea30239337f8975df,"Telemetry Refactor (#8253)//This PR refactors our RNW CLI telemetry code to be easier to consume, align with our requirements, and add a suite of unit and E2E tests.////**Note:** This PR does not *enable* telemetry collection yet - we still need to (re)-setup the service side to actually receive data, test the E2E pipeline and fix any bugs.////Closes #7312//Closes #7903////## Overview////All telemetry-related operations are driven by the `Telemetry` class, the `CodedError` type, and a small handful of helper functions exported from the `@react-native-windows/telemetry` package. Consumers of this package (`@react-native-windows/cli` and `react-native-windows-init`) are provided this abstraction layer and are therefore no longer expected to understand the intricacies of the underlying telemetry service (Application Insights).////CLI commands are now generally restructured to follow this pattern:////```ts//async function cliCommand(args) {//  // Telemetry setup//  Telemetry.setup();//  Telemetry.startCommand(...);////  let cliCommandError: Error | undefined;//  try {//    await cliCommandInternal(args);//  } catch (error) {//    // Report any error thrown//    Telemetry.trackException(error);//    cliCommandError= error;//  }////  // Telemetry cleanup//  TelemetryTest.endCommand(...);//}//```////With this setup, none of the code within internal function (`cliCommandInternal` here) has any notion of or connection to the telemetry system, other than throwing `CodedError` whenever it hits a known error in our code that we wish to capture. (Note that none of the functionality of any of our commands were changed in this PR, as they were already throwing `CodedError` s with appropriate extra data, where appropriate). Any unknown errors are also caught and recorded by the Telemetry.////In the end, we expect up to two events from every CLI command: `RNWCLI.Command` and potentially one error event: `RNWCLI.CodedError`. The `RNWCLI.Command` event is fired in the call to `endCommand` and contains everything we want to know from a run of our commands, success or failure. If an error was thrown, then we'll also have fired an additional event with the call to `trackException`, including error codes, stack traces, etc. The two events can be correlated to one another via the `sessionId` property.////Every effort has been made to make sure that we can easily extend and update our CLI commands *without* having to update the telemetry code. For example, the work to gather the command line arguments/options passed, to gather project info and environment setup, are all set up in a standardized way and sanitize such data of PII.",https://github.com/microsoft/react-native-windows/commit/ef32b2fea053970e32e530cea30239337f8975df,48009214,microsoft/react-native-windows,False,False,"['#8253', '#7312', '#7903']",29
99,cf6a1de6d6073a6135678189677db01c87dd2d9a,"Refactor: remote machine isolate OS commands phase 1 (#2376)//To support Windows node in remote mode, this PR adds a layer of commands (osCommands) to deal difference between Windows and Unix-like OS. To share code, ShellExecutor is added to enrich original SshClient class.////I will implement windows version commands in next phase.////This pattern can be expanded to Local or other platform in future, so I moved related code to common folder for sharing.",https://github.com/microsoft/nni/commit/cf6a1de6d6073a6135678189677db01c87dd2d9a,135673451,microsoft/nni,False,False,['#2376'],30
105,83fa9dacd7495dc2590c9510377e2db227bfbf84,"null tsid changes from pre tag to guid (#263)//* composite tsid and null styling////* CR fixed////* removed debugger////* null tsid changes from pre tag to guid////* more fixes to replace null guid with null string in places where we show alias////* test html page changes reverted////* nullformatting.html testcase////* CR fixes for showing null in tooltip splitby, groupname in legend and labels/axis in bar chart and scatter plot svgs////* d3 pattern is used in utils method instead of creating dom elements and appending each////* added fix for tooltip measure title null guid representation////* line height for null tsid styling added////Co-authored-by: darsney <matdar@microsoft.com>",https://github.com/microsoft/tsiclient/commit/83fa9dacd7495dc2590c9510377e2db227bfbf84,131655945,microsoft/tsiclient,False,False,['#263'],31
106,5dece6385c86095fc5b4df35e01f8fa097c49001,"4.8.0 PR to Dev for Release (#862)//* Update PowerSTIG to Add Checklist Accountability (#809)////* initial commit////* minor update////* updated based on feedback////* Update PowerSTIG to Parse/Apply MS Office 365 ProPlus Ver 2, Rel 1 (#812)////* initial commit 365ProPlus////* added changelog.md entry////* updated based on testing////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to remove old rule Ids in Hard Coded Framework (#810)////* removed dotNet ruleIds////* removed old hardcoded method for IE rule////* removed outlook 2013 old hardcoded////* removed 2012 MS smb1 old hardcoded rule////* converted defender old hardcoded to new////* converted 2012 UAC hardcoded rule////* updated old ntp hardcoded to new version////* removed half legal notices from old style Hardcoded////* removed old hard coded functions and static ruleID refences in Rule\Convert\functions.ps1////* removed old test////* updated based on peer testing////* update format////* updated to remove extra spaces from logon banner////* exclusionlist////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to move O365 Pro Plus log entries into Exclusion Rule list (#817)////* Moved log file entries to exclusion rule list////* Added Org file values////Co-authored-by: Jason Patton <japatton@microsoft.com>////* fixed checklist convertto hashtable function (#826)////* Update PowerSTIG to parse and apply RHEL 7.x V3R2 (#820)////* Migrate PowerSTIG to Azure DevOps for Build and Test (#603)////* update folder structure for azure dev ops////* dscresource unit test passing////* updated unit tests////* Unit test pathing update, all passing////* updated unit test to ensure regex data files are loaded////* updated .tests.header for unit\tools directory////* daily commit - Integrated test updates////* updated tests based on testing feedback////* optimized test header based on feedback////* updated build.psd1 case sensitive////* update build agent to windows-2019////* update build and azure yml files////* added hqrm tests to build yml and dependencies////* updated azure-pipelines.yml to include hqrm test////* updated HRQM display name////* updated test exclusion DSCResources////* intro logic to dynamically build requiredmodules////* updated yml to reflect master////* updated changelog.md////* Update azure-pipelines.yml////* rename sources to source (#605)////* Migrate PowerSTIG to Azure DevOps for Build, Test and Release Deployment (#606)////* updated powerstig for dynamic versioning////* updated gitversion to reflect base version////* updated if statement to adhere to style gls////* updated code to adhere to sgl hqrmtest////* updated code to adhere to sgl hqrm tests////* updated code to adhere to sgl hqrm////* update yml files to support CICD pipeline////* updated markdown function////* update change log structure////* updated spacing via PR feedback////* updated 2012R2 STIG after convert tests//reflected a minor delta////* update changelog.md////* Update PowerSTIG to parse and apply Vmware Vsphere 6.5 STIG V1R3 (#607)////* initial commit for vsphere////* updated based on test results////* updated based on vsphere module name////* updated module manifest to check build status////* updated newlines in raw xccdf////* updated newline////* updated newlies in rules////* updated tests////* updated processed Stig name////* updated vsphere schema////* updated composites////* updated spacing////* updated format////* Updated based on feedback////* update required parameter for composite////* updated service rule////* Added Integration DSCresrouce Vsphere Test////* reverted changes to test////* updated integration tests////* added unit tests////* added unit tests////* added unit tests////* updated formatting based on feedback////* updated based on feedback////* updated comments////* updated tests////* updated changelog.md////* trailing whitespace removed////* updated for HQRM tests////* updated based on pr feedback////* updated case////* update code based on PR feedback////* updated code based on PR feedback.////* updated tests based on PR feedback////* updated test based on PR feedback////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added Ubuntu nxPackage support////* nxPackage update////* added nxService resource script////* added nxFileLine Rule type and structure////* Regex addition to nxFileLine////* daily commit////* convertfactory update////* daily commit////* updated functions////* Unable to Import PowerSTIG 4.4.0 Due to cyclic dependency Error (#617)////* removed vmware.vspheredsc as a dependency because all of its required dependencies are loaded////* updated module load process for VMware modules////* updated build.yaml////* updated test////* Updated tests////* removed stop error action////* updated formating////* updated based on failing hqrm////* updated module  helper////* moved helper module////* updated location of module helper////* reduced vmware.VsphereDSC version////* updated build.yaml////* updated data file////* update module version schema////* updated based on testing////* Update changelog////* Update based on PR feedback////* daily commit////* daily commit////* JUnit commit////* NUnit commit////* daily commit////* daily commit////* update to nxFileLineRule////* ubuntu commit////* Update PowerSTIG to successfully parse/apply Microsoft IIS Server/Site STIG - Ver 1, Rel10 (#623)////* added IIS Server V1R10////* updated changelog and added iis site v1r10////* updated changelog////* removed N-2 STIGS////* Update PowerSTIG to successfully parse Microsoft SQL Server 2012 Database STIG - Ver 1, Rel 20 (#621)////* updated PowerSTIG to use SQL 2012 Database V1R20////* quotes in test////* updated tabs to spaces in sql raw xccdf////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* explicit Pester version due to 5.x (latest) test failures////* Update PowerSTIG to successfully parse/apply Windows Defender Antivirus STIG - V1R8 (#626)////* added new Windows Defender STIG V1R8 removed V1R6////* updated based on PR feedback:////* merged origin////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* initial commit (#640)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Microsoft IIS 10 Server/Site STIG - V1R1 (#641)////* added IIS 10.0 Server////* updated IIS 10 site stig////* updated based on tests////* updated based on tests////* updated log file////* added esxi 6.5 v1r4 (#637)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Windows Server 2012 DNS STIG - Ver 1, Rel 14 (#635)////* DNS Update commit////* removed DNS 1.12////* explicit version for DscResource.Test////* Update PowerSTIG to allow for workgroup level scans (#643)////* added community requested functionality to not require domain/forest parameters////* updated warning message////* reverted to old module dscresource.test////* Updated based on feedback////* updated sql 2016 instance 1.9 (#638)////* Update PowerSTIG to successfully parse/apply MS SQL Server 2012 Instance Ver. 1 Rel. 20 (#642)////* updated sql 2012 Instance V1R20////* updated Get-SqlTechnologyRole////* removed tabs////* added a new line to the end of xccdf////* update build to use dscresource.test 0.13.1////* updated code based on feedback////* Redhat commit////* daily commit////* daily commit////* daily commit////* daily commit////* daily commit////* updated regex////* updated rule to use hardcoded framework////* updated nxFileLine Rules////* updated processed xml based on banner rule////* updated exclusionlist////* updated TestRange function////* daily commit////* added RHEL composite////* updated RHEL composite and manifest////* Update PowerSTIG with new SkipRuleCategory Parameter to skip entire STIG Category/Severity Level(s) (#740)////* Fixed Missing OrgSettings for V-88203 - Win10 Client 1.19 and 1.21 (#672)////* fixed V-88203 to be org setting with Tenant Guid////* updated changelog.md////* fixed registry rule issue in sql 2016 (#671)////* Release Process Update: Ensure the nuget package uses explicit DSC Resource Module Versions (#670)////* dialy commit////* updated build task to leverage nuget////* added new line for Common.Data.ps1////* warning message to troubleshoot ADO pipeline////* updated package tasks////* updated release.module.build////* updated module////* updated release////* updated release////* updated release////* hard coded nuget.exe path////* fixed FilePath parameter////* dynamically detect nuget.exe////* nuget dynamic detection////* testing alternate nuget detection////* updated release to leverage get-command for nuget//detection////* updated code to replace only the task needed////* updated build funct. conform to style guideline////* updated New-NuspecFile funciton////* Update PowerSTIG to successfully parse/apply Windows 2012 R2 MS Version 2, Rev 19 (#679)////* added support for 2012 R2 V2R19////* added new line to xml////* added Server 2019 V1R5,removed V1R2 (#684)////* Update PowerSTIG to successfully parse/apply Windows 10 STIG - V1R23 (#682)////* Added Windows Client V1R23, Removed Windows CLient V1R19////* Added Windows Client V1R23, Removed Windows CLient V1R19////* removed random tabs////* removed tabs from converted////* updated based on feedback////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added support for 2016 V1R12 DC/MS (#685)////* Fixed: IIS Sever 10.0 STIG hardening rule V-100163 fails with error in Windows Server 2019 while using PowerSTIG 4.4.2 (#689)////* updated PowerSTIG to use AccessControlDsc 1.4.1////* updated composites with AccessControlDsc 1.4.1////* Update PowerSTIG to successfully parse/apply IIS 10.0 Site/Server V1R2 STIGs (#701)////* added support for IIS 10 Site/Server V1R2////* updated IISServer 10 V1R1 org settings file////* Revert ""updated IISServer 10 V1R1 org settings file""////This reverts commit 54d4e827de8b7cbb588b615a9aeecc48d015c34e.////* added Firefox V4R29 STIG, remove V4R27 (#700)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply SQL Server 2016 Instance V1R10 (#705)////* added SQL 2016 Instance V1R10, removed V1R8////* Updated changelog.md////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added dns V1R15 (#697)////squash/merge////* Update PowerSTIG To Use xDnsServer version 1.16.0.0 (#703)////* Updated xDnsServer version////* update module version////* updated changelog.md////* upgrade xWebadministration to 3.2.0 (#714)////* added IE 11 STIG - V1R19 (#708)////* Removed Windows Server 2016 DC/MS V1R9 from processed STIGs folder (#710)////* removed old 2016 DC/MS processed STIGs////* updated changelog.md////* Update PowerSTIG to successfully parse/apply IIS Site/Server V1R11 STIGs (#706)////* added support for IIS site/server V1R11////* removed old processed STIGs////* updated AuditPolicyDsc to 1.4.0.0 (#716)////* Allow application of applicable user rights assignments for non-domain and disconnected systems (#719)////* updated based on community feedback////* update based on feedback////* update powerstig to use SecurityPolicyDsc 2.10.0.0 (#717)////* updated PowerSTIG to use ComputerMgmtDsc to 8.4.0 (#721)////* Added SkipRuleCategory support to PowerSTIG////* updating test to be compat with new feature////* updated test configs with dynamic logic////* updated test logic to run get-dscresource once////* updated to disallow skipping doc/man rules////* updated integration dscresource tests////* PR Feedback updates////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>////* Increase Code Coverage of PowerSTIG to %75 (#742)////* updated tests for increased code cov part 1////* fixed test////* update changelog.md////* update changelog////* tes////* reverted change////* added VsphereNTPsetting tests////* updated checklist test////* updated DomainName Function tests////* updated powerstig xml tests////* added tests for Convertto-PowerSTIGxml and Compare////* updated tests////* updated webconfig property rule test////* updated to convert all STIGS////* removed redundant tests////* update only select one of each STIG////* added all office stigs////* reverted some tests////* updated tests:////* removed dependency for helper files////* updated tests////* removed example folder////* update based on feedback////* updated test////* Increase Code Coverage of PowerSTIG (#745)////* Fixed Missing OrgSettings for V-88203 - Win10 Client 1.19 and 1.21 (#672)////* fixed V-88203 to be org setting with Tenant Guid////* updated changelog.md////* fixed registry rule issue in sql 2016 (#671)////* Release Process Update: Ensure the nuget package uses explicit DSC Resource Module Versions (#670)////* dialy commit////* updated build task to leverage nuget////* added new line for Common.Data.ps1////* warning message to troubleshoot ADO pipeline////* updated package tasks////* updated release.module.build////* updated module////* updated release////* updated release////* updated release////* hard coded nuget.exe path////* fixed FilePath parameter////* dynamically detect nuget.exe////* nuget dynamic detection////* testing alternate nuget detection////* updated release to leverage get-command for nuget//detection////* updated code to replace only the task needed////* updated build funct. conform to style guideline////* updated New-NuspecFile funciton////* Update PowerSTIG to successfully parse/apply Windows 2012 R2 MS Version 2, Rev 19 (#679)////* added support for 2012 R2 V2R19////* added new line to xml////* added Server 2019 V1R5,removed V1R2 (#684)////* Update PowerSTIG to successfully parse/apply Windows 10 STIG - V1R23 (#682)////* Added Windows Client V1R23, Removed Windows CLient V1R19////* Added Windows Client V1R23, Removed Windows CLient V1R19////* removed random tabs////* removed tabs from converted////* updated based on feedback////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added support for 2016 V1R12 DC/MS (#685)////* Fixed: IIS Sever 10.0 STIG hardening rule V-100163 fails with error in Windows Server 2019 while using PowerSTIG 4.4.2 (#689)////* updated PowerSTIG to use AccessControlDsc 1.4.1////* updated composites with AccessControlDsc 1.4.1////* Update PowerSTIG to successfully parse/apply IIS 10.0 Site/Server V1R2 STIGs (#701)////* added support for IIS 10 Site/Server V1R2////* updated IISServer 10 V1R1 org settings file////* Revert ""updated IISServer 10 V1R1 org settings file""////This reverts commit 54d4e827de8b7cbb588b615a9aeecc48d015c34e.////* added Firefox V4R29 STIG, remove V4R27 (#700)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply SQL Server 2016 Instance V1R10 (#705)////* added SQL 2016 Instance V1R10, removed V1R8////* Updated changelog.md////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added dns V1R15 (#697)////squash/merge////* Update PowerSTIG To Use xDnsServer version 1.16.0.0 (#703)////* Updated xDnsServer version////* update module version////* updated changelog.md////* upgrade xWebadministration to 3.2.0 (#714)////* added IE 11 STIG - V1R19 (#708)////* Removed Windows Server 2016 DC/MS V1R9 from processed STIGs folder (#710)////* removed old 2016 DC/MS processed STIGs////* updated changelog.md////* Update PowerSTIG to successfully parse/apply IIS Site/Server V1R11 STIGs (#706)////* added support for IIS site/server V1R11////* removed old processed STIGs////* updated AuditPolicyDsc to 1.4.0.0 (#716)////* Allow application of applicable user rights assignments for non-domain and disconnected systems (#719)////* updated based on community feedback////* update based on feedback////* update powerstig to use SecurityPolicyDsc 2.10.0.0 (#717)////* updated PowerSTIG to use ComputerMgmtDsc to 8.4.0 (#721)////* Added SkipRuleCategory support to PowerSTIG////* updating test to be compat with new feature////* updated test configs with dynamic logic////* updated test logic to run get-dscresource once////* updated to disallow skipping doc/man rules////* updated integration dscresource tests////* testing code coverage////* updated registryrule test to include more coverage////* updated sqlscriptqueryrule tests////* updated setScript in Get-ShutdownOnError function////* updated permissionrule tests with add. test case////* updated permRule test to increase code coverage////* updated changelog////* updated test and code coverage threshold////* updated code coverage threshold to 81////* updated CC threshold to 80////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>////* removed old stig files after merge with 4.6.0////* updated data and log file based on testing////* updated regex data sections based on testing////* updated regex data////* updated regex patterns for does not contain////* added new line in redhat xccdf////* added new line to methods for HQRM////* created new nxFile rule type for banner rule////* update changelog////* updated processed xml////* updated to RHEL V3R1////* updated code to correct auditrule path////* daily commit////* updated nxFileLine to parse rule correctly////* added more rule support////* Update PowerSTIG to include LegacyId to assist in determining Legacy Vuln Ids with the new DISA standard. (#789)////* added support for legacyid in processed xml////* updated  change log////* updated tests for legacy id////* updated tests to reflect new base rule prop.////* Update PowerSTIG to fix LegacyId Logic (#792)////* updated legacyid logic////* updated changelog////* corrected changelog entry////* Update PowerSTIG to successfully parse/apply Microsoft Windows 2012 and 2012 R2 MS STIG - Ver 3, Rel 1 (#793)////* added support for Win2012R2 MS 3.1////* updated xccdf to have new line based on feedback////* updated cert changes from Eric and regen 2012R2 MS////* added support for 2012 DC 3.1 (#796)////* Update PowerSTIG to successfully parse/apply Microsoft Windows Server 2019 STIG - Ver 2, Rel 1 (#794)////* initial commit////* updated 2019////* updated 2019 MS v2 Stig////* updated to use correct convert flow////* update changelog.md////* fixed merge error////* added newline to raw xccdf////* added newline////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Microsoft Windows Defender Antivirus STIG - Ver 2, Rel 1 (#795)////* added support for defender v2 stig////* added newline to raw xccdf////* updated org settings////* removed n-2 processed////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Microsoft Windows 10 STIG - Ver 2, Rel 1 (#797)////* initial commit////* updated convert////* updated disa copy paste error////* Update PowerSTIG to successfully parse/apply Microsoft Windows Server 2016 STIG - Ver 2, Rel 1 (#798)////* merged 4.7.0 and added 2016 split stig////* added support for 2016 MS-DC v2r1 STIG////* updated default org settings file////* updated Get-StigRule to include legacyid support (#801)////* Update PowerSTIG to Parse/Apply Google Chrome V2R1 (#803)////* initial commit for Chrome////* fixed parse error////* fixed rule////* added support for chrome////* updated changelog////* updated key, removed trailing ""////* removed tabs////* updated resource////* updated export function////* updated////* updated based on testing////* Updated based on testing////* updated tests////* updated based on test failure////* updated based on testing////* updated based on testing////* added registry policy file to schema////* update based on feedback////* updated based on feedback////* Fixed 2018 V-205820 to be SecurityOptionRule (#805)////* updated changelog and filehash for release////* updated split rule logic from 4.8.0////* removed old RHEL STIG, fixed hard coded rules////* updated xccdf to have new line////* fixed 2019DC processed stig based on test feedback////* updated regex in testhelper to detect ""nx""////* removed ubuntu stig////* removed write-warning////* updated azure pipeline yml to publish CC s/f////* created nx rule type tests////* added nxFile dsc resource script to RHEL composite////* updated nxFile dsc resource script////* added nxFile to nxFileLine resource script////* added support for RHEL 7.x STIG 3.1////* updated changelog.md////* removed ubuntu support from RHEL branch////* added support for RHEL 3.2////* added SkipRuleSev to RHEL////* updated code and tests based on feedback.////* added skip rule resource to RHEL composite.////* updated test based on feedback////* added nxScript.skip for linux.////* updated test based on feedback////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>////* Update PowerSTIG to Parse/Apply Oracle JRE 8 Ver 2, Rel 1 (#843)////* Updated to parse and apply Oracle JRE8 v2.1////* Update PowerStig to parse and apply Oracle JRE 8 v2.1 STIG////* Update PowerSTIG to parse and apply Microsoft DotNet V2R1 STIG (#837)////* Update PowerSTIG to latest DotNet STIG////* Added new line at the end of file////Co-authored-by: Jason Patton <japatton@microsoft.com>//Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to parse and apply Mozilla Firefox V5R1 STIG (#836)////* Update to newest Firefox STIG////* Added new line at the end of file////Co-authored-by: Jason Patton <japatton@microsoft.com>//Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Updated WindowsDefenderDsc to 2.1.0 (#840)////* Parse/Apply Google Chrome Ver 2. 2 #841////* Parse/Apply Google Chrome Ver 2, Rel 2 #841////* Update PowerSTIG to Parse/Apply Google Chrome Ver 2, Rel 2////* Update PowerSTIG to Parse/Apply Google Chrome Ver 2, Rel 2////* Update PowerSTIG to Parse/Apply Google Chrome Ver 2, Rel 2////* Update PowerSTIG to Parse/Apply Google Chrome Ver 2, Rel 2////* Update PowerSTIG to Parse/Apply Google Chrome Ver 2, Rel 2////* Update PowerSTIG to Parse/Apply Google Chrome Ver 2, Rel 2////* Update PowerSTIG to parse and apply Ubuntu 18.04 LTS STIG - Ver 2, Rel 2 (#832)////* Migrate PowerSTIG to Azure DevOps for Build and Test (#603)////* update folder structure for azure dev ops////* dscresource unit test passing////* updated unit tests////* Unit test pathing update, all passing////* updated unit test to ensure regex data files are loaded////* updated .tests.header for unit\tools directory////* daily commit - Integrated test updates////* updated tests based on testing feedback////* optimized test header based on feedback////* updated build.psd1 case sensitive////* update build agent to windows-2019////* update build and azure yml files////* added hqrm tests to build yml and dependencies////* updated azure-pipelines.yml to include hqrm test////* updated HRQM display name////* updated test exclusion DSCResources////* intro logic to dynamically build requiredmodules////* updated yml to reflect master////* updated changelog.md////* Update azure-pipelines.yml////* rename sources to source (#605)////* Migrate PowerSTIG to Azure DevOps for Build, Test and Release Deployment (#606)////* updated powerstig for dynamic versioning////* updated gitversion to reflect base version////* updated if statement to adhere to style gls////* updated code to adhere to sgl hqrmtest////* updated code to adhere to sgl hqrm tests////* updated code to adhere to sgl hqrm////* update yml files to support CICD pipeline////* updated markdown function////* update change log structure////* updated spacing via PR feedback////* updated 2012R2 STIG after convert tests//reflected a minor delta////* update changelog.md////* Update PowerSTIG to parse and apply Vmware Vsphere 6.5 STIG V1R3 (#607)////* initial commit for vsphere////* updated based on test results////* updated based on vsphere module name////* updated module manifest to check build status////* updated newlines in raw xccdf////* updated newline////* updated newlies in rules////* updated tests////* updated processed Stig name////* updated vsphere schema////* updated composites////* updated spacing////* updated format////* Updated based on feedback////* update required parameter for composite////* updated service rule////* Added Integration DSCresrouce Vsphere Test////* reverted changes to test////* updated integration tests////* added unit tests////* added unit tests////* added unit tests////* updated formatting based on feedback////* updated based on feedback////* updated comments////* updated tests////* updated changelog.md////* trailing whitespace removed////* updated for HQRM tests////* updated based on pr feedback////* updated case////* update code based on PR feedback////* updated code based on PR feedback.////* updated tests based on PR feedback////* updated test based on PR feedback////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added Ubuntu nxPackage support////* nxPackage update////* added nxService resource script////* added nxFileLine Rule type and structure////* Regex addition to nxFileLine////* daily commit////* convertfactory update////* daily commit////* updated functions////* Unable to Import PowerSTIG 4.4.0 Due to cyclic dependency Error (#617)////* removed vmware.vspheredsc as a dependency because all of its required dependencies are loaded////* updated module load process for VMware modules////* updated build.yaml////* updated test////* Updated tests////* removed stop error action////* updated formating////* updated based on failing hqrm////* updated module  helper////* moved helper module////* updated location of module helper////* reduced vmware.VsphereDSC version////* updated build.yaml////* updated data file////* update module version schema////* updated based on testing////* Update changelog////* Update based on PR feedback////* daily commit////* daily commit////* JUnit commit////* NUnit commit////* daily commit////* daily commit////* update to nxFileLineRule////* ubuntu commit////* Update PowerSTIG to successfully parse/apply Microsoft IIS Server/Site STIG - Ver 1, Rel10 (#623)////* added IIS Server V1R10////* updated changelog and added iis site v1r10////* updated changelog////* removed N-2 STIGS////* Update PowerSTIG to successfully parse Microsoft SQL Server 2012 Database STIG - Ver 1, Rel 20 (#621)////* updated PowerSTIG to use SQL 2012 Database V1R20////* quotes in test////* updated tabs to spaces in sql raw xccdf////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* explicit Pester version due to 5.x (latest) test failures////* Update PowerSTIG to successfully parse/apply Windows Defender Antivirus STIG - V1R8 (#626)////* added new Windows Defender STIG V1R8 removed V1R6////* updated based on PR feedback:////* merged origin////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* initial commit (#640)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Microsoft IIS 10 Server/Site STIG - V1R1 (#641)////* added IIS 10.0 Server////* updated IIS 10 site stig////* updated based on tests////* updated based on tests////* updated log file////* added esxi 6.5 v1r4 (#637)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Windows Server 2012 DNS STIG - Ver 1, Rel 14 (#635)////* DNS Update commit////* removed DNS 1.12////* explicit version for DscResource.Test////* Update PowerSTIG to allow for workgroup level scans (#643)////* added community requested functionality to not require domain/forest parameters////* updated warning message////* reverted to old module dscresource.test////* Updated based on feedback////* updated sql 2016 instance 1.9 (#638)////* Update PowerSTIG to successfully parse/apply MS SQL Server 2012 Instance Ver. 1 Rel. 20 (#642)////* updated sql 2012 Instance V1R20////* updated Get-SqlTechnologyRole////* removed tabs////* added a new line to the end of xccdf////* update build to use dscresource.test 0.13.1////* updated code based on feedback////* Redhat commit////* daily commit////* daily commit////* daily commit////* daily commit////* daily commit////* updated regex////* updated rule to use hardcoded framework////* updated nxFileLine Rules////* updated processed xml based on banner rule////* updated exclusionlist////* updated TestRange function////* daily commit////* added RHEL composite////* updated RHEL composite and manifest////* Update PowerSTIG with new SkipRuleCategory Parameter to skip entire STIG Category/Severity Level(s) (#740)////* Fixed Missing OrgSettings for V-88203 - Win10 Client 1.19 and 1.21 (#672)////* fixed V-88203 to be org setting with Tenant Guid////* updated changelog.md////* fixed registry rule issue in sql 2016 (#671)////* Release Process Update: Ensure the nuget package uses explicit DSC Resource Module Versions (#670)////* dialy commit////* updated build task to leverage nuget////* added new line for Common.Data.ps1////* warning message to troubleshoot ADO pipeline////* updated package tasks////* updated release.module.build////* updated module////* updated release////* updated release////* updated release////* hard coded nuget.exe path////* fixed FilePath parameter////* dynamically detect nuget.exe////* nuget dynamic detection////* testing alternate nuget detection////* updated release to leverage get-command for nuget//detection////* updated code to replace only the task needed////* updated build funct. conform to style guideline////* updated New-NuspecFile funciton////* Update PowerSTIG to successfully parse/apply Windows 2012 R2 MS Version 2, Rev 19 (#679)////* added support for 2012 R2 V2R19////* added new line to xml////* added Server 2019 V1R5,removed V1R2 (#684)////* Update PowerSTIG to successfully parse/apply Windows 10 STIG - V1R23 (#682)////* Added Windows Client V1R23, Removed Windows CLient V1R19////* Added Windows Client V1R23, Removed Windows CLient V1R19////* removed random tabs////* removed tabs from converted////* updated based on feedback////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added support for 2016 V1R12 DC/MS (#685)////* Fixed: IIS Sever 10.0 STIG hardening rule V-100163 fails with error in Windows Server 2019 while using PowerSTIG 4.4.2 (#689)////* updated PowerSTIG to use AccessControlDsc 1.4.1////* updated composites with AccessControlDsc 1.4.1////* Update PowerSTIG to successfully parse/apply IIS 10.0 Site/Server V1R2 STIGs (#701)////* added support for IIS 10 Site/Server V1R2////* updated IISServer 10 V1R1 org settings file////* Revert ""updated IISServer 10 V1R1 org settings file""////This reverts commit 54d4e827de8b7cbb588b615a9aeecc48d015c34e.////* added Firefox V4R29 STIG, remove V4R27 (#700)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply SQL Server 2016 Instance V1R10 (#705)////* added SQL 2016 Instance V1R10, removed V1R8////* Updated changelog.md////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added dns V1R15 (#697)////squash/merge////* Update PowerSTIG To Use xDnsServer version 1.16.0.0 (#703)////* Updated xDnsServer version////* update module version////* updated changelog.md////* upgrade xWebadministration to 3.2.0 (#714)////* added IE 11 STIG - V1R19 (#708)////* Removed Windows Server 2016 DC/MS V1R9 from processed STIGs folder (#710)////* removed old 2016 DC/MS processed STIGs////* updated changelog.md////* Update PowerSTIG to successfully parse/apply IIS Site/Server V1R11 STIGs (#706)////* added support for IIS site/server V1R11////* removed old processed STIGs////* updated AuditPolicyDsc to 1.4.0.0 (#716)////* Allow application of applicable user rights assignments for non-domain and disconnected systems (#719)////* updated based on community feedback////* update based on feedback////* update powerstig to use SecurityPolicyDsc 2.10.0.0 (#717)////* updated PowerSTIG to use ComputerMgmtDsc to 8.4.0 (#721)////* Added SkipRuleCategory support to PowerSTIG////* updating test to be compat with new feature////* updated test configs with dynamic logic////* updated test logic to run get-dscresource once////* updated to disallow skipping doc/man rules////* updated integration dscresource tests////* PR Feedback updates////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>////* Increase Code Coverage of PowerSTIG to %75 (#742)////* updated tests for increased code cov part 1////* fixed test////* update changelog.md////* update changelog////* tes////* reverted change////* added VsphereNTPsetting tests////* updated checklist test////* updated DomainName Function tests////* updated powerstig xml tests////* added tests for Convertto-PowerSTIGxml and Compare////* updated tests////* updated webconfig property rule test////* updated to convert all STIGS////* removed redundant tests////* update only select one of each STIG////* added all office stigs////* reverted some tests////* updated tests:////* removed dependency for helper files////* updated tests////* removed example folder////* update based on feedback////* updated test////* Increase Code Coverage of PowerSTIG (#745)////* Fixed Missing OrgSettings for V-88203 - Win10 Client 1.19 and 1.21 (#672)////* fixed V-88203 to be org setting with Tenant Guid////* updated changelog.md////* fixed registry rule issue in sql 2016 (#671)////* Release Process Update: Ensure the nuget package uses explicit DSC Resource Module Versions (#670)////* dialy commit////* updated build task to leverage nuget////* added new line for Common.Data.ps1////* warning message to troubleshoot ADO pipeline////* updated package tasks////* updated release.module.build////* updated module////* updated release////* updated release////* updated release////* hard coded nuget.exe path////* fixed FilePath parameter////* dynamically detect nuget.exe////* nuget dynamic detection////* testing alternate nuget detection////* updated release to leverage get-command for nuget//detection////* updated code to replace only the task needed////* updated build funct. conform to style guideline////* updated New-NuspecFile funciton////* Update PowerSTIG to successfully parse/apply Windows 2012 R2 MS Version 2, Rev 19 (#679)////* added support for 2012 R2 V2R19////* added new line to xml////* added Server 2019 V1R5,removed V1R2 (#684)////* Update PowerSTIG to successfully parse/apply Windows 10 STIG - V1R23 (#682)////* Added Windows Client V1R23, Removed Windows CLient V1R19////* Added Windows Client V1R23, Removed Windows CLient V1R19////* removed random tabs////* removed tabs from converted////* updated based on feedback////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added support for 2016 V1R12 DC/MS (#685)////* Fixed: IIS Sever 10.0 STIG hardening rule V-100163 fails with error in Windows Server 2019 while using PowerSTIG 4.4.2 (#689)////* updated PowerSTIG to use AccessControlDsc 1.4.1////* updated composites with AccessControlDsc 1.4.1////* Update PowerSTIG to successfully parse/apply IIS 10.0 Site/Server V1R2 STIGs (#701)////* added support for IIS 10 Site/Server V1R2////* updated IISServer 10 V1R1 org settings file////* Revert ""updated IISServer 10 V1R1 org settings file""////This reverts commit 54d4e827de8b7cbb588b615a9aeecc48d015c34e.////* added Firefox V4R29 STIG, remove V4R27 (#700)////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply SQL Server 2016 Instance V1R10 (#705)////* added SQL 2016 Instance V1R10, removed V1R8////* Updated changelog.md////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* added dns V1R15 (#697)////squash/merge////* Update PowerSTIG To Use xDnsServer version 1.16.0.0 (#703)////* Updated xDnsServer version////* update module version////* updated changelog.md////* upgrade xWebadministration to 3.2.0 (#714)////* added IE 11 STIG - V1R19 (#708)////* Removed Windows Server 2016 DC/MS V1R9 from processed STIGs folder (#710)////* removed old 2016 DC/MS processed STIGs////* updated changelog.md////* Update PowerSTIG to successfully parse/apply IIS Site/Server V1R11 STIGs (#706)////* added support for IIS site/server V1R11////* removed old processed STIGs////* updated AuditPolicyDsc to 1.4.0.0 (#716)////* Allow application of applicable user rights assignments for non-domain and disconnected systems (#719)////* updated based on community feedback////* update based on feedback////* update powerstig to use SecurityPolicyDsc 2.10.0.0 (#717)////* updated PowerSTIG to use ComputerMgmtDsc to 8.4.0 (#721)////* Added SkipRuleCategory support to PowerSTIG////* updating test to be compat with new feature////* updated test configs with dynamic logic////* updated test logic to run get-dscresource once////* updated to disallow skipping doc/man rules////* updated integration dscresource tests////* testing code coverage////* updated registryrule test to include more coverage////* updated sqlscriptqueryrule tests////* updated setScript in Get-ShutdownOnError function////* updated permissionrule tests with add. test case////* updated permRule test to increase code coverage////* updated changelog////* updated test and code coverage threshold////* updated code coverage threshold to 81////* updated CC threshold to 80////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>////* removed old stig files after merge with 4.6.0////* updated data and log file based on testing////* updated regex data sections based on testing////* updated regex data////* updated regex patterns for does not contain////* added new line in redhat xccdf////* added new line to methods for HQRM////* created new nxFile rule type for banner rule////* update changelog////* updated processed xml////* updated to RHEL V3R1////* updated code to correct auditrule path////* daily commit////* updated nxFileLine to parse rule correctly////* added more rule support////* Update PowerSTIG to include LegacyId to assist in determining Legacy Vuln Ids with the new DISA standard. (#789)////* added support for legacyid in processed xml////* updated  change log////* updated tests for legacy id////* updated tests to reflect new base rule prop.////* Update PowerSTIG to fix LegacyId Logic (#792)////* updated legacyid logic////* updated changelog////* corrected changelog entry////* Update PowerSTIG to successfully parse/apply Microsoft Windows 2012 and 2012 R2 MS STIG - Ver 3, Rel 1 (#793)////* added support for Win2012R2 MS 3.1////* updated xccdf to have new line based on feedback////* updated cert changes from Eric and regen 2012R2 MS////* added support for 2012 DC 3.1 (#796)////* Update PowerSTIG to successfully parse/apply Microsoft Windows Server 2019 STIG - Ver 2, Rel 1 (#794)////* initial commit////* updated 2019////* updated 2019 MS v2 Stig////* updated to use correct convert flow////* update changelog.md////* fixed merge error////* added newline to raw xccdf////* added newline////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Microsoft Windows Defender Antivirus STIG - Ver 2, Rel 1 (#795)////* added support for defender v2 stig////* added newline to raw xccdf////* updated org settings////* removed n-2 processed////Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply Microsoft Windows 10 STIG - Ver 2, Rel 1 (#797)////* initial commit////* updated convert////* updated disa copy paste error////* Update PowerSTIG to successfully parse/apply Microsoft Windows Server 2016 STIG - Ver 2, Rel 1 (#798)////* merged 4.7.0 and added 2016 split stig////* added support for 2016 MS-DC v2r1 STIG////* updated default org settings file////* updated Get-StigRule to include legacyid support (#801)////* Update PowerSTIG to Parse/Apply Google Chrome V2R1 (#803)////* initial commit for Chrome////* fixed parse error////* fixed rule////* added support for chrome////* updated changelog////* updated key, removed trailing ""////* removed tabs////* updated resource////* updated export function////* updated////* updated based on testing////* Updated based on testing////* updated tests////* updated based on test failure////* updated based on testing////* updated based on testing////* added registry policy file to schema////* update based on feedback////* updated based on feedback////* Fixed 2018 V-205820 to be SecurityOptionRule (#805)////* updated changelog and filehash for release////* updated split rule logic from 4.8.0////* removed old RHEL STIG, fixed hard coded rules////* updated xccdf to have new line////* fixed 2019DC processed stig based on test feedback////* updated regex in testhelper to detect ""nx""////* removed ubuntu stig////* removed write-warning////* updated azure pipeline yml to publish CC s/f////* created nx rule type tests////* added nxFile dsc resource script to RHEL composite////* updated nxFile dsc resource script////* added nxFile to nxFileLine resource script////* added support for RHEL 7.x STIG 3.1////* updated changelog.md////* removed ubuntu support from RHEL branch////* Adding support for Ubuntu 18 V2R1////* daily commit////* daily commit////* daily commit (not working yet)////* nxFileLine commit////* nxPackage & nxService updates////* updated banner rule////* updated autologout.sh rules////* added default org settings////* fixed DoesNotContainPattern////* added SkipRuleSev param to RHEL/Ubuntu Composites////* HQRM keyword test failure correction////* updated banner rule////* updated org setting with correct syntax/value////* updated clientalivecountmax rule////* updated org setting to remove unwanted line////* added ubuntu 2.2 / removed ubuntu 2.1 STIG////* updated data file and added RHEL STIGs////* added rule to exclusion list and regen RHEL STIG////* updated changelog.md////* updated ubuntu nxfile line new line char.////* added new line to archive stig////* added skip resource script to linux composites////* added linux skip rule support////* updated ubuntu cipher rule////* added ubuntu org settings////* updated org settings based on feedback////* updated data based on test feedback////* updated STIG rules based on validation testing////* updated RHEL STIG automation////* update test to reflect DoesNotCont pattern change.////* updated RHEL STIG rule////* removed ubuntu pam.d rules due to sect. placement////* rm'd rules where text in file postion is required////* updated org setting doesnotcontainpattern////* updated rhel stig data////* updated spacing////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>////* Removal of RHEL RuleId V-204406 (#848)////* removed V-204406 from RHEL STIG////* updated changelog.md////* Update PowerSTIG Skip Rule to Accept Parent Rule (#849)////* added updated skip functionality////* added Changelog////Co-authored-by: Eric Jenkins <eric.jenkins@microsoft.com>//Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* Update PowerSTIG to successfully parse/apply VMware 6.5 ESXI V2R1 STIG////* Update PowerSTIG to successfully parse/apply VMware 6.5 ESXI V2R1 STIG////* Update PowerSTIG to successfully parse/apply VMware 6.5 ESXI V2R1 STIG////* Update PowerSTIG to successfully parse/apply VMware 6.5 ESXI V2R1 STIG////* Update CHANGELOG.md////* Update README.md////* Minor changes per request////* single adjustment per request////* Update PowerSTIG to successfully parse/apply MS Edge V1R1 (#861)////* added support for MS Edge V1R1////* updated hardcoded to use RegistryPolicyFile////* updated extensioninstallblocklist rule////* updated rules based on manual checklist testing////* added test to support new composite////* Update PowerSTIG to successfully parse/apply Microsoft SQL Server 2016 Instance Version 2; Release 2 (#858)////* Update PowerSTIG for SQL 2016 Instance////* Update CHANGELOG.md////* removed tab chars////Co-authored-by: Jason Patton <japatton@microsoft.com>//Co-authored-by: Brian Wilhite <bcwilhite@live.com>////* updated changelog and filehash for release////Co-authored-by: Eric Jenkins <erjenkin@microsoft.com>//Co-authored-by: Jason Patton <46757047+japatton@users.noreply.github.com>//Co-authored-by: Jason Patton <japatton@microsoft.com>//Co-authored-by: hinderjd <hinderjd@gmail.com>//Co-authored-by: Eric Jenkins <eric.jenkins@microsoft.com>",https://github.com/microsoft/PowerStig/commit/5dece6385c86095fc5b4df35e01f8fa097c49001,132100529,microsoft/PowerStig,False,False,"['#862', '#809', '#812', '#810', '#817', '#826', '#820', '#603', '#605', '#606', '#607', '#617', '#623', '#621', '#626', '#640', '#641', '#637', '#635', '#643', '#638', '#642', '#740', '#672', '#671', '#670', '#679', '#684', '#682', '#685', '#689', '#701', '#700', '#705', '#697', '#703', '#714', '#708', '#710', '#706', '#716', '#719', '#717', '#721', '#742', '#745', '#672', '#671', '#670', '#679', '#684', '#682', '#685', '#689', '#701', '#700', '#705', '#697', '#703', '#714', '#708', '#710', '#706', '#716', '#719', '#717', '#721', '#789', '#792', '#793', '#796', '#794', '#795', '#797', '#798', '#801', '#803', '#805', '#843', '#837', '#836', '#840', '#841', '#841', '#832', '#603', '#605', '#606', '#607', '#617', '#623', '#621', '#626', '#640', '#641', '#637', '#635', '#643', '#638', '#642', '#740', '#672', '#671', '#670', '#679', '#684', '#682', '#685', '#689', '#701', '#700', '#705', '#697', '#703', '#714', '#708', '#710', '#706', '#716', '#719', '#717', '#721', '#742', '#745', '#672', '#671', '#670', '#679', '#684', '#682', '#685', '#689', '#701', '#700', '#705', '#697', '#703', '#714', '#708', '#710', '#706', '#716', '#719', '#717', '#721', '#789', '#792', '#793', '#796', '#794', '#795', '#797', '#798', '#801', '#803', '#805', '#848', '#849', '#861', '#858']",32
107,70a1d50e886518925b8bc05f36752a2db8c0d25e,"Chrimc/form (#394)//* Intermediate check-in before inverting//template/prop loops.////* Working generator with incomplete templates.////* Basic .lu files working.////* Update to generate single .lu file.////* Fix cli issues.////* Fix CLI issues with template resources.////* Clean up lint warnings.////* Fix lint errors.////* Generate composite .lu////* Add dialog and multi-language support.////* shortcut to debug////* Add per-locale .lg file.////* Update debug config to use temp directory.//Generate multilingual .lg file.////* Update to include schema prefix on names.////* Fix bugs in .lg genertion.////* try help////* help and cancel////* Copy schema to output directory.////* help and cancel version 1////* separate help.lu////* several fixes////* remove help enum////* reset launch.json////* remove empty line////* Add the ability to copy library dialog files.////* Add ability to specify schema and multiple//templates.////* Rename resources.//Support multiple templates.//Add *PROPN** pattern.////* Fix bug in striingify call.////* Generate schema.main.dialog and update config.////* Update templates to newest format.////* Update templates to match names.////* add .dialogs for several basic rules////* Update templates to use $ and add begindialog as a hack to work around ada//ptive issue.////* add .dialogs for several basic rules////* fix comments////* merge from origin////* small changes////* Add formCopy cmd file.////* Adjust for bug in templates.////* fix path////* Version 1 of contact.form.dialog////* Same info is modeled for both Home and Work.//* List of state abbreviations and their spelled-out names are specified in the separate state.en-us.lu, and used in the $mappings specifications.//* Latitude and Longitude should be auto-filled if the corresponding address are filled.//* Validation patterns are specified for zip codes and phone numbers.////* Fixed contact.form.dialog and added activity.form.dialog////* contact.form.dialog//  - Fixed spelling//  - Use phonenumber prebuilt entity type//* activity.form.dialog: the second scenario from Darren ""An employee working for a customer wants to add a quick update to a customer record after a call. This update will then be available for other people working with that customer to see"".////* Added opportunity.form.dialog////For Darren's scenario ""An employee working with a customer has had a meeting and needs to create a new opportunity.""////* change names////* Revert ""change names""////This reverts commit 64ffaff4559cd4f5b10e39eb611b5b258e9ba8ea.////* change names////* basic work done for ask, set and help////* cancel confirmation////* cancel confirmation done, unexpected property set confirmation in progress////* improve unexpected property test////* Version 1 of contact.form.dialog////* Same info is modeled for both Home and Work.//* List of state abbreviations and their spelled-out names are specified in the separate state.en-us.lu, and used in the $mappings specifications.//* Latitude and Longitude should be auto-filled if the corresponding address are filled.//* Validation patterns are specified for zip codes and phone numbers.////* Fixed contact.form.dialog and added activity.form.dialog////* contact.form.dialog//  - Fixed spelling//  - Use phonenumber prebuilt entity type//* activity.form.dialog: the second scenario from Darren ""An employee working for a customer wants to add a quick update to a customer record after a call. This update will then be available for other people working with that customer to see"".////* Added opportunity.form.dialog////For Darren's scenario ""An employee working with a customer has had a meeting and needs to create a new opportunity.""////* rename state.lu////* prebuilt lu templates////* remove choose entity////we only have chooseProperty and clarifyEntity////* Switch to event expected.////* Update templates for latest runtime and add ask for//multiple properties.////* Add **NAMES/**NAME** and generate property names.////* fix unexpected property confirmation usage////* change unexpected property action from ask to sendactivity////* all done confirmation////* Update names to support chooseProperty.////* Check-in bread value hack.////* Fix template bug around clarify.////* Update templates to use names and start numbers.////* complete the new forms////* contextual help////* activity schema working fine////* add meta info to opportunity schema////* opportunity semi-working////cannot use phonenumber;//properties not in required also got asked;//in stringset, default value is not expression, cannot get the value for @email////* three schemas working////sandwich, activity, opportunity////* contact schema working////Adding welcome message in beginDialog,//Add help message for non-enum properties,//All three CDS schemas working////* Sync changes for demo.////* Before adding mapping templates////* Getting close to E2e.////* Largely working with some template debugging.////* Update the readme.////* Update to latest expression and lg packages.//Support app schema.////* Update standard schema.////* Finish merge.////* Show metaschema.////* Fix readme typo.////* several changes (#299)////* several changes////(1) remove unused old files;//(2) change incorrect file names;//(3) add string ask templates;//(4) remove meta properties from schemas;//(5) fix an error in calculating optional properties////* fix help property bug////* Add string templates.////* a few changes (#318)////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* Add template for not understood.////* Connect to bf cli.////* Add basic role support.////* Nigao/newtemplate (#321)////* a few changes////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* autohelp for new templates////* Update to use @{} everywhere and remove auto-help//since it required post-ask action.////* Nigao/newtemplate (#323)////* a few changes////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* autohelp for new templates////* add $requires, and datetime entity sets////* add all stringSet for prebuilt entities explicitly////* change prebuilt-entity.lu.lg files////* Switch to using a triggerIntent instead of none for entities.//Cleanup filename expressions.////* Fix bug in status.////* Switch from dialog:form to dialog:generate////* Add top-level documentation.////* Update tests to use dialog:generate.////* Rename tests to generator.////* Fixing linting errors////* Generate confirmation card.////* Fix reference regex ot not match structured lg.////* Minor bug fixes.////* Update to allow multi-lingual fallback.////* Change from $type to $kind.//Change unionType to union.//Add documentation.////* Move from $type to $kind.////* Enable schema tests.////* Switch to $kind and add dynamic .schema.////* Update string to new help pattern.////* Merge with master and support $kind.////* Address review comments.",https://github.com/microsoft/botframework-cli/commit/70a1d50e886518925b8bc05f36752a2db8c0d25e,187076818,microsoft/botframework-cli,False,False,"['#394', '#299', '#318', '#321', '#323']",33
108,8b4d34080c99c70e8eee5f32032307b7c07e66b3,"Expand TestBot + Add tests (#1022)//* port over CoreBot dialogs into testBot//write unit tests for testbot using botbuilder-testing////* update package log////* update////* add testbot to package update stuff////* adjust package////* restore mybot url and class////* updates per comments////* add more tests////* add all tests for parity with c#////* test outcome of booking dialog////* new tests for dateresolver////* add spoken output to booking dialog////* remove unused paramter////* Update mainDialog constructor, add inputhint, replace dialog, airpot not found warning////* Fix unsupportedCities array length check////* Refactor luisHelper / FlightBookingRecognizer, update tests////* Update test////* Refactoring of MainDialog, flightBookingRecognizer and tests////* Add luis config check in mainDialog actStep function////* Renamed test files from tests.js to test.js to match naming pattern in botbuilder.//Renamed some test cases to use the same capitalization as bot builder.//Added empty .env file.//Added general .gitignore.//Added TSConfig////* Renamed test////* Updated instantiation of DialogTestClient to match the latest changes from master.//Removed unnecesary tests for creating DialogTestClient instance.//Renamed dialog variables as sut (systemt under test) to match the documentation.//Fixed some tests (need to fix others)////* Updated MainDialog to handle LUIS intents, show warnings for unsupported cities and work the same as the dotnet one.//Added helper methods to extract LUIS values for composite entities and datetime to FlightBookingRecognizer.//Added luis result json captures to testdata so we can write tests for entity extraction based on serialized results.//Updated BookingDialog to use proper text, speak and inputhints.//Updated DateResolverDialog to use proper text, speak and inputhints.//Removed onBeginDialog from cancelAndHelpDialog to avoid handling interruptions on turn 0.//Removed myBot.////* Formatting and comments in MaindDialog//Updated deployment template to point to messages instead of mybot.////* trying to fix the build by removing testbo from package.json////* reverted changes////* Updated bookingDialog logic and test data to match dotnet.////* updated tests to use testCases.map instead of for loop.//updated dateResolveDialog tests to use strictEquals.////* Touched file to kick off build.////* Changed flightBookingRecognizer so it caches the instance of the recognizer rather than creating one on each call.//Implemented 3 of for test scenarios for mainDialog (with mock dialogs and mock recognizer).//deleted unused mainDialogTestCases.//Updated other tests to use => instead of function().//Changed the oreder of constructor params for mainDialog.////* Implemented showWarningMessage tests for MainDialog.//Added placeholder for cancelAndHelpDialog.tests.////* Implemented CancelAndHelpDialog tests.////* Moved dialog tests into a dialogs folder.////* Implemented DialogAndWelcomeBot tests////* Added some comments to the code////* Updated comments.////* Updated confirm prompt to say ""is this correct""//Moved MockBookingDialogWithPrompt outside the test case for clarity.",https://github.com/microsoft/botbuilder-js/commit/8b4d34080c99c70e8eee5f32032307b7c07e66b3,117021493,microsoft/botbuilder-js,False,False,['#1022'],34
109,455e79e8adc6125112fffd10b34f39627bd011df,"Chrimc/form (#384)//* Intermediate check-in before inverting//template/prop loops.////* Working generator with incomplete templates.////* Basic .lu files working.////* Update to generate single .lu file.////* Fix cli issues.////* Fix CLI issues with template resources.////* Clean up lint warnings.////* Fix lint errors.////* Generate composite .lu////* Add dialog and multi-language support.////* shortcut to debug////* Add per-locale .lg file.////* Update debug config to use temp directory.//Generate multilingual .lg file.////* Update to include schema prefix on names.////* Fix bugs in .lg genertion.////* try help////* help and cancel////* Copy schema to output directory.////* help and cancel version 1////* separate help.lu////* several fixes////* remove help enum////* reset launch.json////* remove empty line////* Add the ability to copy library dialog files.////* Add ability to specify schema and multiple//templates.////* Rename resources.//Support multiple templates.//Add *PROPN** pattern.////* Fix bug in striingify call.////* Generate schema.main.dialog and update config.////* Update templates to newest format.////* Update templates to match names.////* add .dialogs for several basic rules////* Update templates to use $ and add begindialog as a hack to work around ada//ptive issue.////* add .dialogs for several basic rules////* fix comments////* merge from origin////* small changes////* Add formCopy cmd file.////* Adjust for bug in templates.////* fix path////* Version 1 of contact.form.dialog////* Same info is modeled for both Home and Work.//* List of state abbreviations and their spelled-out names are specified in the separate state.en-us.lu, and used in the $mappings specifications.//* Latitude and Longitude should be auto-filled if the corresponding address are filled.//* Validation patterns are specified for zip codes and phone numbers.////* Fixed contact.form.dialog and added activity.form.dialog////* contact.form.dialog//  - Fixed spelling//  - Use phonenumber prebuilt entity type//* activity.form.dialog: the second scenario from Darren ""An employee working for a customer wants to add a quick update to a customer record after a call. This update will then be available for other people working with that customer to see"".////* Added opportunity.form.dialog////For Darren's scenario ""An employee working with a customer has had a meeting and needs to create a new opportunity.""////* change names////* Revert ""change names""////This reverts commit 64ffaff4559cd4f5b10e39eb611b5b258e9ba8ea.////* change names////* basic work done for ask, set and help////* cancel confirmation////* cancel confirmation done, unexpected property set confirmation in progress////* improve unexpected property test////* Version 1 of contact.form.dialog////* Same info is modeled for both Home and Work.//* List of state abbreviations and their spelled-out names are specified in the separate state.en-us.lu, and used in the $mappings specifications.//* Latitude and Longitude should be auto-filled if the corresponding address are filled.//* Validation patterns are specified for zip codes and phone numbers.////* Fixed contact.form.dialog and added activity.form.dialog////* contact.form.dialog//  - Fixed spelling//  - Use phonenumber prebuilt entity type//* activity.form.dialog: the second scenario from Darren ""An employee working for a customer wants to add a quick update to a customer record after a call. This update will then be available for other people working with that customer to see"".////* Added opportunity.form.dialog////For Darren's scenario ""An employee working with a customer has had a meeting and needs to create a new opportunity.""////* rename state.lu////* prebuilt lu templates////* remove choose entity////we only have chooseProperty and clarifyEntity////* Switch to event expected.////* Update templates for latest runtime and add ask for//multiple properties.////* Add **NAMES/**NAME** and generate property names.////* fix unexpected property confirmation usage////* change unexpected property action from ask to sendactivity////* all done confirmation////* Update names to support chooseProperty.////* Check-in bread value hack.////* Fix template bug around clarify.////* Update templates to use names and start numbers.////* complete the new forms////* contextual help////* activity schema working fine////* add meta info to opportunity schema////* opportunity semi-working////cannot use phonenumber;//properties not in required also got asked;//in stringset, default value is not expression, cannot get the value for @email////* three schemas working////sandwich, activity, opportunity////* contact schema working////Adding welcome message in beginDialog,//Add help message for non-enum properties,//All three CDS schemas working////* Sync changes for demo.////* Before adding mapping templates////* Getting close to E2e.////* Largely working with some template debugging.////* Update the readme.////* Update to latest expression and lg packages.//Support app schema.////* Update standard schema.////* Finish merge.////* Show metaschema.////* Fix readme typo.////* several changes (#299)////* several changes////(1) remove unused old files;//(2) change incorrect file names;//(3) add string ask templates;//(4) remove meta properties from schemas;//(5) fix an error in calculating optional properties////* fix help property bug////* Add string templates.////* a few changes (#318)////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* Add template for not understood.////* Connect to bf cli.////* Add basic role support.////* Nigao/newtemplate (#321)////* a few changes////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* autohelp for new templates////* Update to use @{} everywhere and remove auto-help//since it required post-ask action.////* Nigao/newtemplate (#323)////* a few changes////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* autohelp for new templates////* add $requires, and datetime entity sets////* add all stringSet for prebuilt entities explicitly////* change prebuilt-entity.lu.lg files////* Switch to using a triggerIntent instead of none for entities.//Cleanup filename expressions.////* Fix bug in status.////* Switch from dialog:form to dialog:generate////* Add top-level documentation.////* Update tests to use dialog:generate.////* Rename tests to generator.////* Fixing linting errors////* Generate confirmation card.////* Fix reference regex ot not match structured lg.////* Minor bug fixes.////* Update to allow multi-lingual fallback.",https://github.com/microsoft/botframework-cli/commit/455e79e8adc6125112fffd10b34f39627bd011df,187076818,microsoft/botframework-cli,False,False,"['#384', '#299', '#318', '#321', '#323']",35
110,91881c3be6bf3888f97f86ff7d9b314871bf5d5b,"Initial check-in of dialog generation. (#353)//* Intermediate check-in before inverting//template/prop loops.////* Working generator with incomplete templates.////* Basic .lu files working.////* Update to generate single .lu file.////* Fix cli issues.////* Fix CLI issues with template resources.////* Clean up lint warnings.////* Fix lint errors.////* Generate composite .lu////* Add dialog and multi-language support.////* shortcut to debug////* Add per-locale .lg file.////* Update debug config to use temp directory.//Generate multilingual .lg file.////* Update to include schema prefix on names.////* Fix bugs in .lg genertion.////* try help////* help and cancel////* Copy schema to output directory.////* help and cancel version 1////* separate help.lu////* several fixes////* remove help enum////* reset launch.json////* remove empty line////* Add the ability to copy library dialog files.////* Add ability to specify schema and multiple//templates.////* Rename resources.//Support multiple templates.//Add *PROPN** pattern.////* Fix bug in striingify call.////* Generate schema.main.dialog and update config.////* Update templates to newest format.////* Update templates to match names.////* add .dialogs for several basic rules////* Update templates to use $ and add begindialog as a hack to work around ada//ptive issue.////* add .dialogs for several basic rules////* fix comments////* merge from origin////* small changes////* Add formCopy cmd file.////* Adjust for bug in templates.////* fix path////* Version 1 of contact.form.dialog////* Same info is modeled for both Home and Work.//* List of state abbreviations and their spelled-out names are specified in the separate state.en-us.lu, and used in the $mappings specifications.//* Latitude and Longitude should be auto-filled if the corresponding address are filled.//* Validation patterns are specified for zip codes and phone numbers.////* Fixed contact.form.dialog and added activity.form.dialog////* contact.form.dialog//  - Fixed spelling//  - Use phonenumber prebuilt entity type//* activity.form.dialog: the second scenario from Darren ""An employee working for a customer wants to add a quick update to a customer record after a call. This update will then be available for other people working with that customer to see"".////* Added opportunity.form.dialog////For Darren's scenario ""An employee working with a customer has had a meeting and needs to create a new opportunity.""////* change names////* Revert ""change names""////This reverts commit 64ffaff4559cd4f5b10e39eb611b5b258e9ba8ea.////* change names////* basic work done for ask, set and help////* cancel confirmation////* cancel confirmation done, unexpected property set confirmation in progress////* improve unexpected property test////* Version 1 of contact.form.dialog////* Same info is modeled for both Home and Work.//* List of state abbreviations and their spelled-out names are specified in the separate state.en-us.lu, and used in the $mappings specifications.//* Latitude and Longitude should be auto-filled if the corresponding address are filled.//* Validation patterns are specified for zip codes and phone numbers.////* Fixed contact.form.dialog and added activity.form.dialog////* contact.form.dialog//  - Fixed spelling//  - Use phonenumber prebuilt entity type//* activity.form.dialog: the second scenario from Darren ""An employee working for a customer wants to add a quick update to a customer record after a call. This update will then be available for other people working with that customer to see"".////* Added opportunity.form.dialog////For Darren's scenario ""An employee working with a customer has had a meeting and needs to create a new opportunity.""////* rename state.lu////* prebuilt lu templates////* remove choose entity////we only have chooseProperty and clarifyEntity////* Switch to event expected.////* Update templates for latest runtime and add ask for//multiple properties.////* Add **NAMES/**NAME** and generate property names.////* fix unexpected property confirmation usage////* change unexpected property action from ask to sendactivity////* all done confirmation////* Update names to support chooseProperty.////* Check-in bread value hack.////* Fix template bug around clarify.////* Update templates to use names and start numbers.////* complete the new forms////* contextual help////* activity schema working fine////* add meta info to opportunity schema////* opportunity semi-working////cannot use phonenumber;//properties not in required also got asked;//in stringset, default value is not expression, cannot get the value for @email////* three schemas working////sandwich, activity, opportunity////* contact schema working////Adding welcome message in beginDialog,//Add help message for non-enum properties,//All three CDS schemas working////* Sync changes for demo.////* Before adding mapping templates////* Getting close to E2e.////* Largely working with some template debugging.////* Update the readme.////* Update to latest expression and lg packages.//Support app schema.////* Update standard schema.////* Finish merge.////* Show metaschema.////* Fix readme typo.////* several changes (#299)////* several changes////(1) remove unused old files;//(2) change incorrect file names;//(3) add string ask templates;//(4) remove meta properties from schemas;//(5) fix an error in calculating optional properties////* fix help property bug////* Add string templates.////* a few changes (#318)////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* Add template for not understood.////* Connect to bf cli.////* Add basic role support.////* Nigao/newtemplate (#321)////* a few changes////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* autohelp for new templates////* Update to use @{} everywhere and remove auto-help//since it required post-ask action.////* Nigao/newtemplate (#323)////* a few changes////(1) fix the cancel.lu bug//(2) add datetime.lu//(2) stringSetdatetime.dialog.lg////* autohelp for new templates////* add $requires, and datetime entity sets////* add all stringSet for prebuilt entities explicitly////* change prebuilt-entity.lu.lg files////* Switch to using a triggerIntent instead of none for entities.//Cleanup filename expressions.////* Fix bug in status.////* Switch from dialog:form to dialog:generate////* Add top-level documentation.////* Update tests to use dialog:generate.////* Rename tests to generator.////* Fixing linting errors////* Generate confirmation card.////* Fix reference regex ot not match structured lg.",https://github.com/microsoft/botframework-cli/commit/91881c3be6bf3888f97f86ff7d9b314871bf5d5b,187076818,microsoft/botframework-cli,False,False,"['#353', '#299', '#318', '#321', '#323']",36
111,e741e6c744f29fc8de66a3dc159bcea6c1bb8eeb,"3.0.0 release (#340)//* Convert module update and processed files to support Kerberos policies (#219)////* formatting////* updated match////* updated archive and parsed file////* formatted files////* added bullet list////* rem space////* added test data////* updated V-2376-80////* formatting////* fixed test data////* Adding Exception, Skip Rules, and Skip Types to Integration Tests#201 (#221)////* Upgraded integration tests////* Updated Firewall Integration Test////* Updated Windows DNS Server tests////* Updated SQL Integration tests////* Updated Office tests////* Updated Oracle and Firefox Integration Tests////* Updated Browser, Firefox, SQLServer integration tests////* removed IISServer_Config mof////* updated IIS schema and Integration Tests////* Added multi skip rules to integration tests and fixed formatting////* Updated changelog.md////* Added exception testing to integration tests////* updated changelog.md////* updated formatting////* updated spacing////* Removed skiptype tests from configs that weren't required////* Updated changelog.md for new standard////* updated based on PR comments////* updated CamelCase throughout////* Refactor Registry RulesV2 resolves #160 (#193)////* Updates for Office////* Fix for Office Stigs////* Removed debug line////* Added new rules for Office////* update for fixes////* update for data clean up////* update for office data clean up////* update for core Data cleanup////* update for code clean up////* update for code clean up////* updated data.office ValueName Twelve Match////* Updates to fix registry rule integration tests////* Added missing regex for office////* Update for select in registrypath////* Update Outlook 2013 Stig////* Update for office registry value type////* Updated RegEx for data.office////* cleaned up data.office parsing rules////* Updated data.office regex final////* Updated test////* Updates for unit test and new registry expression method////* Updates from group review////* Additional updates from team review////* Added unit tests////* Added expression file instructions and removed write-debug statements////* Formatting updates////* Fixed name change on variable////* Update instructions and changelog////* Update change log with link to github issue////* Removed reference to release number////* small fixes////* updated based on PR comments, recreating branch due to merge issues////* Further consolidation of integration tests, replaced % alias////* Removed empty PowerSTIG folder////* fixed rule hash table////* updated IisSite Schema to include WindowsFeature DSC resource////* Changed alias  to////* Updated oracleJRE.config////* removed white space////* shose#186SQLServer2016InstanceV1R3 (#235)////* Updated to include more robust SQL parsing for SQL Server 2016////* Added SqlServer 2016 - New SecurityOption rules////* Updates to improve SQL query parsing for SQL Server 2016.////* Updated Get, Test, Set functions to leverage new SQL parsing routine.////* More updates to Get, Test, Set scriptlets for 2016////* Added regex for sa account rule subtype////* registry rule fix////* fix formatting////* Committing new SQL Server processed files.////* Updated tests for SQL 2016, renamed Module Param////* Convert module update and processed files to support Kerberos policies (#219)////* formatting////* updated match////* updated archive and parsed file////* formatted files////* added bullet list////* rem space////* added test data////* updated V-2376-80////* formatting////* fixed test data////* rename var////* Updated to include more robust SQL parsing for SQL Server 2016////* Added SqlServer 2016 - New SecurityOption rules////* Updates to improve SQL query parsing for SQL Server 2016.////* Updated Get, Test, Set functions to leverage new SQL parsing routine.////* More updates to Get, Test, Set scriptlets for 2016////* Added regex for sa account rule subtype////* registry rule fix////* Committing new SQL Server processed files.////* Updated tests for SQL 2016, renamed Module Param////* Updated changelog with new STIG////* Updated SQL Script Query Rule Audit functions////* Updated SQL Server 2016 Audit Get/Test functions////* Upated SqlScriptQueryRule Match////* Updated SQLScriptQueryRule Audit functions////* Completed SQLScriptQueryRule Audit SetScript////* Updated match statements////* Updated Split-BenchmarkId to recognize new SQL Server 2016 format////* Updated SqlServer-2012-Instance-1.17 based upon new code processing////* Update SecurityOption rule conversion w/o Xccdf modifcations////* Update range conversion match for SQL 2016//SecurityOption rule types////* Updated SecurityOption Tests and related data to build the test cases////* Added tests for SqlScriptQueryRule saAccount and updated some bugs////* Updated SQL Server 2016 Instance output////* Added tests for SqlScriptQueryRule Audit and updated some bugs////* Finalized tests for SQLScriptQueryRules for SQLServer 2016 Instance STIG////* Updated SQL Server 2016 Instance V1R3 STIG data files.////* Updated scripts to fix AppVeyor issues////* Updated Convert.main.integration.tests.ps1 to show correct test counts by type.////* Remove file not needed////* Updated STIG file name in test hash table to correct name.////* Updated code for erring permissions rule.////* Removed tabs from source xccdf which cleared them from processed file////* Manually added a newline to the org output file.////* Minor updates based on PR feedback////* Formatting updates per PR review////* Updated SQL Server Instance STIG processed output files////* Added missing STIG version////* Revised get, test, and set scripts from multi- to single line format.////* Minor formatting updates////* Minor formatting update////* Minor update to moduleversion////* Minor updates to formatting, changelog////* Updated a unit test to reflect code change////* Minor updates - case, plural/singulars, etc.////* Updated SAaccount to SysAdminAccount for case////* Updated test file with revised SysAdminAccount name////* Updated unit test syntax to correct saAccountName////* Removed DbExist SqlScriptQuery rule sub-type and updated unit test////* Removed DbExist SqlScriptQuery rule subtype parsing////* updated config format and helper.psm1////* Add Windows Defender Antivirus STIG V1R4 (#239)////* add xccdf////* add defender info////* for no longer optional////* catch through as org////* valuename cleanup////* should not catch as org////* defender specific////* fix formatting////* typo fix////* adding for org setting////* add for v-75153////* add defender exceptions////* defender exceptions////* unneeded comment////* add powerstig xmls////* add defender test////* add newline////* roll back due to failing test////* pass valuename////* update comment////* add regex for absent////* regex cleanup////* update for small fix////* Adding Windows Server 2016 STIGs (#206)////* Updated Validation Set////* updated cAdministrativeTemplateSettings////* Spacing fix////* Added archived DotNet 1.6 STIG////* Added process DotNet 1.6 STIGs////* Updated DotNet Framework changelog and rename of processed STIG in integ////* initial commit////* fix rule 76827////* add files and update tests////* added blank line to changelog////* Updated to catch Absent ValueType////* Updated regex valuename////* removed tabs\spacing////* fix formatting////* fix formatting////* fix formatting////* initial commit////* update integration test////* updated xml files////* update to catch client and server////* fix formatting////* update test to account for new scenario////* fix formatting////* fix formatting////* Added AD Domain STIG V2R11 and removed V2R8////* Updated for DotNet v1r4 registryrule to convert to documentrule.////* Updated matching Stig file names and rule types////* Added newlines at the end of the files////* Updated changelog bulleted list////* Updated changelog.md V2R11////* Readded Forest STIG to integration test////* test////* Revert acc85d5039e68b65bd207c6d083aef1021b0e785////* revert////* revert 0659913fbeba125feb55418cc6698370bb2c89a6////* revert 8fed9fc2b4e476bf4ad0366f7d62f97e2e3cba0a////* revert 47c3aa791dbd5d9df9b3a97102f88875b89239d5////* git revert 4fe8501d9e666273eae57a1944dc21bcd7e3fa09////* Updated Archive stig name in int.test////* fix formatting////* new processed xml////* delete xmls////* initial commit////* initial commit////* fix rule 76827////* add files and update tests////* fix formatting////* new processed xml////* delete xmls////* update test to account for new scenario////* fix formatting////* initial commit////* update integration test////* updated xml files////* update to catch client and server////* fix formatting////* update test to account for new scenario////* fix formatting////* fix formatting////* initial commit////* update integration test////* fix formatting////* fix formatting////* fix formatting////* fix formatting////* fix formatting////* Kickoff build////* Kickoff build////* fix formatting////* commit////* removed space////* Updated CHANGELOG.MD////* updated processed stig to match 2.3.0.0////* post merge conflict cleanup////* removing whitespace////* test////* test2////* Updated registryrule for rule v-81495////* updated////* test////* test////* Updated ValidateSet for 1.6////* Removed erroneous STIG in changelog////* Rename StigDdata to STIG (#178)////* initial commit////* renamed GetAvailableStigs////* Update README.md////* Updated based on PR feedback////* Updated based on PR comments////* Updated registry rule match to single line////* Removed #Test////* Commits based on PR////* fix rule v-76845////* fix formatting////* add windows domain////* add windows domain////* fix conficts////* Updated OrgValueTestString based on PR////* fix formatting////* Update to fix rule splitting issue////* update to fix tests////* updated////* updated based on PR////* updated based on PR////* fix conficts////* iis site updates////* new stigdata update integration tests////* update tests////* new data file////* readd tests////* update tests////* updated resource name////* updated hkcu resource////* fixed paths////* update resource name////* fixed path////* fixed path////* updated change log////* added files to archive////* rem old files////* added stig to archive////* fixed name conversion////* rem V-21954 hard coding////* fixed ctrl pnl path////* rem SupportedEncryptionTypes filter////* ordered svc list////* Fixed V-1089////* fixed path////* fixed legal text////* added content////* added future note////* updated range conversion pattern////* added RuleIdFilter////* Lansey174 firefox stig (#198)////* Adding converted Firefox 4.23 udate .xml files////* Updated Version in validate set////* Added Firefox stig to archive////* Updated Firefox stig in archive////* Updated rule count////* Added test data file for Firefox Regex////* Updating validate set and regex for Firefox 4.23 parsing.////* Updated valiation set for both version of FireFox////* Udpated ChangLog and Convert.Main.Integration.tests.ps1////* Added new line at end of XML file////* Updated converted Firefox 4.23 STIG////* Updated FireFox Conversion files////* Updated FileContentRule.test////* Updated FileContentRule.psm1////* Updated revised FireFox 4.23 stig////* Added space to end of line////* Updated Rule count////* Removed added file////* Updated line 127////* Added line 165 back////* Updated Changelog.md////* Updated Change log////* fix merge conflicts////* Fixed Copy Rule////* added MS Files////* added 2.14 DC files////* fixed parse errors////* updated expected output////* added xRegistry////* added cAdministrativeTemplate////* updated param set////* fixed path////* updated resources////* fixed path////* rem tab////* rem old files////* Fixed V-21954////* update expected result////* Updated rules////* rem unused test////* updated stigdata////* added newline////* update param set////* manual update V-26070////* updated fix list////* rem unsupported files////* fixed name////* split file////* initial files////* Fixed USR ident////* fixed v-73685////* fixed V-73645////* fixed guest group////* fixed ace paths////* default org settings////* fixed usr identity////* to do list////* fixed caption rules////* fixed 73239////* fixed tests////* Fixed service name extraction////* rem dup tests////* fixed metadata////* added MS settings////* added 2016////* fixed telnet rule////* added 1.6 to param set////* added new line////* fixed telnet name////* added 2016////* added DSA filter////* added Kerberos policy////* added 2016 to validateset////* filter md files////* fixed 73277////* updated V-73711////* fixed 73711////* fixed 73551////* added notes////* formatting////* fixed 73649////* rem hex code from test string////* formatted rule check-content////* updated Windows Feature regex////* formatted rules////* added ShouldBeAbsent////* update with latest convert applied////* fixed tests////* fixed default value////* added quotes to test strings////* updated test data////* added notes////* fixed duplicate entries////* fixed Inheritance////* fixed V-73759////* updated V-73759////* updated test data////* updated rights////* fixed rule inheritance////* added description field////* Added description filter////* added PR feedback////* changed rawString export to default////* fixed value (#248)////* renamed AccountPolicyRule////* fixed spelling////* updated class name////* updated convert factory////* fixed path////* renamed class////* renamed class////* Added AsRule////* renamed module////* updated Rule base class////* temp rem dsc integration tests////* initial commit////* Add Windows Server 2016 V1R7 (#253)////* fixed space////* added ms stig////* fixed Identity////* Add DC stig////* added xccdf////* updated change log////* updated checklist data////* fixed test errors////* updated composite resources////* fixed common tests////* fixed xRegistry test////* fixed more tests////* fixed tests////* rem validateset////* updated paths////* updated tests////* Added null version support////* updated type////* moved data files////* aligned parameters////* fixed rule tests////* added STIG unit test////* fixed STIG tests////* fixed base class call////* fixed common tests////* updated composite manifest and help////* updated properties////* fixed property name////* fixed stigdata lookup////* fixed path////* updated test config data////* Updated module manifest to reflect new AccessControlDsc 1.2.0.0 release (#254)////* updated module manifest to reflect new AccessControlDSC release 1.2.0.0////* updated composites to reflect the correct version of AccessControlDSC////* fixed IE and Server tests////* updated mock////* removed test////* updated comments////* revert updates////* fixed name////* add log automation////* updated log files////* added new line////* fixed output name////* updated nuspec to reflect new project structure////* Fixed Get-StigList technology filter////* updated release module////* Update after STIG application and validation////* Update renaming IIS Site Stig////* updated merge type////* rem deleted function export////* fixed variable////* update for Registry unit tests. Tests need rewrites.////* update for test////* revert back to passing tests.////* added PR feedback////* Fixes #284 (#288)////* Updated to remove edge case and added xccdf.log////* updated to correct white space in key and removed edge case associated with space////* updated changelod.md////* updated based on PR////* updated whitespace////* update 1.14 org setting////* new line added to org////* update for edgecase removal////* update to remove edgecase text////* Update to remove bad tests////* Duplicate and/or ExclusionRuleList Conversion Error -> Fixes #289 (#291)////* Updated DocumentRule and DocumentRuleConvert Classes to parse correctly.////* updated changelog.md////* rem old STIG files////* Update to README for file hash updated hyperlink////* Update to Merge 3.0.0.0////* Update Org Settings////* Update for new lines.////* Update after single quotes added////* Update after adding single quotes on line 22////* Fixes #294. Data updates test fix (#295)////* update for bug in access control with log////* update for fix////* update for fix////* update for fixed data////* update for fix////* Update to conform to new conversion process////* added help content////* Audit policy convert rule refactor (#286)////* rem deleted function tests////* refactor convert class////* update for bug in access control with log////* update for fix////* update for fix////* update for fixed data////* update for fix////* updated Syntax////* Fixes #243 (#287)////* move archive files////* added log text update////* added change log////* rem old STIG files////* apllied updated to 1.16////* rm 1.12 from archive////* formatting////* Deleted empty directory////* new common tests (#300)////* Common convert tests (#301)////* new common tests////* added missing test data warning////* Clean up STIG data (#297)////* renamed files////* rem out of scope files////* rem old files////* Refactors the Account Policy Convert module (#296)////* added change log////* refactor class////* Fixed extraction regex////* refactored and rem dup tests////* additional refactor////* fixed formatting////* fixed test data////* cleaned up test data////* updated to new test format////* updated path////* changed scope////* added global////* IIS Server STIG V-76731 fails to properly set STIG guidance because rule is not split -> Fixes #290 (#292)////* Fixed parsing bug for V-76731////* Converted STIGs to include previous split parsing updates. Also added to changelog////* Fixed errors included no new lines, extra white space and removing old processed stigs.////* Fixed issue with org settings and converted IIS Server 1.6.////* Fixed whitespace in org setting.////* Added punctuation////* Added section in integration test for this split rule.////* U_IIS_8-5_Server_STIG_V1R3_Manual-xccdf.log added////* Refactors the Security Option Convert module  (#299)////* added update log////* updated regex////* refactor module////* cleaned up test data////* Added new test format////* added global////* updated path////* Introduce a split rule factory (#303)////* Added Split Factory////* fixed rule ctor////* updated notes////* Audit policy common test (#304)////* added common tests////* updated method name////* rem gt N-2 (#310)////* Update PowerSTIG to Utilize LogTargetW3C parameter in xWebAdministration 2.5.0.0////* update changelog////* test////* New-StigChecklist path validation (#307)////* rem unused files////* added path validation////* added notes////* added initial test////* fixed path////* Migrate to xWindowsFeature (#306)////* migrated to xWindowsFeature////* migrated to xWindowsOptionalFeature////* updated notes////* updated changelog////* fixed spelling////* Fixed resource import////* test2////* removed whitespace from test2////* updated to parse the STIG properly////* Adds common unit tests (#313)////* fixed spelling////* rem extra return////* moved to common tests////* added tests////* added remaining tests////* rem spaces////* update registry rule path////* updated exclude list////* added PR feedback////* Update to rename Firefox STIG////* updated composite for unique values////* Update after conversion////* Update////* Update to remove issue in Firewall XML////* need to have a function that will get unique ssl flags////* Corrected formatting issues////* removed helper function////* updated xWebConfigProperty////* updated xWebConfigPropertyv2////* reverted changes in xWebConfigProperty////* updated PowerSTIG to add xSslSetting resource////* added iis site 1.5 STIG////* updated spacing////* updated rule.loadFactory////* updated powerstig.convert.psm1////* bug fix for issue 331, checkcontent notmatch string fix////* updated xccdf.log files////* removed old stigs////* Update after correcting 1.7.org.default OrganizationalSetting////* Updated ChangeLog////* Update after adding new lines////* Update - removed CHANGELOG.md, line 31 at r3////* updated Rule convert////* Update after reconversion////* Security option fix (#328)////* return single match////* cleaned up match pattern////* Update: Removed spaces////* Update to uses AccessControlDsc////* Update to add to changelog and minor adjustment////* updated SSlSettingsRules////* updated changelog////* updated Integration tests and unit tests////* Update: Module directory formatting////* Updated composite////* Commit to fix failing unit test////* update to remove unneccessary section////* update to remove extra line////* update to undo caps////* update to fix typo////* Update to fix PR Comments////* updates for PR comments////* update for PR comments'////* update for extra spaces////* Update to see if tests will Pass////* updated version number (#338)////* update release notes",https://github.com/microsoft/PowerStig/commit/e741e6c744f29fc8de66a3dc159bcea6c1bb8eeb,132100529,microsoft/PowerStig,False,False,"['#340', '#219', '#201', '#221', '#160', '#193', '#186', '#235', '#219', '#239', '#206', '#178', '#198', '#248', '#253', '#254', '#284', '#288', '#289', '#291', '#294', '#295', '#286', '#243', '#287', '#300', '#301', '#297', '#296', '#290', '#292', '#299', '#303', '#304', '#310', '#307', '#306', '#313', '#328', '#338']",37
112,ffe05fa6e5c7819a6cb2c9105ed9694245656842,"Release 1702.1 (#1992)//* D2DFactory Wrapper (#1085)////* D2DFactory Wrapper////* Fix path for wrapper includes in project file.////* Moving starboard to mm file.////* Address CR feedback, remove useless code, clean up D2D factories.////* Moving header file to private location////* Factory helper should only create single threaded D2D factories.////* Actually fix the wrapper header location.////* Add the CG/D2D design document. (#1112)////* Implement an ID2D1RenderTarget-backed CGContext (#1126)////There are wide swaths of code wrapped in #if 0 ... #endif blocks; they will be removed and repaired as part of the ongoing work on this branch.////Issues have been logged for many TODOs, but the rest will be removed as part of the ongoing work on this branch.////Currently broken:////* path rendering//*  shadow//* transparency layers//* bitmap contexts that are not CALayer contexts//* font rendering is left in CGContextCairo.mm and will be moved////This merge is intended to unblock parallel work on CG/Direct2D.////* Add CFCppBase, a helper class for implementing C++ CF types.////* Switch CGContext/CGBitmapContext over to CppBase.////*  Initial implementation of CGPath Using ID2D1Geometries (#1138)////*  Initial implementation of CGPath Using ID2D1Geometries//// This work provides the foundation for creating a CGPath based on// ID2D1PathGeometry and GeometrySink. A simple implementation for// adding a simple line, moving the current location to a new point// and retrieving some basic information from the Geometry sink has// been added. Isolated unit tests have also been added to ensure// these APIs are working as intended for these simple scenarios.////* Addressing CR Feedback.////* Reworking the __CGPath struct to use a nested implementation////Also addressed some concerns with the state of geometry objects.////* Fixing re-opening functionality by creating a new path and streaming contents of old path into it.////* Addressing CR Feedback.////* Cleaning up CGPath and removing unused code.////* Refactor into using CFCppBase////* Cleaning up a few things.////* Addressing CR Feedback.////Removing fully qualified names. Using inline helpers//between D2D and CG. Fixing CGPathAddLines which will be//tested more accurately in the future. Removing unnecessary//dealloc method for CGPath base type. Fixing include->import.////*  Addming more helper functions and reverting bad test change.////* Addressing CR Feedback. Fixing Inlines////* Disabling tests that rely on CGPath in CoreText////* CGContext DPI, parameter, stroking & interpolation improvements (#1181)////* Make CGContext display scale-agnostic by propagating the scale into Direct2D's DPI.//  A CGContext rendering to a scaled surface will not apply a scale//  transformation. The scaling logic has been moved into render target//  creation.//  //  Fixes #1180.//* Replace __CGContextDrawGeometry with RenderToCommandList+RenderCommandList.//* Push CG Interpolation mode into Direct2D.//  References #1177.//* Make all CG APIs nullptr-safe.//* Move stroke style caching/computation into drawing state.//* Fix CGContextConcatCTM (math was backwards.)////* Perform major surgery on CGContext.////* Fix improper use of internal functions in CGPath. (#1249)////* Fix calculating exclusion zones based on CGPaths.////* Implementation of CGImage using Windows Imaging Component. (#1185)////- Implementation of CGImage via WIC//- Remove circular dependencies between CGImage and UIImage//- Implement UIImage interms of CGImage//- Fix issues in UIImage//- Increase code quality in UIImage//- Remove libpng depencie of CGImage//- Improvements to result.h Macros for conditional checks//- Improve code quality for existing image interaction//- Added unit tests////* Add support for black and coloured shadows via ID2D1Effect. (#1239)////* Add support for black and coloured shadows via ID2D1Effect. Closes #1237.//* Apply the CTM transform for commandlist, device transform for final draw.//  Shadows project completely ignoring the context flip and any user translation.//  Therefore, we must translate all our drawing commands when we create//  them, but only apply the device scale in the final composition step.//* Implement CGSizeApplyAffineTransform.//* Allow a private consumer to control the shadow projection params.//* Switch all internal interfaces to HR returns.////* Implement the CGContext non-drawing path functions in terms of CGPath. (#1240)////Curiously, CGContext path queries and CopyPath return untransformed units.//Closes #1238.////* Finish Simple line and status CGPath APIs. (#1255)////* Finish Simple line and status CGPath APIs.////Add additional tests to cover these scenarios.////* Addressing CR Feedback. Releasing leaked paths in tests.////* Addressing CR Feedback. Cleaning up nested conditionals and macro usage.////* Addressing CR Feedback.////* Removing unnecessary internal helper function. Adding extra test case for equality of paths with sub shapes.////* Fixing access to internal members of implemtation for CGPath.////* Rework __CGPath as per new encapsulation procedures.////* Adding additional test case for possible sub shapes equality failure.////* Implement drawing CGPaths through CGContext (#1307)////* Implement drawing CGPaths through CGContext////* Fix calls to return an HRESULT.////* Address CR Feedback.////* Fix poor comptr usage and leaks. Return to static initializer model.////* Refine CGContext's user<->device coordinate space boundary (#1324)////CGContext will now strive, wherever possible, to store its internal state in fully-device-transformed units. This transformation includes the device scale (flip+translate from CG to D2D) and the user scale.////To enable this, this pull request also adds the ability to specify that coordinate system a drawn geometry is in: paths will use the premultiplied values, and user-space geometry values will use userspace->device transformation.////This allows us to leverage the Direct2D effect stack without having to apply input and output transformations to the effects, and simplifies shadow rendering (we no longer transform for userspace in the commandlist and then device space when we draw it.)////* Refactor  CoreGraphics to use IWIC/D2D  (#1332)////- Full Implementation of CoreGraphics via IWIC/D2D//- Refactor CoreGraphics////#1299//#1227//#1246//#1292//#1345////* Update CGContext, CGPath and sorta CGImage for the CFCppBase changes. (#1356)////* Disable CTFont.CreatePathForGlyph////* Adapting the WIC factory creator to follow the outlined format in D2DWrapper (#1357)////* Propagate context alpha into brushes for per-primitive draw, not layer////* Add support for clipping (and EO clipping); add support for non-EO fill. (#1368)////* Properly EO- or Winding-fill Geometries.//* Add support for CGContext(EO)?Clip().////Fixes #1269.////* Add CoreGraphics.Drawing UT and a bunch of image rendering tests.////This change set introduces DRAW_TEST and DRAW_TEST_F, as well as a handful of//image drawing test fixtures. Commands rendered to a test's context as part of//its test body will be rasterized and saved in a file named//TestImage.$TESTCASE.$TESTNAME.png////The test driver's ideal interface is multi-modal; it needs to be able to//generate a corpus of reference images on disk, and it needs to be able to diff//them. For this, it needs a custom EntryPoint (included), and the ability to//parse command-line arguments.////The ideal default mode will be one that loads reference images from disk and//fails tests if a number of pixels differ. That work is not yet complete.////Hopefully, the draw tests here will be able to be plugged into another module//that can perhaps render them to screen, or display them as part of a UI-driven//flow for comparison and demoing purposes.////Refs #1271.////* Implementation of CGBitmapContext. (#1371)////Added custom iwic bitmap to support copying, and backed data buffer.//Added colour conversion format check for pixel formats.//Added tests to draw, render and validate changes.//CGImage changed to use OnLoad caching.////* Changing IWIC image loading to on Load rather than on demand. (#1413)////* Simplify geometry casting. (#1428)////* Disable every drawing test manually instead of using exit(0). (#1434)////* Cleaning up internal headers and moving CGImage implementation to source file (#1430)////* Implementation of drawing an Image into context (#1414)////Implement UIKit image drawing via WIC/D2D #1245 //Added unit and semi functional tests for drawing into context and scaling.////* Clean up internal headers; delete CGContextImpl.////* Clean up CoreGraphics' public headers.////This moves most of the types out of CoreGraphicsExport.////* Automatically generate greenline images for tests and provide for test failure. (#1438)////CoreGraphics.Drawing.UnitTests can now be invoked in one of two modes, mediated by command line flags:////* `--compare[=/path/to/reference/folder]` (_default mode_) compare all rendered images against their baselines, failing the test if any images differ by even a single pixel.//* `--generate [--out=/path/to/output/directory]` generate output images only (do not run comparisons.)////A failing test will emit a brightly-colored diff image to `Greenlines.TestImage.CASE.TEST.png` in the _output directory_, and attach attributes to the gtest output XML data specifying where to find the images. A compatible test runner can load these images and display them side-by-side.////**Open Questions/Concerns**//* I do not like the design of `rgba/bgraPixels`.//* I do not take stride into account; if the image is width-padded, the tests will ikely fail.//* The reference platform loads images in RGBA, and we load them in BGRA. This is not an incompatibility, but it does make manual buffer manipulation dicey.//  * The fix here is to render the image into a NEW context, but that presents a few issues of its own://    * We must trust our DrawImage function//    * We must further validate bitmap context, and trust our bitmap context as an integral part of test execution.//* All tests will be disabled as of the merge of #1434. We can re-enable them and reintroduce reference images after build validation.////Closes #1271.////* remove export of internal function (#1458)////* Fix internal and Objective-C use in CoreGraphics.DrawingTests.////Fixed #1448.////* Use CopyTo(p) instead of *p=Get(). Fixes #1453.////* In CGImageDestination, never pair a Get with a Release.////* *DO NOT* rely on the value of uninitialized memory.////* zero out memory for backing buffer////* Implement Arcs using D2D (#1384)////* Implement arcs and curves in CGPath using D2D////* Implement transformations in terms of D2D simplify.////* Update curves, test app with Transformation options.////* Fixing UI and other things.////* Adding comments on arc math and updating cpputils////* Use CGAffineTransform equality function instead of defining our own.////* Fix const getter functions, reorder out pointer arguments////* Fix failing coordinate tests due to stomped equality operator.////* Re-Integration from develop->CGD2D////- Removal of bridged IDisplayTexture #1337//- Getting it to build//- Proper usage of the IDisplayTexture//- Tests validated//- Usage of proper colour format//- Move image files to data folder and change tests to adapt.////* [CGD2D] Add support for Transparency Layers. (#1496)////This changeset introduces support for transparency layers. Transparency layers serve as render targets that are composed down to the backing surface in one fell swoop.////To make way for this, CGContext was mildly refactored://* Existing private (denoted by `__CGContextX`) methods were moved into `__CGContext` the class as `__CGContext::X`.//* Graphics state manipulation was promoted to `__CGContext`.//* Some methods were promoted to drawing state methods (clipping, draw decision)//* `__CGContextLayer`, a class that tracks a stack of drawing states and their destination buffers, was introduced.//* CGContext's render target setup was moved into its constructor.//* `globalAlpha` was reintroduced, as sometimes per-primitive alpha is just not enough. *Such as: layers are composed down all at once using the alpha set at the time the context was created.*////Deficiencies://* Clipped layers are implemented in terms of a baseline clipping state applied to the layer. All primitives are drawn through a Direct2D **PushLayer** and **PopLayer** pair.//* Alpha-composited layers are implemented in terms of the same.//* There is some dodgy math witnessed on the reference platform that grows shadowed layers by some combination of shadow offset and width; an attempt was made to mimic this.//* Minor layering violations that pass a `__CGContext` to a `CGContextXxx()` public function by way of **this**.////Fixes #1427, #584.////* Implement CGPathApply (#1507)////* CGPathApply////* Curve Apply Test Page////* Update tests, address CR feedback, move geometry sink to individual file.////* Addressing CR Feedback.////* Fix no-op on cgpathapply when path is null.////* Address CR Feedback////* Single element point arrays are now just a variable////* Ignoring clang warnings on ARM builds for WRL helpers.////* Replace lost ID from last commit.////* Remove bitmap context hack from NSTextContainer////* Fix Affine Transform in CGPath (#1550)////* Affine Transform////* Remove excess com pointer usage from getters.////* Update API status.////* Enable Path Tests + Reference Images////* Disabled AddEllipseInRect test until CGContextSetStrokeColor is supported.////* Add support for copying subregions from CGIWICBitmap.////References #1379.////* Convert CGBitmapContext's image on output (if data isn't provided).////* Convert ImageIO to use CGImage's WIC internals directly.////Additionally, clean up some EXPECT/ASSERT/_MSG in ImageIO Tests.////Fixes #1287.////* Tidy CGImage's list of supported pixel and rendering formats.////Add some more bitmap format tests, and adjust the rest of the tests to//match.////* Fix CoreGraphics.Drawing's image loader & premultiplied alpha.////* The unpremultiplier here matches the algorithm used in WIC.//* A test image has been added that will load unpremultiplied, but render//  premultiplied.////* Add support+tests for clipping context rendering to an image mask. (#1528)////This pull request adds support for clipping rendering into a context by an image or an image mask in terms of Direct2D opacity brushes.////An image mask is a grayscale image whose pixel values range from 0 to 100%, and those values are taken as inverse alpha. That is: a fully black image (px=0.0) will be rendered through at alpha 1.0; a fully white pixel will be at alpha 0.0 and values between the two will be interpolated appropriately.////Masks can be stacked. This is implemented in terms of a double composite operation; the two opacity brushes are combined and used to draw a black region into a new image. The new image will serve as the final bitmap backing the new opacity brush.////Since Direct2D does not support b/w masks natively, an effort was undertaken to translate them into alpha channel masks.////Black/white masks do, unfortunately, not work with CGBitmapContext as-is. We cannot render an image into a 1-component colorspace bitmap. This requires that this pull request be merged after #1529.////Fixes #1421. Provides a base implementation for #1425.////* Add support for CGImageCreateWithMask. (#1555)////Fixes #1425.////* Store CGContext's text position in its text matrix. (#1580)////* Implementation of Tiled Images + tests (#1542)////Implementation of Tiled Images + tests #1417////* Implementation of fill and stroke pattern brushes and tests #1422////* Implementation of set stroke and fill methods #1422//refactor existing code to use common functions.////* Implementation of Linear gradients with full optional support  (#1416)////* Support opacity and interpolation for Drawing Images (#1557)////* Add support for opacity and interpolation for drawing images #1556////* Reintegrate CoreGraphics and Accelerate.framework. (#1680)////Fix some dodgy memory management in Accelerate.////* Fix Accelerate.UnitTests. Fixes #1285.////* Fix (and update) UIGraphicsFunctions. (#1681)////Fixes #1642.////* Do not use UIColor in CoreText!////* Fix CGImage to not copy CGDataProvider. Fix CGDataProvider in vImage.////* CoreImage:Implementation of CIImage using CGImage + test (#1625)////* CoreImage:Implementation of CIImage using CGImage + test////* Proper annotations for implemented methods (#1719)////* Implementation of JPEG & PNG representation and tests////* #1338 Adding support to copy images to/from clipboard////* Add woc::AutoCF<T>. It's like AutoId<T> for CFTypes.////Just like AutoId<T>, it takes a lifetime trait template: CFLifetimeRetain//for CFRetain/CFRelease, and CFLifetimeUnsafe for straight assignment.////It builds upon and replaces woc::unique_cf<T>.// * It is copyable (and can share ownership)// * AutoCF<T> can be passed anywhere T* is required.// * It has a fully-loaded operator& so you can pass it wherever//   a T** is required. The old value will be released.// * It has counterparts in StrongCF and UnsafeCF, just like StrongId//   and UnsafeId.////By default, a StrongCF will *share ownership* of a CFType.//To transfer ownership, construct it with std::move(cf) or use//woc::MakeStrongCF<T>(CFCreateXxx(...)).////As a migration measure, woc::unique_cf is still provided, though it is//now based on StrongCF. It retains its ""transfer ownership on construct""//semantics and provides a few shim methods to adapt it to the//AutoCF/AutoID world (release -> detach, reset -> attach).////(cherry picked from commit a64f48238e8876fd2cfe966626baa8d35aec04de)////* Fix fallout from the merge of #1692.////* Migrate the text drawing code from Cairo to CGD2D.////* Fix the default fill/stroke color values from the reference platform.////* #1733 CGContextClearRect: Support to clear rect if clipping is not set (#1743)////* Fix our WIC<->CG color format table again.////Fixes #1694.////* Work around #1769 by doing the DPI calculation ourselves.////* Fix Figure Creation in CGPath (#1738)////* Fix Figure Creation in CGPath////* Fix private class member naming.////*  Merge with CGD2D////* Check for null geometry on figure end calls////* Plug memory leak in __DWriteTextLayoutApplyFont (#1788)////Fixes #1766////* Fixing ApiAnalyzer errors. (#1794)////* NSTextContainer handle exclusion zones extending outside of area (#1792)////Fixes #1779////* getNetworkConnectivityLevel can throw under some circumstances.  Handle (#1795)////* getNetworkConnectivityLevel can throw under some circumstances.  Handle//these and treat the connection status as 'not connected'.////* Fix leak in NSRunLoop _statesForMode: helper (#1793)////* Fix leak in NSRunLoop _statesForMode: helper////* just use autorelease for helper; remove additional unused method from NSRunLoop (which would double release if called)////* SC callbacks must by default happen on the main thread unless the app (#1801)////specifies a different queue.  This fixes a crash in reachability sample.////* Fix drawing tests on OSX (#1815)////Need to be explicit about stealing the deltaImage when doing a move of our ImageDelta////Fixes #1805////* UX Functional test pattern - exercising sample app's UIViewController within a functional test (#1771)////CHANGES://1. Created a new XAMLCatalog UIViewController with 2 controls (slider, UITextField) to manipulate a UIButton's label//2. This UIViewController's exposes a public UIButton property that can be manipulated from a functional test (UIButtonTests)//3. Created UX helper class, ViewControllerTestHelper, to display visuals using pushVC/dismissVC//4. Created UX helper class, XamlEventSubscription, to register/unregister XAML property change events//5. Updated FunctionalTest VCXPROJ to move external VCs into its own folder////TODO://1. Migrate NSCondition to Win32 event mechanism////* CoreText Performance: Call ID2D1RenderTarget::BeginDraw()/EndDraw() f… (#1705)////* CoreText Performance: Call ID2D1RenderTarget::BeginDraw()/EndDraw() fewer times////Fixes #1620////* - Added Begin/EndDraw pairs to a few more places//- Mitigated an issue with cairo where ID2D1RenderTarget would sometimes cache a before state during begin draw,//  and wipe out any changes cairo made, breaking APIs like CGContextFillRect.//- Changed implementation/naming of the 'escape the current begin/end draw stack' functions////(cherry picked from commit d5a86b9e1a8fe77f634c836bee1fb51c07cb05ce)////* Merge #1705 to CGD2D// - Add PushBeginDraw/PopEndDraw pairs to UISegment, UIImage//   (not on develop since this likely would've actually hurt performance there)// - Add Escape/Unescape pairs to CGContext areas where the target is changed////Fixes #1635////cr feedback////cr feedback////(cherry picked from commit 0ac549166b3ee8a1b55554d014bcde50ccb3414a)////* Remove Cairo and unused dependencies (#1797)////Fixes #1455////* [CGD2D] Render buffer-shared G8 images as A8. (#1804)////This is riddled with caveats, many of which are documented in the code.////A first pass attempt was made to implement a format converter that would run//per-primitive. It's expensive, but it did get the job done.////Unfortunately, asking WIC to convert a PRGBA buffer to a G8 buffer causes it to//discard all alpha data -- even if premultiplied, the luminance of//partially-transparent pixels is not appropriately reduced in the final G8 image.//This impacts alpha-heavy uses such as grayscale font rendering.////The A8 implementation was chosen for maximal compatibiltiy with Cocos2D. Cocos2D//renders white (!) text into a ""grayscale"" buffer that it then passes off to//OpenGLES as a `GL_ALPHA8` buffer. Hah.////The A8 ""hack"" also represents what we currently have on the develop branch.////Fixes #1747.////* Use custom font for stable version and copyright (#1799)////Fixes #1798////* Change parameterized test to use custom font (thanks Dustin :D)////* Initialize m_lastPoint; fixes intermittent test failure.////* Porting ObjectiveC language services VSIX to VS2017 (#1745)////* Make sure our touch/point conversion works in middleware (C#-hosted, etc.) scenarios.  Controls that are placed within arbitrary Xaml scenes don't have a superview chain up to a valid UIWindow, so touch point conversion is failing.  The fix is to - in middleware scenarios - use the app's main UIWindow for any UIView that doesn't have a superview. (#1821)////Fixes #1818.////* Fix various Uikit memory leaks (#1803)////* Fixing some UIKit/WinRT projections memory leaks.  Any time we allocate a WinRT projected object via make*, we are responsible for freeing it.////* Fixing leak in Autolayout and its usage of ClSlackVariables.////* Updating libcassowary build output with memory leak fix.////* Incorporating CR feedback.////* Allow _UIPopupViewController to present itself in middleware scenarios. (#1832)////A recent fix/change to UIViewController (75effb9) regressed one of our middleware scenarios. UIViewController now makes sure that one is presenting over a currently-visible ViewController. However, in middleware scenarios, that won't hold true, so we must loosen the check in such cases.////Fixes #1831.////* Fix additional leaks in UIKit (#1789)////* Fix additional leaks in UIKit////* just add autorelease to paragraphStyle helper////* address CR (prefer local StrongId to adding a bare release in UIDatePicker; add ARC enabled assertions). fix additional leaks in UITabBarController.////* ObjC2Winmd: Support for async delegates with multiple parameters (#1833)////* Fix a missed endianness flip in #1748.////Fixes #1837.////* Fix various leaks in Foundation (#1834)////Thanks to @ehren.////* Migrate foundation tests out of woccatalog (#1826)////Moves Foundation Tests, which includes task_info, URL Session, and UserDefaults, and moves them to a new test app Foundation-Dev in tests/testapps////Fixes #1577////* Migrate foundation tests out of woccatalog////* Even more relative path////* Updated GLKitComplex sample project with missing textures. (#1842)////* Add data files to xcodeproject////* Updated glkit project with missing textures.  Fixes #1840.////* Fixing Github issue 1602 and 1689 - sizeThatFits and adjustFontSizeToFitWidth does not work on UILabel////* Revert ""Redo locking and ref counting in NSOperationQueue to be much safer. A… (#1676)""////This reverts commit 1db8c6608349fddc6d95fbff2df8dc33f9272904.////* Revert ""Fix various leaks in Foundation (#1834)""////This reverts commit 3a654940c4d8bfba2b7f67e7a67473b34dfe1fae.////* Fix #1827 by flipping the context *properly* in UIImage draw.////* Reimplement CGContextDrawImage in terms of _CGContextDrawImageRect.////This fixes the heavy drawing overhead on 9patch images, which used to//apply a context-global clip and draw the image in full nine separate//times.////Now we get to use D2D's native image region subsetting support!////* Created UX test helper class and simplified the tests using the new UX pattern (#1855)////* Created UX test helper class and simplified the tests using the new UX pattern////CHANGES://1. Created UXEvent class, wrapping NSCondition, and UIColor and WUXMSolidBrush comparison method//2. Added more controls to manipulate a UIButton via XAMLCatalog's viewcontroller//3. Applied new UX test pattern to CALayerAppearance tests////Fixes #1764, #1757////* Fix CGPathEqualToPath Implementation (#1813)////* Fix CGPathEqualToPath////* Address naming feedback and coding conventions.////* Address CR Feedback.////* Fix overuse of m_ and provide more proper names for parameters////* Fix islandwood news crash in article view when panning (#1857)////* Some improvements to RETURN_RESULT_* macros (#1862)////* Some improvements to RETURN_RESULT_* macros////* some nit picking////* Use _CGContextPushBegin/PopEndDraw for Drawing Tests (#1870)////* Use _CGContextPushBegin/PopEndDraw for Drawing Tests// - Since we generally expect real use-cases to use these functions for perf purposes,//   we should also validate that our drawing is correct when using them.// - Fixed a stray raw ->BeginDraw() ->EndDraw() in CGContext.mm that was missed//   and could cause crashes if used under PushBegin/PopEndDraw////Fixes #1869////* better format a comment////* Adding macros to enchance return and failure checks. (#1871)////* NSURLSession should throw for creating tasks with nil request or resume data (#1860)////Fixes #1844////* Check for nil before trying to resume////* CR feedback////* Fix starting position of arc in bezierPathWithArcCenter (#1864)////* Fixing more UIKit memory leaks (#1863)////* Fixing leak in UIKit.Xaml controls, and a leak in UIButton.////* Adding UIButton memory leak tests.////* Switching to fancy new event helper.////* Add a slight delay after freeing the UIBUtton to prevent a very intermittent test failure (failed twice out of 500 times).////* Switching to StrongId for VC.////* Incorporating CR feedback.////* Fix various leaks in Foundation (#1873)////Fixes leaks in NSLog and internal logging funcs, NSString and NSMutableString leaks,//and an NSTimer leak.////* Remove some dead code from bff7cce92.////* If the user provides bitmap data, a bitmap context must copy it out.////* [vImage] Don't hire a bitmap context to do our dirty work.////Converting an arbitrary buffer of bytes into an image should be handled//by CGImage. Using CGBitmapContext and its rather more limited set of//formats is bound to fail more often.////* Fix the Accelerate samples to use 32bpp images & proper byte ordering.////* Fix a missed swap from the format table introduced in 2122f2a18.////* Winmd2ObjC update: Fixed inconsistencies with create method and added annotations. (#1883)////* Enable vertical pixel-snapping when drawing glyph runs (#1890)////- Devices with vertical antialiasing would render text as blurry if rendered on a fractional vertical coordinate.//   - CGContext functions that draw glyphs do not necessarily use coordinates from our custom text renderer,//     which already has pixel snapping enabled.//   - As such, manually round the y-translation in CGContext::DrawGlyphRun()// - Updated reference images for two drawing tests dealing with line height.//// Fixes #1594////* Remove EbrCenterTextInRectVertically (#1882)////Changes UITabBarButton to directly center text vertically in drawRect://Removes dead code from UITextView-sizeThatFits:////Fixes #1812////* Change targets less in CGContext (#1878)////* Change targets less in CGContext// - CGContext previously changed targets for all draw primitive functions.//   Since changing targets causes an immediate flush, this significantly negatively impacted performance.//   Changed implementation to only change targets when needed (when shadows are enabled)// - Added drawing tests for a few edge cases regarding shadows and clipping.// - Removed unnecessary Escape/Unescape functions - these were not necessary to change targets as previously surmised.////Fixes #1810////*  - Enabled all shadow tests, using our current output (as opposed to reference platform) as reference images// - Make the reversion of transform to the identity matrix safer// - Misc cleanup////* CR feedback////* Rewrite portions of EbrFile handling to use UTF16  (#1891)//////* Rewrite path mapper to simplify code and support UTF16 path names.//* Rewrite Ebr file apis to use new path mapper.//* Remove dead code.//* fixed unit tests to build after refactor.//* Add NSFileManager test to use special characters.//* EbrGet/SetWritablePath are now IwGet/SetWritablePath, and support//UTF-16.////Fixes #1875////* Updating functionaltest.ps1 so it works in VSTS. (#1896)////* Disabling some NSDecimal subtraction tests on OSX (#1908)////* Update NSURLSessionConfiguration defaults to support OSX 10.12 (#1905)////#1905////* Objc2Winmd binary update:  (#1913)////* Objc2Winmd binary update: Fixed memory leak issues with IAsyncOperation implementation////* ObjC2Winmd binary update: Removed unnecessary comments////* Add benchmarking test project and add text drawing benchmark tests (#1876)////Creates a new test project Benchmark in the Unit Test group, which leverages GTest to run automated benchmark tests. Simple tests can be done with the TEST_BENCHMARK macro, or more complex ones can be used by creating classes to do setup and teardown so only specific parts of code are measured.////* Turning of clang modules. (#1914)////* Moving windows specific archival test(BackwardsCompatibilityWithOldWinObjCArchives) to windows only unit tests (#1907)////* This change implement UILabel minimumScale (#1918)////* implement UILabel minimumScaleFactor////* revert unncessary change to diagnose #1894////* CR comments////* comments////* SetTempFolder() should take wchar_t instead of char so that we don't (#1916)////* SetTempFolder() should take wchar_t instead of char so that we don't//lose encoding information. Fixes #1915////* Update usage of path names to UTF8 instead of CString////* CR feedback////* Update Implementation of NSURL.deletingLastPathExtension to OSX 10.12 (#1906)////* Improve performance in __CF_IsBridgedObject/__CF_IsCFObject (#1923)////* Improve performance in __CF_IsBridgedObject/__CF_IsCFObject// - __CF_IsCFObject() calls __CF_IsBridgedObject()// - Previously, __CF_IsBridgedObject() would do an O(n^2) comparison against the entire runtime class table.//   (O(n) traversal of table * O(n) check of inheritance tree)// - These two functions are used in CF memory management functions, such as CFRetain/Release,//   and due to their prevalence, took up substantial portions of CPU time.// - Changed bridged classes to adopt an empty 'bridged object' protocol when they are bridged/added to the class table.//   This protocol can be quickly checked against, and obviates the need to traverse the table.// - Removed some redundant _cfisa checks in _CF_IsCFObject////Fixes #1490////*  - Remove use of objective-C////*  - Also handle NSCFType////* Switch our D2D factory to be multithreaded. (#1911)////Fixes #1895.////* Use block scope thread_local static for NSProgress progress stack (#1912)////* Use block scope thread_local static for NSProgress progress stack:////Works around issue with file_scope thread_local in current clang. Leak check unit test added.////* cr feedback: collapse initialization////* switch to auto and return type deduction////* Reintroduce unique_cf's move ctor/assignment.////* Enabling some image drawing tests, moving image drawing to a separate… (#1605)////* Enabling some image drawing tests, moving image drawing to a separate file and updating some image file names////* Fix bug in sizeWithFont (#1917)////NSString+UIKitAdditions sizeWithFont:constrainedToSize: should return the height that the text requires rather than the height of the text that can actually fit in the region that CTFramesetterSuggestFrameSizeWithConstraints returns.////* Framework changes as a prestep towards supporting TAEF tests.////* Add a common test static lib and move all tests to use TAEF under the covers////* Small fixes in UTs for debug.////* CoreAnimationTest update - disable unsupported CALayer controls; adds a header and footer table entry; affine transformations update (#1874)////* CoreAnimationTest update - disable unsupported CALayer controls; adds a header and footer table entry; affine transformations update////CHANGES://1. Supports the enabling/disabling of layer property controls (greyed out if disabled)//2. Custom table view cells for header and footer added - view and number of layers//3. Affine transformations are now applied collectively, 3D transformation still require it to be centered at origin//4. Cosmetic updates and autolayout corrections - IslandWood autolayout still has some quirks (see CGRect- and CGPoint- cells)//5. All specialized layers extracted from external sources are marked as ""not supported"" even if render partially////Fixes #1598////* Code review feedback////* Change test output location////* Fix GitHub CI build status reporting////* Fix the Unit Test build break on OS X.////Fixes #1941.////* Augment the drawing tests with TAEF-specific behaviour.////* Fix interoperability with TAEF setup/teardown.//* Add a TAEF entrypoint and clear the win32 stuff out of the OS X one.////* Move UIKit.Xaml DependencyProperty registration out of UIKit.Layer's constructor. (#1949)////Fixes #1930.////* This change includes the addition of a few new features to UIButton. (#1920)////* This change includes the addition of a few new features to UIButton.  Some functionality deviates from the reference platform, but we feel that it aligns more closely with the default look and feel of Xaml buttons on Windows because buttons 'look' pressed in more cases with these changes, and there are straightforward ways to opt out of this behavior if it's not desired.////**adjustsImageWhenDisabled/adjustsImageWhenHighlighted**://We're adding WinObjC-specific support for adjustsImageWhenDisabled and adjustsImageWhenHighlighted.  On the reference platform, this tinting/darkening behavior is ONLY applied to the button's background an foreground images, but on our platform, the tintening/darkening is applied to the entire button's bounds (including its background color), but NOT to its label text.  The primary justification for this approach is that there's not a straighforward way to tint Xaml Images on RS1, yet this approach also helps us implement simple SystemButton support and it makes UIButtons appear a bit more 'windows-like' in many cases, since they show more distinct pressed behavior.  The behavior is as follows; if adjustsImageWhenDisabled is set to YES, and if no UIControlStateDisabled properties are set on the button, then the entire button contents (aside from its label) receives a lightening effect.  Similar behavior is implemented for adjustsImageWhenHighlighted.  The way to opt-out of this behavior is to either set a single UIControlStateDisabled/UIControlStateHighlighted property, or to set adjustsImageWhenDisabled/adjustsImageWhenHighlighted to NO.////**SystemButton (aka buttonWithType)**://We're adding support for UIButtonTypeSystem, which behaves as follows:////	- Default background is white.//	- Receives a default text color of (blue/green) [UIColor colorWithRed:0.0f green:0.47843137f blue:1.0f alpha:1.0f] which applies to all states (unless set otherwise)//	- Default to UIColor lightTextColor for disabled titleLabelColor////**SystemButton - Deviations from the Reference Platform**://	- When selected, the entire label background turns the default text color (blue/green) [UIColor colorWithRed:0.0f green:0.47843137f blue:1.0f alpha:1.0f], and the text color is changed to white.  This seems like a corner case that we're not implementing until we need to for a customer.////	- When highlighted, the titleLabel contents (its text and any sublayer content) are tinted to a darker/greyed out version of the normal state.//		- Instead of this behavior, we're piggy-backing off of our adjustsImageWhenHighlighted implementation to avoid needing to do this extra work.  The button *looks* highlighted, so we don't have to change the text color.////	- On the reference platform, when disabled, text is grey by default, UNLESS any custom normal or disabled text colors are set.  On our platform, we DEFAULT to disabled to grey text and then you can change it, but changing the normal color won't affect the default color (for the sake of simplicity).////Scrubbed Annotations://All UIButton annotations have been scrubbed and updated with 'NotInPlan' status as needed.////Fixes #1442//Fixes #1885//Fixes #1671//Fixes #1671////Fixes VSO 10145069.//Fixes VSO 9533114.////* Adding comments + clang-format.////* Incorporating CR feedback.////* Fixing up UIButton tests.////* Partial revert of 8bbd30f739343b5afa73e63a33583cfda10eaf4d (#1957)////* Partial revert of 8bbd30f739343b5afa73e63a33583cfda10eaf4d////* Fixing lab tests.  Also combinining tests into 1 common test. (#1951)////* Fixing lab tests.  Also combinining tests into 1 common test.////* CR Feedback.////* CR feedback////* Projection binary update: Fixed ARC issues caused by names starting with new/copy/alloc////* Projections binary update: fixed annotations for non-object types////* Working around #1965 in UIImageSetLayerContents. (#1967)////Fixes #1962.////* Adding support for borders to UILabel and UIButton (via CALayer and the CoreAnimation/UIKit composition layer).  Note that we still don't have border support on basic CALayers, because we haven't needed to add them yet, but the plumbing is in now place to add them when needed. (#1956)////Fixes #1884.////* Supporting gesture subclassing and firing delegates for supporting gestures concurrent firing negotiations. (#1909)////* Supporting gesture subclassing and firing delegates for negativating concurrent firing////* Comments////* Fix some regressions////* separate the gesture processing code into its own class and adding initial tests////* CR comments////* Comments////* comments////* delete UIGestureRecognizerDelegate.h which causes protocol forward usage which av the tests////* Add support for all CGTextDrawingModes (#1933)////Several changes have been added to address #1933 and #1935////CGContextDrawGlyphRun has been changed to _CGContextDrawGlyphRuns and __CGContext::DrawGlyphRun -> __CGContext::DrawGlyphsRuns, which takes a dummy struct GlyphRunData, which holds the DWRITE_GLYPH_RUN, relative position of the glyph run (to the text position), and attributes of the glyph run (fill color, etc.).////Text drawing methods such as CTFrameDraw now accumulate an array of GlyphRunDatas and pass them to _CGContextDrawGlyphRuns, which in turn calls context->DrawGlyphRuns.////To batch all run drawing for clipping/stroking into the same geometry, the runs have to be drawn with the same transformation, so position has to be given (hence relative position in GlyphRunData). The position is transformed by the inverse of the text transform, so when the glyph is drawn and transformed by the real text transform it will have the correct position. This has the added benefit of allowing us to draw a glyph run which has a transformed text matrix all together, rather than glyph-by-glyph as we did previously.////Because text drawing is being batched, attributes which are handled at draw time on a run-per-run basis such as fill color need to be done in DrawGlyphRuns. The attribute names are defined in CoreText, though all of them are just CoreGraphics attributes, so local values have been added to CGContext.mm and exported for the CT/UIKit versions as CG.////Images have been updates since changing this seems to have enabled antialiasing to some degree on several tests.////Fixes #1933//Fixes #1935////* Fixing naming of UIKit.Label helper method: TextBox->TextBlock. (#1970)////* Add support for colored and non-colored Patterns (#1952)////* Add support for coloured and non-colored Patterns//* Enables proper anchoring for patterns////* Avoid D2D1Group fill mode conversion for CGPath. (#1954)////* Avoid D2D1Group fill mode conversion for CGPath and other simple geometries. Fill mode conversion removed from CGContext.////* Remove unnecessary check for proper fill mode since only one fill mode will ever be converted to.////* Parameterized test for fill modes with embedded circles with alternating arc directions.////* Fix Fill/Stroke tests and remove redundant tests.////* Fix relative project path////* Updating version for 1702 release",https://github.com/microsoft/WinObjC/commit/ffe05fa6e5c7819a6cb2c9105ed9694245656842,37950166,microsoft/WinObjC,False,False,"['#1992', '#1085', '#1112', '#1126', '#1138', '#1181', '#1180', '#1177', '#1249', '#1185', '#1239', '#1237', '#1240', '#1238', '#1255', '#1307', '#1324', '#1332', '#1299', '#1227', '#1246', '#1292', '#1345', '#1356', '#1357', '#1368', '#1269', '#1271', '#1371', '#1413', '#1428', '#1434', '#1430', '#1414', '#1245', '#1438', '#1434', '#1271', '#1458', '#1448', '#1453', '#1384', '#1337', '#1496', '#1427', '#584', '#1507', '#1550', '#1379', '#1287', '#1528', '#1529', '#1421', '#1425', '#1555', '#1425', '#1580', '#1542', '#1417', '#1422', '#1422', '#1416', '#1557', '#1556', '#1680', '#1285', '#1681', '#1642', '#1625', '#1719', '#1338', '#1692', '#1733', '#1743', '#1694', '#1769', '#1738', '#1788', '#1766', '#1794', '#1792', '#1779', '#1795', '#1793', '#1801', '#1815', '#1805', '#1771', '#1705', '#1620', '#1705', '#1635', '#1797', '#1455', '#1804', '#1747', '#1799', '#1798', '#1745', '#1821', '#1818', '#1803', '#1832', '#1831', '#1789', '#1833', '#1748', '#1837', '#1834', '#1826', '#1577', '#1842', '#1840', '#1676', '#1834', '#1827', '#1855', '#1764', '#1757', '#1813', '#1857', '#1862', '#1870', '#1869', '#1871', '#1860', '#1844', '#1864', '#1863', '#1873', '#1883', '#1890', '#1594', '#1882', '#1812', '#1878', '#1810', '#1891', '#1875', '#1896', '#1908', '#1905', '#1905', '#1913', '#1876', '#1914', '#1907', '#1918', '#1894', '#1916', '#1915', '#1906', '#1923', '#1490', '#1911', '#1895', '#1912', '#1605', '#1917', '#1874', '#1598', '#1941', '#1949', '#1930', '#1920', '#1442', '#1885', '#1671', '#1671', '#1957', '#1951', '#1965', '#1967', '#1962', '#1956', '#1884', '#1909', '#1933', '#1933', '#1935', '#1933', '#1935', '#1970', '#1952', '#1954']",38
114,84d521393b2a31bf491983dfc7ca4767e5c7851f,Implement ThemedReactContext as a decorator (#897)//* Syncing with upstream////* Reverting the Examples to the previous version////* Changed ThemedReactContext implementation to use the decorator pattern////* Removing virtuals since there are no inheiritors////* Added property to provide direct access to the ReactContext being decorated////* Removing public ReactContext Property Accessor////* Sorting Usings,https://github.com/microsoft/react-native-windows/commit/84d521393b2a31bf491983dfc7ca4767e5c7851f,48009214,microsoft/react-native-windows,False,False,['#897'],39
115,7c44e99cd4aaea69e235fe687390092792db8d72,"Add code coverage color and pattern options -- fixes #1302 (#1695)//* Fixes #1683; column 8 is the coverage count, not a boolean////* Adds color/pattern options for coverage decorators. Fixes #1302////* Add missing semicolon////* Fix typo in some svg files.////* trivial change to trigger CI again////* Remove unused isWholeLine////* Support the complex types in the schema",https://github.com/microsoft/vscode-go/commit/7c44e99cd4aaea69e235fe687390092792db8d72,44264925,microsoft/vscode-go,False,False,"['#1302', '#1695', '#1683', '#1302']",40
116,bfbbf5dc5e5965931c91b2032bf725e1b81508b4,"Implement listMethods for lua generic app (#570)//* Virtualise list_methods, override in luageneric////* Add parametrisable test requirement////* Example usage////* Parametrisable decorators, standard enforcement pattern////* Provide simple lua_generic_app req////* batched test requires specific methods////* Wrapper should forward return value!////* Reduce boilerplate////* Remove temp docstring",https://github.com/microsoft/CCF/commit/bfbbf5dc5e5965931c91b2032bf725e1b81508b4,180112558,microsoft/CCF,False,False,['#570'],41
118,5ecdca834ff5fb4a5f343b18d3068dd883ce95e1,Shimmer: refactor in preparation for migration to OUFR (#4958)//* Adds new prop: className.//Removes some styling from shimmer container.////* Removes unnecessary styles.//Setup of elements wrapper.////* Refactoring some styles.//Extracts some logic to a new module.////* A lot of refactor.//Still a lot to do.////* Change new prop name for better semantics.////* Apply new prop to application in detailsList example.////* Use the new prop in TilesList.////* More REFACTOR.////* More examples...////* Enums refactor and documentation.////* Overflow text fix in LoadData example.////* Moves deprecated props down.////* Brings logic for RTL animation.////* Introduces @customizable decorator to enable custom theming of the colors.////* Sets an example for getStyles prop.////* Adds more documentation to Shimmer Page.////* Sets up a flag to remove the shimmerWrapper from the flow as soon as the transition animation is done.////* Adds rounded corners to shimmer lines.////* More refactor :)////* Clears a timeout for application example.////* Adds accessibility capabilities for screenreaders.////* Refactors some highContrast styling.//Refactors common styles in ShimmerLine.styles////* Modularize ShimmerElementsGroup////* Customize ShimmerElementsGroup.////* Refactor mergeStyles pattern in ShimmerElementsGroup////* Convert subelements to the new pattern of mergeStyles.////* Removes some styles.////* Fixes support for various browsers.//High Contrast capability.////* Fill color for line corners in high contrast mode.////* Rush change log.////* Fix tslint warnings.////* Adds a default prop in ShimmerElementsGroup,https://github.com/microsoft/fluentui/commit/5ecdca834ff5fb4a5f343b18d3068dd883ce95e1,60537144,microsoft/fluentui,False,False,['#4958'],42
128,07f262ec40d51eeddbf2738efcf5bb0896b4505c,feat: change Init() to Factory patterns to avoid temporal coupling (Migrated branch) (#8)//* feat: use Factory pattern instead of static Init()////* feat: change Init() to Factory patterns to avoid temporal coupling////* fix: update sample demos////* fix: paths to import from source instead of root////* fix: clmodeloptions type////* fix: exclude webchat from windows test,https://github.com/microsoft/conversationlearner/commit/07f262ec40d51eeddbf2738efcf5bb0896b4505c,228435626,microsoft/conversationlearner,False,False,['#8'],43
129,d56d67969c48d377aead51bf49ff8c307e4fb14f,"Expand CP.61 to talk about the general ""factory"" pattern. (#1621)",https://github.com/microsoft/OfficeCppGuidelines/commit/d56d67969c48d377aead51bf49ff8c307e4fb14f,243399200,microsoft/OfficeCppGuidelines,False,False,['#1621'],44
134,c638dc6aa7ab0f8f2bcdcd132b88d6eef29de1a6,Move external comp loader to new subregistry pattern (#237)//* shift ext comp loader to subregistry////* Get deafult comp factory from fluidexport////* remove dependency on simple module instantiation factory////* adding deafult factory////* fix max line issue////* adding IComponentLocalName and IProvideComponentLocalName that provides default component name////* Add interface which supplies default factory////* Add interface which supplies default factory////* rename package,https://github.com/microsoft/FluidFramework/commit/c638dc6aa7ab0f8f2bcdcd132b88d6eef29de1a6,203843667,microsoft/FluidFramework,False,False,['#237'],45
135,32f3fa34a9a99c77453742219de13c8bd406a07c,Merge pull request #248 from kurtb/feature/runner-service//Factory pattern for service resources and runners,https://github.com/microsoft/FluidFramework/commit/32f3fa34a9a99c77453742219de13c8bd406a07c,203843667,microsoft/FluidFramework,False,False,['#248'],46
136,fa3d237dff9785bbf9670abb01e6e56913c31741,Implement Dispose pattern on IObjectReference. (#75)//* Implement Dispose pattern on IObjectReference.////Implement the Dispose pattern to enable deterministic release on many cases. Fix a lifetime bug in factories that was exposed deterministically by this work.////Fixes #37////* Move release up to IObjectReference.Dispose.,https://github.com/microsoft/CsWinRT/commit/fa3d237dff9785bbf9670abb01e6e56913c31741,212694868,microsoft/CsWinRT,False,False,"['#75', '#37']",47
137,9e143e362160f71b295d52e27980d84e58f99bed,"Ensure exactly once initialization of CommonMessageCoordinator (#4273)//* Ensure exactly once initialization of CommonMessageCoordinator////The CommonMessageCoordinator requires an asynchronous initialization//step. Since constructors cannot return promisses, the initialization is//delegted to the asynchronous method `initialize`.//`WebviewIPyWidgetCoordinator` takes advantage of the two-step creation//(`constructor` + `initialize`) to use the//`CommonMessageCoordinator::postEmitter` member between construction and//initialization.////This pattern requires a few safeguards to ensure correct use of//`CommonMessageCoordinator` instances by preventing prevent accidental//errors such as://- forgetting to call `initialize`//- calling `initialize` more than once//- using the object before initialization////Use the factory method pattern to create initialized instances of//the CommonMessageCoordinator to ensure the initialization always takes//place. Make the `initialize`method private to avoid double//initialization.////Allow the caller to customize the internal `postEmitter` (an//instance of `EventEmitter<{message: string; payload: any}>`) through//dependency injection in the  constructor and factory method. This way,//the `WebviewIPyWidgetCoordinator` can interact with the emitter without//waiting for the initialization to finish.////* Race on the newly created CommonMessageCoordinator",https://github.com/microsoft/vscode-jupyter/commit/9e143e362160f71b295d52e27980d84e58f99bed,294546561,microsoft/vscode-jupyter,False,False,['#4273'],48
138,8f5b537d916de878f460bf4af4ad2863c59cbeb9,Support attach debug & remove restartRequest support (#42)//* Support attach debug & remove restartRequest support////Signed-off-by: Jinbo Wang <jinbwan@microsoft.com>////* fix review comments////* Use extension factory to implement singleton pattern////* Stop all debug connections when stopping JavaDebugServer,https://github.com/microsoft/java-debug/commit/8f5b537d916de878f460bf4af4ad2863c59cbeb9,102583752,microsoft/java-debug,False,False,['#42'],49
139,e065173262c9f2b993f777eabd79c8c37321da03,"Fixing vltava (#4343)//When refactoring PureDataObjectFactory, I've added helper class / interface to assist in creation of child objects.//This layer makes code less readable, but also code today incorrectly creates objects, using wrong context (i.e. creates root object for context where actually it has to be ""rooty"", i.e. its factory is in root registry on container).//Also Vltava is broken for other reasons, and we use patterns that spread knowledge across multiple modules, thus allowing code to diverge (renames break it).//As a general rule, we should stop using root DDS as an API (i.e. passing around), as that does not provide type safety / protect against changes in structure.",https://github.com/microsoft/FluidFramework/commit/e065173262c9f2b993f777eabd79c8c37321da03,203843667,microsoft/FluidFramework,False,False,['#4343'],50
143,9ad11f734de730685212f59f03d7f73b5d5406ef,"Model for component factory pattern, beginnings of math (#2369)//* more latex ops//* math cursor movement//* cursor movement in math fix right arrow//* fix cursor movement bugs introduced in commit 3a0bf410420ebfc5041c181ef07e65a64a50f6fd//* math cursor movement//* move math toward lex-driven cursor movement//* math input now with lexing and backspace//* fun with background images//* work in progress search  menu//* math entry//* math cursor vertical; presence trimmed and short blink//* cursor visuals//* progress toward search menu parameters//* parameter stuff//* math component start//* Make progress-bars its own npm package. Integrate directly into flow-view.",https://github.com/microsoft/FluidFramework/commit/9ad11f734de730685212f59f03d7f73b5d5406ef,203843667,microsoft/FluidFramework,False,False,['#2369'],51
146,a25ac52ccf9bf27dc0828e6c0b535c3ac898fd86,"Component Registry Improvements (#435)//The major change here is that now ComponentRegistries support containing other ComponentRegistries, rather than just factories. This removes the wrapping anti-pattern where a registry would call a sub registry's get directly which would make the sub registry in-accessible. Since the sub registry was in-accessible it couldn't have other IComponent* extensions. Getting the sub registries is important for a number of scenarios. For instance the registry may provide meta-data about the packages it contains which can be useful for component pickers. A specific package registry could also provide features like copy/paste and upgrade.////This also results in fewer registries being created, as most cases just wanted to propagate entries for the registry, which is now also supported in the first class way, and is backwards compatible with maps as registries, which is by far the largest use case.////The patterns for creating true sub registries is now to create them explicitly, and with a name; just like any other entry. The fits nicely with the component sub-registry pattern. For example, a cdn registry could be named ""cdn"", and have it's entry added to the container regsitry, [""cdn"", Promise.Resolve(new CdnRegistry())]. Components created from this regisitry would then have a package path like [""cdn"", ""@some-scope/some-pkg@some-version"", ""some-component""]. This would tell the the remote context to lookup the registry ""cdn"" off the container registry, and then ask that registry for the package registry, and then finally for the component factory.////Changes:////Remove ComponentFactoryTypes. This was for backwards compatibility which floating factory functions. these are not used anymore, so this can be removed.////Remove ComponentRegistryTypes. This was used to allow map to be used as registries. This however created problems, in that maps don't expose our feature detection interfaces. However, all public api's the took ComponentRegistryTypes, now take NamedComponentRegistires which is a iteratable, and map compatible.////Pass the component's IComponentRegistry to the component runtime, and make it available off IComponentRuntime. This allows easy access to the component's registry for feature discovery.",https://github.com/microsoft/FluidFramework/commit/a25ac52ccf9bf27dc0828e6c0b535c3ac898fd86,203843667,microsoft/FluidFramework,False,False,['#435'],52
148,8e892e08c45eb35008a664b58a3cb8af06617c2a,"Second round of request handler changes (#3090)//**Key changes:**//1. IFluidHandleContext no longer implements IFluidRouter. It's request() method is renamed to resolveHandle().//This reduces number of responsibilities for both interfaces and makes it clearer on the purpose of interfaces.//Note: This causes DataStoreRuntime to have both request() & resolveHandle().//In next iteration, they will have different behaviors - DDS URIs will fail to resolve when request comes in through request(). I.e. it would be impossible to request DDS from data store unless data store handler implements such access.//This is equivalent to making DDSs private on a data store class.////2. 'path' is removed from both IFluidHandle & IFluidRouter. It has been marked deprecated for many versions.////3. Introducing handleFromLegacyUri() for back compat. Using it in couple places in this change to scope amount of churn - all places where it's used needs revisit. More on that below.////4. Fixing how we refer to task manager ID and how we access task manager & agent scheduler. In many places code confuses data store ID vs. type (even though they are the same thing).//Exposing task manager on IContainerRuntimeBase. More on future changes here below.////5. Vltava: changing registry creation pattern - hiding component type names, forcing everything to go through factories. Same pattern should be expanded to all of our examples, as name we use in registry not always matches type on a factory.//   - Also removing using package name as component type - that has pretty big impact on bundle sizes, and is backward compat hazard - type name can't change, which is not obvious looking at package.json.////6. Last edited is simplified - async load path is deprecated, with assumption that it is being used on a critical path of container loading, with detached container creation.////7. PureDataObject method names are busted due to renames for many users (i.e. componentInitializingFirstTime is still used in code in derived classes, when such method was renamed on base class).////Follow up for # 3 & 4 above://Next step will be to pass data object dependencies to them directly through scoping mechanism on object creation, and start removing access to ""globals"" in container. The most obvious example why it's bad is PureDataObject.getService() & getMatchMakerContainerService() implementations. Consumers of those are likely not aware that generateContainerServicesRequestHandler() has to be used by container developer. In fact, getMatchMakerContainerService() is not used in our repo (other than UT)!//Better approach is to pass these dependencies through local (to object) scope, and force fluid object implementation to grab and store such dependencies (using handles) within data object itself, for future use. PureDataObjectFactory.instantiateInstance() can validate required dependencies are present. PR #2950 takes a first step on this path.",https://github.com/microsoft/FluidFramework/commit/8e892e08c45eb35008a664b58a3cb8af06617c2a,203843667,microsoft/FluidFramework,False,False,"['#3090', '#2950']",53
151,8380b723df4484ebe6ab0f51cc56d6d18ffebad5,"chore: improve test runtime by replacing ts-jest with swc (#4336)//#### Details////Profiling our unit tests showed that the overwhelming majority of time spent was in `ts-jest` parsing typescript files. This PR is an experiment in replacing `ts-jest` with an alternative typescript transpiler, `swc`, which is less mature but much faster.////##### Motivation////On my local machine (a Surface Laptop 3 running Windows 21H1 OS Build 19043.985), comparative timings are:////| scenario | `main` (ts-jest) | this PR (swc) |//| - | - | - |//| `yarn test -- -- --coverage=false -- footer-section.test.tsx` | 12s ±1s | 4.3s ±0.2s |//| `yarn test -- -- -- footer-section.test.tsx` | 45s ±3s | 6.2s ±0.0s |//| `yarn test` | 11m54s | 3m ±14s |////On our CI build agents:////| scenario | `main` (ts-jest) | this PR (swc) |//| - | - | - |//| unit tests | [15m1s](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21734&view=logs&j=3613c2bd-8b62-5a70-8491-3e8459586450&t=d1343856-9cd9-5649-cdc6-81bc16053e6f) | [5m9s](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21738&view=logs&j=3613c2bd-8b62-5a70-8491-3e8459586450&t=d1343856-9cd9-5649-cdc6-81bc16053e6f) | //| web-e2e tests | [10m10s](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21734&view=logs&j=952ed597-794a-5756-0328-a93bb2daa2a4&t=46864a42-71df-5c2d-c60f-5fec8d56499d) | [8m6s](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21738&view=logs&j=952ed597-794a-5756-0328-a93bb2daa2a4&t=46864a42-71df-5c2d-c60f-5fec8d56499d) |//| unified-e2e tests | [10m39s](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21734&view=logs&j=c5567cdb-c930-534d-6489-7c2dcf7ac8ee&t=fe6db478-348c-54d0-bafe-001288e28283) | [10m33s](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21738&view=logs&j=c5567cdb-c930-534d-6489-7c2dcf7ac8ee&t=fe6db478-348c-54d0-bafe-001288e28283) |//| total PR build time | [~22m](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build?definitionId=38&_a=summary) | [~14m](https://dev.azure.com/accessibility-insights/accessibility-insights-web/_build/results?buildId=21740&view=results) |////##### Context////This is not as clear cut a transition as the timings above suggest. `swc` is a relatively young project; it's not quite as firmly single-maintainer as `esbuild`, but it's still got a fairly concerning bus factor compared to `tsc` or `babel` (what `ts-jest` hands off to). Still, the timings speak for themselves and it's easy enough to transition back if that ever becomes necessary.////If this experiment goes well, we might consider a similar change to update our webpack config to use `swc-loader` instead of `ts-loader`.////One of the reasons `swc` is so much faster is that it does not perform type-checking. Right now we do type-checking as part of build, but if we were to switch webpack to use swc, we'd then need a separate build step for type-checking (comparable to the current `yarn null:check` step).////Implementation notes://* There are a few subtly important things in the `.swcrc` file, which unfortunately doesn't support comments://    * The `noInterop: true` flag is the equivalent of TypeScript's default `esModuleInterop: false` behavior. It is necessary; we use several modules which cannot be used correctly with interop behavior in play. See https://github.com/swc-project/swc/issues/1778 for details.//    * The empty `""env"": {}` property is necessary to trigger `swc` to respect the `browserslist` entry in `package.json`//    * Directing `swc` to target a reasonably recent set of browsers (via the new `browserslist` entry in `package.json`) is required; there are several tests with snapshots that change under default targeting, and there are a few components that break outright.//    * `tsx: true` is required (it tells `swc` to enable support for `tsx` files; it doesn't prevent non-tsx files from parsing)//* For now, this is using a custom Jest transformer to call `@swc/core`. The swc project maintains a `@swc/jest` transformer, but https://github.com/swc-project/jest/issues/8 prevents it from being able to use the `noInterop: true` setting we require, and I can't submit a PR to patch the project until legal rubber stamps their CLA//* `collapsible-script-provider.tsx` required a hacky workaround for https://github.com/swc-project/swc/issues/1165//    * even after applying the workaround, running jest with and without `--coverage=false` emitted javascript with different whitespace. `collapsible-script-provider.test.ts` needed to be updated to format the resulting js before snapshotting it.//* `src/scanner/processor.ts` used a mutable global in a module to enable its tests to inject test data. This confused swc; I replaced it with a more typical ctor injection pattern.//* `browser-adapter-factory.test.tsx` did a dance around an `import 'webextension-polyfill-ts';` statement to trick the module into thinking `window.chrome.runtime.id` is defined (it checks for this during import and refuses to load if it is not set). The dance we used is not compliant with how ES6 imports are defined to work (they are defined as hoisting import statements to the top of the file, ie, before we stub the window property). TypeScript has an outstanding PR/issue to stop supporting what we were previously doing (https://github.com/microsoft/TypeScript/pull/39764) and swc intentionally doesn't support it (https://github.com/swc-project/swc/issues/1686) (babel doesn't either), so I had to modify how our dance worked by moving it to a separate file and having it use a raw `require()` rather than an `import`.////#### Pull request checklist//<!-- If a checklist item is not applicable to this change, write ""n/a"" in the checkbox -->//- [n/a] Addresses an existing issue: #0000//- [x] Ran `yarn fastpass`//- [x] Added/updated relevant unit test(s) (and ran `yarn test`)//- [x] Verified code coverage for the changes made. Check coverage report at: `<rootDir>/test-results/unit/coverage`//- [x] PR title *AND* final merge commit title both start with a semantic tag (`fix:`, `chore:`, `feat(feature-name):`, `refactor:`). See `CONTRIBUTING.md`.//- [n/a] (UI changes only) Added screenshots/GIFs to description above//- [n/a] (UI changes only) Verified usability with NVDA/JAWS",https://github.com/microsoft/accessibility-insights-web/commit/8380b723df4484ebe6ab0f51cc56d6d18ffebad5,160750261,microsoft/accessibility-insights-web,False,False,"['#4336', '#0000']",54
152,427a8b1215a1f2510f41361b4e6b4d583a397c7c,"@fluentui/react-button: Removing compose in favor of hooks and factories. (#14274)//* Adding re-worked compose.////* Change files////* Reduce!////* redundant text.////* Update packages/react-compose/src/next/README.md////Co-authored-by: Xu Gao <xugao0131@hotmail.com>////* Update packages/react-compose/src/next/types.tsx////Co-authored-by: Xu Gao <xugao0131@hotmail.com>////* Updating a few things, adding some tests.////* Updates Button, ToggleButton, and MenuButton to the new pattern.////* Change files////* Removing buttonbase.////* Update README.md////* Update README.md////* Update packages/react-compose/src/next/README.md////Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>////* Update packages/react-compose/src/next/README.md////Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>////* Update packages/react-compose/src/next/README.md////Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>////* Update packages/react-compose/src/next/README.md////Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>////* Update packages/react-compose/src/next/README.md////Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>////* Update packages/react-compose/src/next/README.md////Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>////* Adding perf test readme. Removing componentRef from Button, per earlier discussions and because it's a perf optimization. Adjusting getSlots to avoid ...rest because it's coming up in flamegraphs as a removable papercut.////* Adding tests, updating some edge cases.////* Updating comment with perf test to validate i did measure. :)////* Updates////* Removing duplicate sass.////* Updates////* Utilitizing omit from utilities, removing duplication.////* Change files////* minor tweak.////* update comment////* fixing types file.////* Cleanup from PR feedback. Renaming create{C} to use{C}, rename state hooks to use{C}State////* Oh figured out a typings issue in TokenSetType.////* Small tweak to button state.////* updating docs.////* update////* update shorthand prop names////* Update packages/react-compose/src/next/getSlots.test.tsx////Co-authored-by: Marija Najdova <mnajdova@gmail.com>////* updates////* More PR feedback updates (simplifyShorthand renamed to resolveShorthandProps, README updates, getSlots updates.)////* updating test naming.////* Updates////* package.json update.////* Updating api name.////* as default = div////* typos in readme.////* fixing build error.////* tweaks////* pr updates based on feedback.////* nit////* Last bits////Co-authored-by: Xu Gao <xugao0131@hotmail.com>//Co-authored-by: Makoto Morimoto <Humberto.Morimoto@microsoft.com>//Co-authored-by: Marija Najdova <mnajdova@gmail.com>",https://github.com/microsoft/fluentui/commit/427a8b1215a1f2510f41361b4e6b4d583a397c7c,60537144,microsoft/fluentui,False,False,['#14274'],55
153,7ea1b1bb87b003b46a96b1a1993a4026653c5643,"Move Save As to ResultSet (#181)// It's an overhaul of the Save As mechanism to utilize the file reader/writer classes to better align with the patterns laid out by the rest of the query execution. Why make this change? This change makes our code base more uniform and adherent to the patterns/paradigms we've set up. This change also helps with the encapsulation of the classes to ""separate the concerns"" of each component of the save as function. ////* Replumbing the save as execution to pass the call down the query stack as QueryExecutionService->Query->Batch->ResultSet//    * Each layer performs it's own parameter checking//        * QueryExecutionService checks if the query exists//        * Query checks if the batch exists//        * Batch checks if the result set exists//        * ResultSet checks if the row counts are valid and if the result set has been executed//    * Success/Failure delegates are passed down the chain as well//* Determination of whether a save request is a ""selection"" moved to the SaveResultsRequest class to eliminate duplication of code and creation of utility classes//* Making the IFileStream* classes more generic//    * Removing the requirements of max characters to store from the GetWriter method, and moving it into the constructor for the temporary buffer writer - the values have been moved to the settings and given defaults//    * Removing the individual type writers from IFileStreamWriter//    * Removing the individual type writers from IFIleStreamReader//* Adding a new overload for WriteRow to IFileStreamWriter that will write out data, given a row's worth of data and the list of columns//* Creating a new IFileStreamFactory that creates a reader/writer pair for reading from the temporary files and writing to CSV files//* Creating a new IFileStreamFactory that creates a reader/writer pair for reading from the temporary files and writing to JSON files//* Dramatically simplified the CSV encoding functionality//* Removed duplicated logic for saving in different types and condensed down to a single chain that only differs based on what type of factory is provided//* Removing the logic for managing the list of save as tasks, since the ResultSet now performs the actual saving work, there's no real need to expose the internals of the ResultSet//* Adding new strings to the sr.strings file for save as error messages//* Completely rewriting the unit tests for the save as mechanism. Very fine grained unit tests now that should cover majority of cases (aside from race conditions)//////* Refactoring maxchars params into settings and out of file stream factory////* Removing write*/read* methods from file stream readers/writers////* Migrating the CSV save as to the resultset////* Tweaks to unit testing to eliminate writing files to disk////* WIP, moving to a base class for save results writers////* Everything is wired up and compiles////* Adding unit tests for CSV encoding////* Adding unit tests for CSV and Json writers////* Adding tests to the result set for saving////* Refactor to throw exceptions on errors instead of calling failure handler////* Unit tests for batch/query argument in range////* Unit tests////* Adding service integration unit tests////* Final polish, copyright notices, etc////* Adding NULL logic////* Fixing issue of unicode to utf8////* Fixing issues as per @kburtram code review comments////* Adding files that got broken?",https://github.com/microsoft/sqltoolsservice/commit/7ea1b1bb87b003b46a96b1a1993a4026653c5643,63441273,microsoft/sqltoolsservice,False,False,['#181'],56
154,6d4f2f5bf92f86a8bbe52b6ecfed4bd1eb5e4ed1,"OpenVINO EP v2.0 (#3585)//* Added FP16 transformations////* Revert ""Added CMAKE_BUILD_TYPE to make building dynamic""////This reverts commit d3e17af1af655cfdc4d2fec33f52055caa525e85.////* Added FP16 transformations for FP16 builds////* Backend logic cleanup////Cleans the backend(intel_graph.*) code in the following ways:-////1. Minimize global usage: Since all the IR graphs need to be//re-generated on every Infer, it is bad practice to rely on globals//for their saving and usage as there would be multiple readers and//writers to the same global variable leading to incorrect usages or//contentions. This change replaces globals with locals where possible.// This change also fixes an existing bug with due to//incorrect global usage.////2. Remove all unused functions.////3. Remove all unused headers and prepocessor directives.////* removed commented out code////* Disabled default optimization for Intel EP////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Fix missed plugins.xml for python bindings////* Fixed the build after latest master changes////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Disabled unsupported ops for accelerators////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Added some more disabled ops////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Added environment variable to enable debugging////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Added more debug statements////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Fixed unsupported ops list for GPU and VPU////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Fixed unsqueeze unit tests////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Added error message to the status////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Overwrite Model proto with shape info from data////Overwrites the shape info of Model proto with the shape from//actual input data. Needed for inferring models with Dynamic//shapes.////* Removed print statement and disabled where op////Signed-off-by: suryasidd <surya.siddharth.pemmaraju@intel.com>////* Disabled Reshape with Empty initializer////* Added more debug statements for 1P////* Don't allow 1D inputs with symbol for dimension////* Disabled some 3rd phase ops////* Disabled split and added zero dimension check for OutputDefs////* Cleanup zero dimensionality check////* Added different data type check for inputs and initializers////* Added conditions for Mod, Cast and Pad////* Removed unused variable////* Disabled scan and added conditions for squeeze////* Added changes for fixing all C++ unit tests////* Implements Backend Manager class for caching////Backend Manager provides a layer of indirection between EP interface//and OV backend that provides caching services for models with//symbolic dims in input shapes.////* clean up commented blocks////* clang-formatting////* Read I/O type info from ModleProto////Read the tensor element type information from ModelProto object,//as FusedNode is no longer available.////* code cleanup////* clang-formatting////* Added print statement for jenkins////* Disabled some python tests////* Changed the path of convert fp32 to fp16 hpp////* Added conditions for BatchNorm in GetCapability////* Fixed failed tests////* Revert ""Added conditions for BatchNorm in GetCapability""////This reverts commit c3c28c3b00d27892c42546b35dacdd807a48ee90.////* Added Intel to onnxruntime backends////* pick up vars set by OV package setupvars.sh////* Added conditions for Identity////* remove a few cout prints////* Added conditions for GPU_FP32 unit tests////* Revert ""pick up vars set by OV package setupvars.sh""////This reverts commit 8199e029c03eae21a1a7ef6bfdc93d00e5d0198b.////* Commented out fatal message for protobuf////* Might need to be removed////* Add interface class for current backend////* moved common logic to base class////* simplified cpu backend////* Removed unused headers////* use vectors to save i/o tensors for windows compatibility////* move utils fxns to backend_utils namespace////* rename ov_backend to ibackend////* Factory pattern for backend creation////* rename CPU backend to Basic backend////* renamed to vad-M and added to factory list////* Added conditions for VPU////* Added print statements////* Changed the logic for checking for symbolic shapes////* Modified logic for zero dimension check////* Removed VPU single dimension condition////* Removed comments////* Modified logic in DimensionCheck method////* Remove legacy OpenVINO EP////Remove all the legacy code for OpenVINO EP. UEP code will take its//place going forward.////This change does NOT remove OVEP files in the following areas asa//they will be reused by UEP:-//1. Documentation: All .md files//2. Docker releated files//3. Python bindings//4. Java bindings//5. C# bindings//6. ORT Server//7. CI pipeline setup files////* Rename Intel EP to OpenVINO EP////* Added unique names to the subgraphs////* Removed subgraphs with only constant inputs////* Modified subgraph partitioning algorithm to remove const input subgraphs////* Apply suggestion to onnxruntime/core/providers/openvino/openvino_execution_provider.cc////* Tracking output names to fix the output order bug////* Changed output names to a unordered map////* Modified logic to check for symbolic input shapes////* Fixed a bug in Reshape check////* Added empty model path to Model constructor////* Made necessary changes to cmake to build from the binary package////* Changed INTEL_CVSDK_DIR to INTEL_OPENVINO_DIR////* Enable dyn device selection with C++ API////* Added Round operator to unsupported list////* Modified subgraph partition logic for MYRIAD////* Removed supported ops from the list////* Enable dyn dev selection in Py API's////* Add documentation for dynamic device selection////* Use MYRIAD || HDDL instead of VPU////* Removed temporary cast of Int64 to FP32////* Disabled unit Tests for CPU_FP32 and GPU_FP32////* Removed default ""CPU"" from unit tests to allow overriding////* Removed ops Concat, Squeeze, Unsqueeze from unsupported list////* Get the device id from info////* Removed overwriting device_id and precision////* Enabled ConvTranspose and EyeLike////* Reordered unsupported ops in alphabetical order////* Fixed syntax error////* Fixed syntax error////* Code clean-up: Handle exceptions, logs and formatting////Code formatted according to ORT coding guidelines.////* remove debug print from pybind code////* updated docs with ops and models////* formatting prints////* Added default values for c and j for openvino////* Overriding the values set for c and j to be 1//* BACKEND_OPENVINO should be empty if openvino is not in build////* Overriding c value with default for perftest////* fix VAD-M device string bug////* Add IE error details to exceptions////* Use IE specific device names in EP////* Add VAD-F (FPGA) device support////* Removed unecessary libraries from whl package////* Code changes for Windows compatibility////* Add VAD-F option to python API////* [revert before merge] cmake changes for RC////* Enable Windows build in CMake////* Unset macro OPTIONAL for windows builds////inference_engine.hpp's include chain defines a macro 'OPTIONAL'//which conflicts with onnx project's headers when using MSVC. So//would need to explictly unset it for MSVC.////* Use a single copy of plugin/IE::Core////Defined as a static member in Backend manager////* Remove restriction of single subgraphs for  myriad////* Passed subgraph name to Backend to enhance log statements////* Disabled zero dimension conditions////* Disabled concat to remove zero dims////* Enabled building ngraph as part of ORT////* Removed serializing and added versioning////* Fix CPU_FP32 unit tests////* Removed unecessary condition////* add ngraph.so.0.0 to .whl////* Check for zero dimensions only for inputs and outputs////* Restrict loading only 10 subgraphs on myriad////* Build ngraph.dll within UEP. Doesn't link yet////* Rename Linux included libngraph.so to libovep_ngraph.so////Renames locally built libngraph.so containing ONNX importer to//libovep_ngraph.so in order to avoid linkage conflicts with//libngraph.so supplied by OpenVINO binary installer.//Applies only for Linux builds.////* use output_name cmake properties for lib name////* fix .so name format in lib_name.patch////* CMake code cleanup////* Rename WIN32 included ngraph.dll to ovep_ngraph.dll////To avoid conflict with ngraph.dll distributed by openvino.////* Added myriad config for networks without 4 dimensions////* Loading the 10 max clusters for inference on myriad////* Refactor code and add Batching support////Encapsulate subgraph settings into context structs.////Add batching support for completely supported models.////* Disabled some broken tests////* use input_indexes to avoid batch-checking initializers////* Avoid static initialization order error on WOS////* Added candy to broken tests////* InternalCI changes for 2020.2////* Updated DLDT instructions////* Unsaved changed in install_openvino.sh////* Changes after manual check////* Remove custom ngraph onnx_import build for WOS////ONNX Importer on WOS does not have protobuf issue.////* Remove FP32ToFP16 ngraph pass////This conversion is performed implicitly within IE.////* Surround debug logic by #ifndef NDEBUG////* remove invalid TODO comments////* removed references to ngrpah-ep////* clang-formatting////* remove commented code////* comment edits////* updating copyright year to that of first OpenVINO-EP release////* remove redundant log msg////* Modified operator and topology support////* Update build instructions////* doc formatting////* Fixed clip unit tests////* Revert ""Remove FP32ToFP16 ngraph pass""////This reverts commit ec962ca5f315a5658ad980e740196f19de2639c1.////* Applying FP16 transformation only for GPU FP16////* Fixed GPU FP32 python tests////* automatically use full protobuf////* disable onnxrt server for now////* Disabled upsample////* update dockerfile instructions////* Removed MO paths and added ngraph path////* Remove OVEP from ORT Server docs////Will put it back in after validation////* Updated path to Ngraph lib////* Disabled Resize and some other python tests////* Removed unnecesary header files////* Use commit SHA to fetch ngraph repo////* Avoid un-needed file changes due to version update////* Fixed clip tests////* Fixed Pow, max and min onnx tests////* build.md doc typo////* Update cmake patch command for ngraph src////* remove dead cmake code for onnxruntime_USE_OPENVINO_BINARY////* use spaces instead of tab////* remove commented code////* Add info about protobuf version////* edit debug env var and enable for WIN32////* specify only version tag of 2020.2 for dockerbuilds////* remove unnecessary file changes////* Pass empty string as default argument to C# tests////* Use ${OPENVINO_VERSION} to name openvino install directory in CI builds////* Enabled unnecessarily disabled tests////* Fixed ngraph protobuf patch////* Fixed error in protobuf patch////* Revert ""Use ${OPENVINO_VERSION} to name openvino install directory in CI builds""////This reverts commit 89e72adb8bf3b9712f5c81c5e13fe68c6c0df002.////* Remove unsetting OPTIONAL macro////This is no longer used in recent ONNX update onnx/onnx@da13be2,//so this unset workaround is no longer necessary.////* Use a null string  default argument for C# API////* Set OpenVINO version yml files and pass to CI Docker builds////Git Tag info for DLDT as well as install directory are set//using this value.////This reverts commit 9fa9c20348ed72ae360a95c98e9b074d2f9fafc5.////* Documentation: recommendation and instructions for disabling ORT graph optimizations////* more doc updates////* Reduced the number of models according to CI time constraints////Co-authored-by: ynimmaga <yamini.nimmagadda@intel.com>//Co-authored-by: suryasidd <surya.siddharth.pemmaraju@intel.com>//Co-authored-by: Mikhail Treskin <mikhail.treskin@intel.com>//Co-authored-by: mbencer <mateusz.bencer@intel.com>//Co-authored-by: Aravind <aravindx.gunda@intel.com>//Co-authored-by: suryasidd <48925384+suryasidd@users.noreply.github.com>",https://github.com/microsoft/onnxruntime-openenclave/commit/6d4f2f5bf92f86a8bbe52b6ecfed4bd1eb5e4ed1,290272833,microsoft/onnxruntime-openenclave,False,False,['#3585'],57
155,795eba3da6419a22c33fc04419648b3a942c7a80,"Edit Data Service (#241)//This is a very large change. I'll try to outline what's going on.////1. This adds the **EditDataService** which manages editing **Sessions**.//    1. Each session has a **ResultSet** (from the QueryExecutionService) which has the rows of the table and basic metadata about the columns //    2. Each session also has an **IEditTableMetadata** implementation which is derived from SMO metadata which provides more in-depth and trustworthy data about the table than SqlClient alone can.//    3. Each session holds a list of **RowEditBase** abstract class implementations//        1. **RowUpdate** - Update cells in a row (generates `UPDATE` statement)//        2. **RowDelete** - Delete an entire row (generates `DELETE` statement)//        3. **RowCreate** - Add a new row (generates `INSERT INTO` statement)//    4. Row edits have a collection of **CellUpdates** that hold updates for individual cells (except for RowDelete)//        1. Cell updates are generated from text//     5. RowEditBase offers some baseline functionality//        1. Generation of `WHERE` clauses (which can be parameterized)//        2. Validation of whether a column can be updated//2. New API Actions//    1. edit/initialize - Queries for the contents of a table/view, builds SMO metadata, sets up a session//    2. edit/createRow - Adds a new RowCreate to the Session//    3. edit/deleteRow - Adds a new RowDelete to the Session//    4. edit/updateCell - Adds a CellUpdate to a RowCreate or RowUpdate in the Session//    5. edit/revertRow - Removes a RowCreate, RowDelete, or RowUpdate from the Session//    6. edit/script - Generates a script for the changes in the Session and stores to disk//    7. edit/dispose - Removes a Session and releases the query//3. Smaller updates (unit test mock improvements, tweaks to query execution service)////**There are more updates planned -- this is just to get eyeballs on the main body of code**////* Initial stubs for edit data service////* Stubbing out update management code////* Adding rudimentary dispose request////* More stubbing out of update row code////* Adding complete edit command contracts, stubbing out request handlers////* Adding basic implementation of get script////* More in progress work to implement base of row edits////* More in progress work to implement base of row edits////* Adding string => object conversion logic and various cleanup////* Adding a formatter for using values in scripts////* Splitting IMessageSender into IEventSender and IRequestSender////* Adding inter-service method for executing queries////* Adding inter-service method for disposing of a query////* Changing edit contract to include the object to edit////* Fully fleshing out edit session initialization////* Generation of delete scripts is working////* Adding scripter for update statements////* Adding scripting functionality for INSERT statements////* Insert, Update, and Delete all working with SMO metadata////* Polishing for SqlScriptFormatter////* Unit tests and reworked byte[] conversion////* Replacing the awful and inflexible Dictionary<string, string>[][] with a much better test data set class////* Fixing syntax error in generated UPDATE statements////* Adding unit tests for RowCreate////* Adding tests for the row edit base class////* Adding row delete tests////* Adding RowUpdate tests, validation for number of key columns////* Adding tests for the unit class////* Adding get script tests for the session////* Service integration tests, except initialization tests////* Service integration tests, except initialization tests////* Adding messages to sr.strings////* Adding messages to sr.strings////* Fixing broken unit tests////* Adding factory pattern for SMO metadata provider////* Copyright and other comments////* Addressing first round of comments////* Refactoring EditDataService to have a single method for handling//session-dependent operations//* Refactoring Edit Data contracts to inherit from a Session and Row//operation params base class//* Copyright additions//* Small tweak to strings//* Updated unit tests to test the refactors////* More revisions as per pull request comments",https://github.com/microsoft/sqltoolsservice/commit/795eba3da6419a22c33fc04419648b3a942c7a80,63441273,microsoft/sqltoolsservice,False,False,['#241'],58
156,dc5812c083e967b2adf1c085422d6539e2f409b3,Refresh list of interpreters if python env is created in workspace (#3024)//* Refresh list of interpreters if venv is created in workspace//* Remove check//* Add tests//* Add news entry//* Skip test if not unit test//* Add functional tests//* Get DI container from Extension api//* Use RelativePattern as pattern string does not work on Windows//* Dynamic venv dirs//* Skip python 2,https://github.com/microsoft/vscode-jupyter/commit/dc5812c083e967b2adf1c085422d6539e2f409b3,294546561,microsoft/vscode-jupyter,False,False,['#3024'],59
157,dc5812c083e967b2adf1c085422d6539e2f409b3,Refresh list of interpreters if python env is created in workspace (#3024)//* Refresh list of interpreters if venv is created in workspace//* Remove check//* Add tests//* Add news entry//* Skip test if not unit test//* Add functional tests//* Get DI container from Extension api//* Use RelativePattern as pattern string does not work on Windows//* Dynamic venv dirs//* Skip python 2,https://github.com/microsoft/vscode-python/commit/dc5812c083e967b2adf1c085422d6539e2f409b3,106462765,microsoft/vscode-python,False,True,['#3024'],60
164,850de7171cb5a56afc31ee1359462266e117292c,"Merge back from release to main (#14758)//* Cherry pick from main (#14644)////* Update shipped wheels version (#14615)////* Update shipped wheels version////* News item////* Remove redundant files (#14620)////* Add extension dependencies at build time (#14636)////* Use Node 12.15 in Insiders and Release GitHub Actions (#14641)////* Use Node 12.15 on all Insiders and Release GitHub Actions jobs (#14642)////Co-authored-by: Joyce Er <joyceerhuiling@gmail.com>////* Cherry pic fixes into release for tests. (#14673)////* Added FSWatching base class and made related changes (#14605)////* Add FSWatching locator base class////* Correct glob pattern to not match python3.2whoa////* Add documentation of python binary watcher////* Fix lint errors////* Update ignore list////* Add disposable registry////* Modify FSWatching Locator////* Code reviews////* Use string[]////* Remove list disposable getter////* Fix failing global virtual env watcher tests (#14633)////Co-authored-by: Kartik Raj <karraj@microsoft.com>////* Version, change log and cherrypicks for nov release (#14696)////* change log updates////* Update gifs////* Fix for interpreter selection (#14693)////* Fix for interpreter selection////* Fix linting errors////* Minor tweak to property removal////* Cherry pick ""Bind function to correct this for workspace syms"" (#14743)////* Fix #14674: Enable overriding ""pythonPath"" in the launcher////Fix #12462: Update launch.json schema to add ""python"" and remove ""pythonPath""////Split the ""pythonPath"" debug property into ""python"", ""debugAdapterPython"", and ""debugLauncherPython"".////Do most debug config validation on fully expanded property values via resolveDebugConfigurationWithSubstitutedVariables().////Add fixups for legacy launch.json with ""pythonPath"".////* Point release change log and version update (#14750)////* Point release change log and version update////* Fix process picker (#14700)////* Workaround VSCode bug for process picker////* Fix how we pass in icons to VSCode////* update change log with cherry pick////Co-authored-by: Kartik Raj <karraj@microsoft.com>////Co-authored-by: Joyce Er <joyceerhuiling@gmail.com>//Co-authored-by: Kartik Raj <karraj@microsoft.com>//Co-authored-by: Jake Bailey <5341706+jakebailey@users.noreply.github.com>//Co-authored-by: Pavel Minaev <pminaev@microsoft.com>",https://github.com/microsoft/vscode-python/commit/850de7171cb5a56afc31ee1359462266e117292c,106462765,microsoft/vscode-python,False,True,"['#14758', '#14644', '#14615', '#14620', '#14636', '#14641', '#14642', '#14673', '#14605', '#14633', '#14696', '#14693', '#14743', '#14674', '#12462', '#14750', '#14700']",61
168,5a62abf88ed17d369545a4e2a1aec4304d2bd18a,"Fix ConvenienceVariablesCase.test_with_dsym_and_run_command test after r227285//Summary:/This fixes test_with_dsym_and_run_command and test_with_dwarf_and_run_commands tests after r227285: ""SBThread::GetDescription should use the Thread format instead of making up""//log:/```/======================================================================/FAIL: test_with_dsym_and_run_command (TestConvenienceVariables.ConvenienceVariablesCase)/Test convenience variables lldb.debugger, lldb.target, lldb.process, lldb.thread, and lldb.frame./----------------------------------------------------------------------/Traceback (most recent call last):/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 456, in wrapper/    return func(self, *args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 612, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 18, in test_with_dsym_and_run_command/    self.convenience_variables()/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 83, in convenience_variables/    patterns = ['SBThread: tid = 0x[0-9a-f]+'])/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 2091, in expect/    msg if msg else EXP_MSG(str, exe))/AssertionError: False is not True : 'print lldb.thread/thread #1: tid = 0x80d885, 0x0000000100000f4d a.out`main(argc=1, argv=0x00007fff5fbff078) + 29 at main.c:4, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1/' matches expected result/Config=x86_64-clang/======================================================================/FAIL: test_with_dwarf_and_run_commands (TestConvenienceVariables.ConvenienceVariablesCase)/      Test convenience variables lldb.debugger, lldb.target, lldb.process, lldb.thread, and lldb.frame./----------------------------------------------------------------------/Traceback (most recent call last):/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 473, in wrapper/    return func(self, *args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 641, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 612, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 537, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 537, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 28, in test_with_dwarf_and_run_commands/    self.convenience_variables()/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 83, in convenience_variables/    patterns = ['SBThread: tid = 0x[0-9a-f]+'])/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 2091, in expect/    msg if msg else EXP_MSG(str, exe))/AssertionError: False is not True : 'print lldb.thread/thread #1: tid = 0x80d8d3, 0x0000000100000f4d a.out`main(argc=1, argv=0x00007fff5fbff078) + 29 at main.c:4, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1/' matches expected result/Config=x86_64-clang/```///Reviewers: zturner, jingham, abidh, clayborg//Subscribers: abidh, lldb-commits, jingham, clayborg, zturner//Differential Revision: http://reviews.llvm.org/D7464//llvm-svn: 228415",https://github.com/microsoft/checkedc-clang/commit/5a62abf88ed17d369545a4e2a1aec4304d2bd18a,60645050,microsoft/checkedc-clang,False,False,"['#1', '#1']",62
180,dd964828e1ec10c6ddf8966e9b8516910273fe6a,"Merge/05 24 (#903)//* JSON definitions for colour blocks (#838)////Replaces old colour block definitions with a Blockly.defineBlocksWithJsonArray(..) call. Generator unit tests continue to load and pass, signifying compatibility with prior block definitions.////Replaces extension 'math_number_tooltip' with the reusable 'parent_tooltip_when_inline' extension, also used by colour_picker. Includes tests.////* Rewrite tree.service.js.////- Remove unnecessary code and functions.//- Add documentation where needed.//- Fix a bug arising when a block on the workspace is attached to an existing link.////* Use setValue in fieldTextInput so that procedure renaming works////* Further cleanup and removal of unnecessary functions. Pull some strings out for i18n.////* Use bindEvent_ instead of bindEventWithChecks_ for longStop////* Clean up workspace.component.js. When moving a block from one place to another, move all blocks after it too, and adjust the active descs accordingly.////* Unit tests for JSON block definitions (just the start) (#850)//// * Beginnings of a JSON block definition unit test set.// * Dispose of unit test workspaces and blocks in finally blocks.// * Clarify JSON error message by echoing arg notation.////* New blocks text_count, text_replace, and text_reverse (#830)////Includes generators for all languages and units tests on those generators.////* Fixing combo boxes getting out-of-sync with NVDA.////Combo boxes need to be special cased like text input. Also, Escape is//a reserved button in NVDA, so I added Enter as a way to ""submit and//move up a level"" in addition to escape, so these boxes can be edited//while NVDA is on.////* Temporary fix for broken text field validation.////* rebuild////* Add a block to reverse a list (#844)////* Localisation updates from https://translatewiki.net.////* Porting math.js blocks to JSON (#846)////Moving all `math.js` definitions into a single JSON array, complete with i18n syntax for all messages, dropdowns, and tooltips.////Adding Blockly.Extensions.buildTooltipForDropdown(..) to facilitate the creation and error-checking of tooltips that update based on the value of a dropdown.////Now warn on raw string in JSON 'extensions'.////* Fixing JSON support for images in dropdowns. Adding tests. (#851)////Fixes #848.////* Update README.md////Add a link to our forum.////* Correcting math_change color////* Enable custom flyout categories.////* Add some safety////* Update the set of reserved words in Python to reflect the current state of Python (2.7 and 3.6). (#861)////* Localisation updates from https://translatewiki.net.////* .getOptions_() to .getOptions() (#869)////Fixes #867.////* Blockly.Extensions.buildTooltipForDropdown(..): Deferred validation. (#870)////Defer tooltip message string check until after load, when all Blockly.Msg should be loaded.//Avoids validation in headless mode, due to lack of document.readyState.////* annotation updates////* annotation updates////* jsdoc corrections (#874)////* Remove use of Array.prototype.includes which is not implemented in IE or Edge < 14. Fixes google/blockly#876.////* Attempt to work around the IE/Edge bug where `getComputedTextLength()` throws an exception when the SVG node is not visible. This workaround forces a re-render, which in turn, forces a re-calculation of the node width once a block is inserted into the workspace SVG. This workaround is only executed on IE and Edge. See https://groups.google.com/forum/#!topic/blockly/T8IR4t4xAIY for the initial discussion of this issue.////* Change CSS transforms to work with older browsers (#879)////* Change the setting of the CSS transform properties on SVG nodes to set both the unprefixed version and the `-webkit-` prefixed version so that Blockly correctly renders in order browsers, such as Safari < 9 and iOS Safari < 9.2. For discussion of this issue, see https://groups.google.com/forum/#!topic/blockly/o3pERaRQhSg////* Correct the separation between the CSS transform property and the rest of the CSS that was in the variable misleadingly called ""transform"".////* Don't try to get block position in a headless workspace////* Stop bumping neighbours in headless blockly////* Place context menu correctly on touch////* Clear all active desc ids when the 'Erase Workspace' button is pressed.////* Fix a bug where splicing a block between two linked blocks disconnects the group and messes up the focus.////* Deleting a top-level block does not cause blocks after it to be deleted. Properly handle the active desc for this case.////* Localisation updates from https://translatewiki.net.////* Use the empty field placeholder for dropdowns that do not have a value selected.////* Bugfix for #892. I incorrectly converted one CSS transform setting to use the cross-browser setting function in 40a063763c74b3f712c3057565966c25d5cfdb10. (#895)////* Adding @namespace annotations for JSDoc. (#900)////* Fix typo causing TypeError (#901)////* Pinning the angular2 dependency, and including licenses. (#893)////* Add skeleton for tests on rendered workspaces////* Fix some lint errors////* Localisation updates from https://translatewiki.net.////* Correct changedState in setWarningText() (#908)////When clearing warnings on blocks with IDs, the changedState variable should be true if the text changed. This will trigger the block being reshaped and remove the space for the notification icon (this.bumpNeighbours_).////* Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin(). (#907)////Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin().//This adds support for a common use pattern in extensions, and adds//error checking to avoid future incompatibilities.////* Porting Logic blocks to JSON (#913)////Extensions, mixins, mutators and constants now grouped under the new namespace Blockly.Constants.Logic.////* Improving errors/warnings with Block.toDevString() and Connection.toString(). (#911)////* Add isEditable to field, and add tests////* Separate tests////* Blockly.Constants.Math and Blockly.Constants.Colour extension constants (#916)////Also, correcting quotes in logic.js.////* Correction to logic_ternary type check (#920)////* Porting Loop blocks to JSON (#919)//// * Improved documentation on `Blockly.Extensions.buildTooltipForDropdown`// * Replaced incorrect uses of `@mixes` JSDoc annotation (on mixin extensions) with `@augments Blockly.Block`.// * Added Blockly.Extensions.buildTooltipWithFieldValue() extension helper.////* Workspace isDraggable////* JSONify simple list blocks////* JSONify variable blocks////* Initial text block, with a mixin to generate quote image fields. (#923)////Text block now uses the extension ""text_quotes"", supported by Blockly.Constants.Text.QUOTE_IMAGE_MIXIN.quoteField_(fieldName), so that each platform can use the best platform appropriate image (size, density, etc.) for the quotes.////* Add no-op stub .neighbors() for headless Connection.////* Adding tests for logic_ternary block in a new jsunit test framework.////* Correcting output of the logic_null block.////* Potential bug fix for issue #661////* extension controls_if => controls_if_mutator.////* Renamed extension function constant, and moved variables into the mixin.////* Dereference string table references when loading variable fields from JSON.////* Moving FieldImage string dereferencing back into Block.interpolate_() (part of jsonInit()). This sets a clear boundary of where dereferencing should happen.//Towards this, I've added message dereferencing for other field types here, as well.  I've used a pattern of field-type specific helper functions.////* Addressing comments.////* .utils.replaceMessageReferences(..) now gracefully returns non-string arguments.////* Clarification update.//Unraveling nested ternaries in Blockly.utils.tokenizeInterpolation_()////* Code correction from previous commit. Moved style to css.js and set ROUNDING=15;////* Fixing Enter so it properly propogates to dropdown selection. (#934)////Fixing FieldSegment so it updates dropdowns when the underlying dropdown changes.////* Localisation updates from https://translatewiki.net.////* Make variable add set/get block in context menu obey block limits////* Localisation updates from https://translatewiki.net.////* Use mutator extension for controls_if block////* Fix #946. Don't check for presence of constants.js////* Fix #945 (annotations) and an eslint issue (constant condition)////* Localisation updates from https://translatewiki.net.////* Fix #950: BlockFactory typo and copypasta////* Add safety checks for mutators and non-mutator extensions////* Handle mutations with both mixins and functions////* Adding warning on duplicate JSON block definition.////* period////* Make some functions private and add tests////* Localisation updates from https://translatewiki.net.////* Update help URL per #937.//Replace URL usages of %28 and %29 with normal parenthesis characters. (They aren't replaced by JavaScript's encodeURIComponent() function, and seem to work just fine without them.)//Added missing semicolon in build.py.////* Typo in comment.////* Make it easier to read the code that creates the variable category in the tolbox////* Adding Blockly.Xml.appendDomToWorkspace() (#962)////This is a copy (with additional comments) of PR #822 (and also #961) by @qnoirhomme with unrelated files removed. See #822 for full review.////* Annotation fixes////* Fix bug #904 by explicitly grabbing focus on the workspace svg element. (#964)////* Potential fix for #888.  Stops checking whether we are mid workspace drag since we do not always get mosue up events when blockly is in an iframe. (#899)////* Adding new minimap demo////* Basic code style changes. Adding a few more comments. Return early if disableScrollChange in onScrollChange listener.////* `unction` to `function` corrects #962 (#970)////* Cross browser friendly fix for #904.  This calls blur and focus from … (#972)////* Cross browser friendly fix for #904.  This calls blur and focus from workspace.markFocused and removes the event listener on focus events.  markFocused is called from all of our mouse down handlers, which triggers the focus event leading to an infinite loop of focus.  As far as I can tell, there are no uses of the focus handler that actually did anything for us.////* Localisation updates from https://translatewiki.net.////* Another attempt to fix #904 to keep the page from jumping to the focused workspace in IE 11 (#974)////* Adding horizontal scrolling. Changed scroll change callbacks from onScroll_ to setHandlePosition. onScroll_ is not challed when workspace is dragged.////* set background color to lilac if opening the playground from file:////* Registering mousemove and mouseup listener in mousedown event. Mousemove and Mouseup events are now listening over document.////* Localisation updates from https://translatewiki.net.////* Fix #967 by overriding the updateWidth method in FieldImage blocks to be a no-op. FieldImage fields should not change size after the width is set in init.  The updateWidth and, therefore, getCachedWidth is now being called by BlockSvg renderFields_ (see commit d55d9cbd9ff308ff5e361cf77acabb61a4bf4695). IIUC, updateWidth/getCachedWidth was only called from render before which is overridden in FieldImage to be a no-op already. (#979)////* Fix #969////* Localisation updates from https://translatewiki.net.////* Fix #986.  Looks like the original PR just forgot this block. (#992)////* rebuild develop (#996)////* Added the variable modal and component and implemented basic renaming functionality. (#991)////* Fixing commenting from the last commit. (#1000)////* Localisation updates from https://translatewiki.net.////* RemoveAttribute doesn't work on SVG elements in IE 10.  Use setAttribute to null instead.////* Adding the remove variable modal and functionality to accessible Blockly. (#1011)////* Minimap position bug fix for browsers other than chrome. Added touch support.////* Adding an add variable modal to accessible Blockly. (#1015)////* Adding the remove variable modal and functionality to accessible Blockly.////* Adding the add variable modal for accessible Blockly.////* Block browser context menu in the toolbox and flyout////* Add links to the dev registration form and contributor guidelines////* Miscellaneous comment cleanup////* Adding the common modal class. (#1017)////Centralizes accessible modal behavior.////* - Changed error message referencing 'procedure' instead of 'function' (#1019)////- Added iOS specific UI messages//- Fixed bug with js_to_json.py script where it didn't recognize ' character////* - Allows use of Blockly's messaging format for category name, colour,… (#1028)////...in toolbox XML.//- Updated code editor demo to use this message format//- Re-built blockly_compressed.js////* Making text_count use a text color (like text_length, which also returns a number). (#1027)////* Enable google/blockly with continuous build on travis ci (#1023) (#1035)////* create .travis for ci job////* initial checkin for blocky-web travis ci job////* rename file to .travis.yaml for typo////* remove after_script////* added cache////* rename .travis.yaml to .travis.yml////* Update .travis.yml////* include build script////* fix yaml file format issue////* debug install part////* debug build issue////* Update .travis.yml////* remove cache for now////* Update .travis.yml////* Update .travis.yml////* Update .travis.yml////* more debug info////* Update .travis.yml////* Update .travis.yml////* fix typo////* installing chrome browser////* remove chrome setting config////* run build.py as part of npm install////* Update .travis.yml////* update karma dependency////* use karma as test runner////* fix typo////* remove karma test for now////* Update .travis.yml////* Update package.json////* add npm test target////* add browserstack-runner depdendency////* update browser support////* fix typo for test target////* fix chrome typo////* added closure dependency////* add google-closure-library////* include blockly_uncompressed.js and core.js dependency////* uncomment out core/*.js files////* add kama job as part of install////* remove browserstack add on for now////* fix karma config typo////* add karma-closure////* add os support////* remove typo config////* include more closure files////* change os back to linux////* use closure-library from node_modules////* change log level back to INFO////* change npm test target to use open browser command instead of karma////* change travis test target to use open command instead of karma////* list current directory////* find what's in current dir////* typo command////* Update .travis.yml////* typo again////* open right index.html////* use right path for index.html////* xdg-open to open default browser on travis////* exit browser after 5s wait////* change timeout to 1 min////* exit after opening up browser////* use browser only////* use karma////* remove un-needed dependency////* clean up script section////* fix typo////* update build status on readme////* initial commit for selenium integration tests////* update selenium jar path////* fix test_runner.js typo////* add more debug info////* check java version////* add && instead of 9288////* fix java path////* add logic to check if selenium is running or not////* add some deugging info////* initial commit to get chromedriver////* add chromedriver flag////* add get_chromedriver.sh to package.json and .travel////* change browser to chrome for now////* fix path issue////* update chromdriver path////* fix path issue again////* more debugging////* add debug msg////* fix typo////* minor fix for getting chromedriver////* install latest chrome browser////* clean up pakcage.json////* use npm target for test run////* remove removing trailing comma////* fix another trailing comma////* updated travis test target////* clean up scripts////* not sure nmp run preinstall////* redirect selenium log to tmp file////* revert writing console log to file////* update test summary////* more clean up////* minor clean up before pull request////* resolved closure-library conflict////1. add closure-library to dependencies instead of devDependencies.//2. add lint back in scripts block////* fix typo (adding comma) in script section////* Renames Blockly.workspaceDragSurface to Blockly.WorkspaceDragSurface.////Fixes #880.////* Ensure useDragSurface is a boolean.////Fixed #988////* use pretest instead of preinstall in package.json (#1043)////* cherry pick for pretest fix////* put pretest target to test_setup.sh////* fix conflict////* cherry pick for get_chromedriver.sh////* add some sleep to wait download to finish////* use node.js stable////* use npm test target////* field_angle renders degree symbol consistently.////Fixes #973////* bumpNeighbours_ function moved to block_svg.////Fixed #1009////* Update RegEx in js-to-json to match windowi eol (#1050)////The current regex only works with the ""\n"" line endings as it expects no characters after the optional "";"" at the end of the line. In windows, if it adds the ""\r"" it counts as a characters and is not part of the line terminator so it doesn't match.////* Fix French translation of ""colour with rgb"" block (#1053)////""colorier"", which is currently used, is a verb and proposed ""couleur"" is//a noun: the block in question does not change colour of anything, it//creates new colour instead, thus noun is more applicable.////Also, noun is used in French translation of ""random colour"" block://""couleur aléatoire"".////* Enforcing non-empty names on value inputs and statement inputs. (#1054)////* Correcting #1054 (#1056)////single quotes. better logic.////* Created a variable model with name, id, and type.////Created a jsunit test file for variable model.////* Change how blockly handles cursors.  The old way was quite slow becau… (#1057)////* Change how blockly handles cursors.  The old way was quite slow because it changed the stylesheet directly.  See issue #981 for more details on implementation and tradeoffs.  This changes makes the following high level changes: deprecate Blockly.Css.setCursor, use built in open and closed hand cursor instead of custom .cur files, add css to draggable objects to set the open and closed hand cursors.////* Rebuild blockly_uncompressed to pick up a testing change to make travis happy.  Fix a build warning from a multi-line string in the process. (#1059)////* Merge master into develop (#1063)////- pick up translation changes//- clean up trailing spaces////* use goog.string.startswith instead of string.startswith (#1065)////* New jsinterpreter demo includes wait block. Both demos have improved UI for clarity. (#1001)////Refactor of interpreter demo// * Renamed demos/interpreter/index.html as demos/interpreter/step-execution.html (including redirect), and added demos/interpreter/async-execution.html.// * Refactored code to automatically generate/parse the blocks, eliminating the need for a ""Parse JavaScript"" button. Code is still shown in alert upon stepping to the first statement. Print statements now write to output <textarea> instead of modal dialogs.////* VariableMap and functions added.////* Create separate file for VariableMap and its functions.////* Fix #1069 (#1073)////* VariableMap and functions added.////* Fix #1051 (#1084)////* Improve errors when validating JSON block definitions. (#1086)////goog.asserts to not run from blockly_compressed.js. User data validation should always run.////* Dragging changes, rebased on develop (#1078)////* Add block drag surface translateSurfaceBy////* Add dragged connection manager////* Add gesture.js////* Add GestureHandler////* Implemented gesture skeleton////* Most basic workspace dragging////* Add dragged connection manager////* cleanup////* doc////* more cleanup////* Add gesture handler////* Add translateSurfaceInternal////* core/block_dragger.js////* cleanup////* Pull in changes to dragged connection manager////* Pull in changes to dragged connection manager////* comments////* more annotations////* Add workspace dragger////* Add coordinate annotations////* Start on block dragging////* Limit number of concurrent gestures////* Add some TODOs////* start using dragged connection manager////* Set origin correctly for dragging blocks////* Connect or delete at the end of a block drag.////* cleanup////* handle field clicks and block + workspace right-clicks////* move code into BlockDragger class, but still reach into Gesture internals a lot////* Clean up block dragger////* Call blockDragger constructor with correct arguments////* Enable block dragging in a mutator workspace////* Add workspace dragger////* click todos////* Drag flyout with background////* more dragging from flyout////* nit////* fix dragging from flyouts////* Remove unused code and rename gestureHandler to gestureDB////* Rename gesture handler////* Added some jsdoc in gesture.js////* Update some docs////* Move some code to block_svg and clean up code////* Lots of coordinate annotations////* Fix block dragging when zoomed.////* Remove built files from branch////* More dragging work (#1026)////-- Drag bubbles while dragging blocks//-- Use bindEventWithChecks to work in touch on Android. Not tested anywhere else yet.//-- Handle dragging blocks while zoomed//-- Handle dragging blocks in mutators//-- Handle right-clicks (I hope)//-- Removed lots of unused code////* More dragging work (#1048)////- Removed gestureDB//- Removing uses of terminateDrag//- Cleaned up disposal code////* Dragging bugfixes (#1058)////- Get rid of flyout.dragMode_ and blockly.dragMode_//- Make drags from the flyout start from the top block in the group//- Block tooltips from being scheduled or shown during gestures//- Don't resize mutator bubbles mid-drag////* Fix events in new dragging (#1060)////* rebuild for testing////* unbuild////* Fix events////* rebuild////* Fix up cursors////* Use language files from develop////* Remove handled TODOS////* attempt to fix IE rerendering bug, and recalculate workspace positions on scroll////* Rebuild all the things////* Comment cleanup; annotations; delete unused variables.////* Tidy up context menu code. (#1081)////* add osx travis test run job (#1074)////* Names are correctly fetched from VariableModels!////* add more wait time for test setup (#1091)////* Work around timing issue with travis osx issue (#1092)////* add more wait time for test setup////* increase selenium wait time////* add more wait////* Fix #1077 by adding a rule to cover the toolbox labels too. (#1099)////* Assign variable UUID to field_variable dropdown.////* Change registration link to a static one (#1106)////This lets us redirect to a different form if we change it in the future.////* Edit generators to read in Variable Models.////* Add VariableMap requirement to workspace.////* Changed parameter name in workspace for clarity.////* Add type, id, and info to the generated xml.////Add xml tests for fieldToDom.//Update workspace tests to pass with new changes.////* Fix apostrophe in tooltips and helpurls (#1111)////* Click events on shadow blocks have the correct id (#1089)////* Add image_onclick option (#1080)////* Cleanup: semicolons, spacing, etc. (#1116)////* Spelling.  Spelling is hard.////* Add variable info to xml generated in variables.js////* Add missing CLAs info to the contributing file (#1119)////* Add missing CLAs info to the contributing file////* Added larger changes paragraph////* Replacing latest prettifier hosted in repo with latest version at rawgit CDN. (#1120)////* Forgot update code demo (#1121)////* Move audio code to a new file (#1122)////* move audio code to a new file////* dispose////* null check////* Make flyout get variables from target workspace's variableMap.////* Require VariableModel in field_variable.js.////* Update contributing.md (#1126)////* Include variables at top of serialization.////* Move blockSvg.getHeightWidth to block_render_svg.js (#1118)////* Deserialization variables at top.////* Create grid object (#1131)////* Create grid object////* Doc////* Units!  Thanks @RoboErikG////* Add our sound files in other formats////* Remove duplicate merged code////* Remove translation files////* Cleanup duplicate functions////* Add back scrollbar code////* Fix variable related issues////* Revert workspace variable creation change////* Delete language files////* Appease linter////* Remove duplication////* Add spaces to jsdoc line",https://github.com/microsoft/pxt-blockly/commit/dd964828e1ec10c6ddf8966e9b8516910273fe6a,79385111,microsoft/pxt-blockly,False,False,"['#903', '#838', '#850', '#830', '#844', '#846', '#851', '#848', '#861', '#869', '#867', '#870', '#874', '#876', '#879', '#892', '#895', '#900', '#901', '#893', '#908', '#907', '#913', '#911', '#916', '#920', '#919', '#923', '#661', '#934', '#946', '#945', '#950', '#937', '#962', '#822', '#961', '#822', '#904', '#964', '#888', '#899', '#962', '#970', '#904', '#972', '#904', '#904', '#974', '#967', '#979', '#969', '#986', '#992', '#996', '#991', '#1000', '#1011', '#1015', '#1017', '#1019', '#1028', '#1027', '#1023', '#1035', '#880', '#988', '#1043', '#973', '#1009', '#1050', '#1053', '#1054', '#1054', '#1056', '#1057', '#981', '#1059', '#1063', '#1065', '#1001', '#1069', '#1073', '#1051', '#1084', '#1086', '#1078', '#1026', '#1048', '#1058', '#1060', '#1081', '#1074', '#1091', '#1092', '#1077', '#1099', '#1106', '#1111', '#1089', '#1080', '#1116', '#1119', '#1120', '#1121', '#1122', '#1126', '#1118', '#1131']",63
181,1827255261a4086baaec63fc312fd8193d01f8b4,"Merge google/blockly, May 2017 (#881)//* Move createDom call into the constructor of block drag surface. (#790)////* Make cursor stay as a closed hand when dragging blocks around in the drag surface. Do this by applying the same style to text elements in the drag surface that we do in the main svg. (#805)////* Don't connect to blocks under the flyout.////* recompile again. (#806)////* Fix german translation////* Option for moving one block from stack.////See thread in support group before merging.////* Fix german translation of 'delete x blocks'////* Adding unit tests for ifelse block.////* Improvements to the generator test framework.////* <field>, <value> reorder due to load/save.////* Expand stack-drag modifier key to include alt and ctrl.////* Use the npm closure library instead of the same library installed at a parallel directory////* Fix undo/redo for FieldCheckbox////Thanks to PR #813 by ademenev////* Localisation updates from https://translatewiki.net.////* PR #818: Adding support for string table lookups in dropdown field labels////Adding support for string table lookups in dropdown field labels specified in JSON.////Adds Blockly.utils.replaceMessageReferences() method to handle string replacement without interpolation tokens.  Effectively uses the same old code, now moved into tokenizeInterpolation_(), which takes a parseInterpolationTokens option.////Replaces the direct JavaScript references (not pure JSON, and thus not portable).////Demonstrating this behavior in the logic_boolean dropdown.////* Integrating qqq.json changes into messages.json. (#820)////From commits b77f8cbebc5cef247116d3df6a428df8addbe53d and 4ecdedec9f8a69f78abf246e7a5db1e1a0be6b85////* Naming changes in mirror demo////* Adding support for untranslated messages. (#819)////This will be used to define constants accessible in JSON block definitions. Messages with descriptions that include `{{Notranslate}}` will not be included in the translation files sent to TranslateWiki. Instead, they are written to `msg/json/constants.json`, and later merged back into the `.js` files, similar to synonyms.////Template details: https://translatewiki.net/wiki/Template:Notranslate////* JSON support for message lookup in colour, tooltip, and help URL. (#825)////String replacement for the colour, tooltip text and help URL attributes of JSON defined blocks.//Demonstrated in logic_boolean.////* Fixes as per code review on PR.////* Localisation updates from https://translatewiki.net.////* Reduce number of Closure files in App Engine upload.////* Python false is False.  Issue #828.////* Replace 'const' with 'var'.////This unbreaks IE10 and advanced compiled apps such as Blockly Games.////* Fix bug in audioService where attached event callbacks were not being cleared properly.////* Rename workspace-tree to workspace-block.////* Minor refactoring of the modal code (add comments, guard against invalid keystrokes, etc.).////* FieldNumber & FieldAngle: Default value ""0"" (#832)////FieldNumber and FieldAngle previously accepted ""undefined"" as values, if not defined in JSON. This catches these and uses ""0"" for any NaN value.  The constructor value parameter is now optional. Includes tests.////* Remove unnecessary check when attaching a new block to a marked connection.////* Remove debug info.////* Refactor and simplify field-segment.component.js.////* Replace single quotes with double. (#836)////Fixes commits in #832.////* Adding extensions for JSON support of dynamic blocks. (#834)////Adding support for extensions, functions that can assist with loading blocks, much like init functions, but that can be referenced from JSON definitions. This allows JSON definitions to define dynamic blocks such as onchange handlers and mutators.////Rewrote math_number as an example pure JSON block.////* Add ability to add a class to a scrollbar so that different types of … (#837)////* Add ability to add a class to a scrollbar so that different types of scrollbars can//be distinguished from each other. You used to be able to do this by looking at the parent//element but now all the scrollbars are siblings in the dom.////Also, use this new class to fix #816 so that layering of the flyout and workspace scrollbars//are done correctly.////* JSON definitions for colour blocks (#838)////Replaces old colour block definitions with a Blockly.defineBlocksWithJsonArray(..) call. Generator unit tests continue to load and pass, signifying compatibility with prior block definitions.////Replaces extension 'math_number_tooltip' with the reusable 'parent_tooltip_when_inline' extension, also used by colour_picker. Includes tests.////* Rewrite tree.service.js.////- Remove unnecessary code and functions.//- Add documentation where needed.//- Fix a bug arising when a block on the workspace is attached to an existing link.////* Use setValue in fieldTextInput so that procedure renaming works////* Further cleanup and removal of unnecessary functions. Pull some strings out for i18n.////* Use bindEvent_ instead of bindEventWithChecks_ for longStop////* Clean up workspace.component.js. When moving a block from one place to another, move all blocks after it too, and adjust the active descs accordingly.////* Unit tests for JSON block definitions (just the start) (#850)//// * Beginnings of a JSON block definition unit test set.// * Dispose of unit test workspaces and blocks in finally blocks.// * Clarify JSON error message by echoing arg notation.////* New blocks text_count, text_replace, and text_reverse (#830)////Includes generators for all languages and units tests on those generators.////* Fixing combo boxes getting out-of-sync with NVDA.////Combo boxes need to be special cased like text input. Also, Escape is//a reserved button in NVDA, so I added Enter as a way to ""submit and//move up a level"" in addition to escape, so these boxes can be edited//while NVDA is on.////* Temporary fix for broken text field validation.////* rebuild////* Add a block to reverse a list (#844)////* Localisation updates from https://translatewiki.net.////* Porting math.js blocks to JSON (#846)////Moving all `math.js` definitions into a single JSON array, complete with i18n syntax for all messages, dropdowns, and tooltips.////Adding Blockly.Extensions.buildTooltipForDropdown(..) to facilitate the creation and error-checking of tooltips that update based on the value of a dropdown.////Now warn on raw string in JSON 'extensions'.////* Fixing JSON support for images in dropdowns. Adding tests. (#851)////Fixes #848.////* Update README.md////Add a link to our forum.////* Correcting math_change color////* Enable custom flyout categories.////* Add some safety////* Update the set of reserved words in Python to reflect the current state of Python (2.7 and 3.6). (#861)////* Localisation updates from https://translatewiki.net.////* .getOptions_() to .getOptions() (#869)////Fixes #867.////* Blockly.Extensions.buildTooltipForDropdown(..): Deferred validation. (#870)////Defer tooltip message string check until after load, when all Blockly.Msg should be loaded.//Avoids validation in headless mode, due to lack of document.readyState.////* annotation updates////* annotation updates////* jsdoc corrections (#874)////* Remove use of Array.prototype.includes which is not implemented in IE or Edge < 14. Fixes google/blockly#876.////* Attempt to work around the IE/Edge bug where `getComputedTextLength()` throws an exception when the SVG node is not visible. This workaround forces a re-render, which in turn, forces a re-calculation of the node width once a block is inserted into the workspace SVG. This workaround is only executed on IE and Edge. See https://groups.google.com/forum/#!topic/blockly/T8IR4t4xAIY for the initial discussion of this issue.////* Change CSS transforms to work with older browsers (#879)////* Change the setting of the CSS transform properties on SVG nodes to set both the unprefixed version and the `-webkit-` prefixed version so that Blockly correctly renders in order browsers, such as Safari < 9 and iOS Safari < 9.2. For discussion of this issue, see https://groups.google.com/forum/#!topic/blockly/o3pERaRQhSg////* Correct the separation between the CSS transform property and the rest of the CSS that was in the variable misleadingly called ""transform"".////* Don't try to get block position in a headless workspace////* Stop bumping neighbours in headless blockly////* Place context menu correctly on touch////* Clear all active desc ids when the 'Erase Workspace' button is pressed.////* Fix a bug where splicing a block between two linked blocks disconnects the group and messes up the focus.////* Deleting a top-level block does not cause blocks after it to be deleted. Properly handle the active desc for this case.////* Localisation updates from https://translatewiki.net.////* Use the empty field placeholder for dropdowns that do not have a value selected.////* Bugfix for #892. I incorrectly converted one CSS transform setting to use the cross-browser setting function in 40a063763c74b3f712c3057565966c25d5cfdb10. (#895)////* Adding @namespace annotations for JSDoc. (#900)////* Fix typo causing TypeError (#901)////* Pinning the angular2 dependency, and including licenses. (#893)////* Add skeleton for tests on rendered workspaces////* Fix some lint errors////* Localisation updates from https://translatewiki.net.////* Correct changedState in setWarningText() (#908)////When clearing warnings on blocks with IDs, the changedState variable should be true if the text changed. This will trigger the block being reshaped and remove the space for the notification icon (this.bumpNeighbours_).////* Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin(). (#907)////Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin().//This adds support for a common use pattern in extensions, and adds//error checking to avoid future incompatibilities.////* Porting Logic blocks to JSON (#913)////Extensions, mixins, mutators and constants now grouped under the new namespace Blockly.Constants.Logic.////* Improving errors/warnings with Block.toDevString() and Connection.toString(). (#911)////* Add isEditable to field, and add tests////* Separate tests////* Blockly.Constants.Math and Blockly.Constants.Colour extension constants (#916)////Also, correcting quotes in logic.js.////* Correction to logic_ternary type check (#920)////* Porting Loop blocks to JSON (#919)//// * Improved documentation on `Blockly.Extensions.buildTooltipForDropdown`// * Replaced incorrect uses of `@mixes` JSDoc annotation (on mixin extensions) with `@augments Blockly.Block`.// * Added Blockly.Extensions.buildTooltipWithFieldValue() extension helper.////* Workspace isDraggable////* JSONify simple list blocks////* JSONify variable blocks////* Initial text block, with a mixin to generate quote image fields. (#923)////Text block now uses the extension ""text_quotes"", supported by Blockly.Constants.Text.QUOTE_IMAGE_MIXIN.quoteField_(fieldName), so that each platform can use the best platform appropriate image (size, density, etc.) for the quotes.////* Add no-op stub .neighbors() for headless Connection.////* Adding tests for logic_ternary block in a new jsunit test framework.////* Correcting output of the logic_null block.////* Potential bug fix for issue #661////* extension controls_if => controls_if_mutator.////* Renamed extension function constant, and moved variables into the mixin.////* Dereference string table references when loading variable fields from JSON.////* Moving FieldImage string dereferencing back into Block.interpolate_() (part of jsonInit()). This sets a clear boundary of where dereferencing should happen.//Towards this, I've added message dereferencing for other field types here, as well.  I've used a pattern of field-type specific helper functions.////* Addressing comments.////* .utils.replaceMessageReferences(..) now gracefully returns non-string arguments.////* Clarification update.//Unraveling nested ternaries in Blockly.utils.tokenizeInterpolation_()////* Code correction from previous commit. Moved style to css.js and set ROUNDING=15;////* Fixing Enter so it properly propogates to dropdown selection. (#934)////Fixing FieldSegment so it updates dropdowns when the underlying dropdown changes.////* Localisation updates from https://translatewiki.net.////* Make variable add set/get block in context menu obey block limits////* Localisation updates from https://translatewiki.net.////* Use mutator extension for controls_if block////* Fix #946. Don't check for presence of constants.js////* Fix #945 (annotations) and an eslint issue (constant condition)////* Localisation updates from https://translatewiki.net.////* Fix #950: BlockFactory typo and copypasta////* Add safety checks for mutators and non-mutator extensions////* Handle mutations with both mixins and functions////* Adding warning on duplicate JSON block definition.////* period////* Make some functions private and add tests////* Localisation updates from https://translatewiki.net.////* Update help URL per #937.//Replace URL usages of %28 and %29 with normal parenthesis characters. (They aren't replaced by JavaScript's encodeURIComponent() function, and seem to work just fine without them.)//Added missing semicolon in build.py.////* Typo in comment.////* Make it easier to read the code that creates the variable category in the tolbox////* Adding Blockly.Xml.appendDomToWorkspace() (#962)////This is a copy (with additional comments) of PR #822 (and also #961) by @qnoirhomme with unrelated files removed. See #822 for full review.////* Annotation fixes////* Fix bug #904 by explicitly grabbing focus on the workspace svg element. (#964)////* Potential fix for #888.  Stops checking whether we are mid workspace drag since we do not always get mosue up events when blockly is in an iframe. (#899)////* Adding new minimap demo////* Basic code style changes. Adding a few more comments. Return early if disableScrollChange in onScrollChange listener.////* `unction` to `function` corrects #962 (#970)////* Cross browser friendly fix for #904.  This calls blur and focus from … (#972)////* Cross browser friendly fix for #904.  This calls blur and focus from workspace.markFocused and removes the event listener on focus events.  markFocused is called from all of our mouse down handlers, which triggers the focus event leading to an infinite loop of focus.  As far as I can tell, there are no uses of the focus handler that actually did anything for us.////* Localisation updates from https://translatewiki.net.////* Another attempt to fix #904 to keep the page from jumping to the focused workspace in IE 11 (#974)////* Adding horizontal scrolling. Changed scroll change callbacks from onScroll_ to setHandlePosition. onScroll_ is not challed when workspace is dragged.////* set background color to lilac if opening the playground from file:////* Registering mousemove and mouseup listener in mousedown event. Mousemove and Mouseup events are now listening over document.////* Localisation updates from https://translatewiki.net.////* Fix #967 by overriding the updateWidth method in FieldImage blocks to be a no-op. FieldImage fields should not change size after the width is set in init.  The updateWidth and, therefore, getCachedWidth is now being called by BlockSvg renderFields_ (see commit d55d9cbd9ff308ff5e361cf77acabb61a4bf4695). IIUC, updateWidth/getCachedWidth was only called from render before which is overridden in FieldImage to be a no-op already. (#979)////* Fix #969////* Localisation updates from https://translatewiki.net.////* Fix #986.  Looks like the original PR just forgot this block. (#992)////* rebuild develop (#996)////* Added the variable modal and component and implemented basic renaming functionality. (#991)////* Fixing commenting from the last commit. (#1000)////* Localisation updates from https://translatewiki.net.////* RemoveAttribute doesn't work on SVG elements in IE 10.  Use setAttribute to null instead.////* Adding the remove variable modal and functionality to accessible Blockly. (#1011)////* Minimap position bug fix for browsers other than chrome. Added touch support.////* Adding an add variable modal to accessible Blockly. (#1015)////* Adding the remove variable modal and functionality to accessible Blockly.////* Adding the add variable modal for accessible Blockly.////* Block browser context menu in the toolbox and flyout////* Add links to the dev registration form and contributor guidelines////* Miscellaneous comment cleanup////* Adding the common modal class. (#1017)////Centralizes accessible modal behavior.////* - Changed error message referencing 'procedure' instead of 'function' (#1019)////- Added iOS specific UI messages//- Fixed bug with js_to_json.py script where it didn't recognize ' character////* - Allows use of Blockly's messaging format for category name, colour,… (#1028)////...in toolbox XML.//- Updated code editor demo to use this message format//- Re-built blockly_compressed.js////* Making text_count use a text color (like text_length, which also returns a number). (#1027)////* Enable google/blockly with continuous build on travis ci (#1023) (#1035)////* create .travis for ci job////* initial checkin for blocky-web travis ci job////* rename file to .travis.yaml for typo////* remove after_script////* added cache////* rename .travis.yaml to .travis.yml////* Update .travis.yml////* include build script////* fix yaml file format issue////* debug install part////* debug build issue////* Update .travis.yml////* remove cache for now////* Update .travis.yml////* Update .travis.yml////* Update .travis.yml////* more debug info////* Update .travis.yml////* Update .travis.yml////* fix typo////* installing chrome browser////* remove chrome setting config////* run build.py as part of npm install////* Update .travis.yml////* update karma dependency////* use karma as test runner////* fix typo////* remove karma test for now////* Update .travis.yml////* Update package.json////* add npm test target////* add browserstack-runner depdendency////* update browser support////* fix typo for test target////* fix chrome typo////* added closure dependency////* add google-closure-library////* include blockly_uncompressed.js and core.js dependency////* uncomment out core/*.js files////* add kama job as part of install////* remove browserstack add on for now////* fix karma config typo////* add karma-closure////* add os support////* remove typo config////* include more closure files////* change os back to linux////* use closure-library from node_modules////* change log level back to INFO////* change npm test target to use open browser command instead of karma////* change travis test target to use open command instead of karma////* list current directory////* find what's in current dir////* typo command////* Update .travis.yml////* typo again////* open right index.html////* use right path for index.html////* xdg-open to open default browser on travis////* exit browser after 5s wait////* change timeout to 1 min////* exit after opening up browser////* use browser only////* use karma////* remove un-needed dependency////* clean up script section////* fix typo////* update build status on readme////* initial commit for selenium integration tests////* update selenium jar path////* fix test_runner.js typo////* add more debug info////* check java version////* add && instead of 9288////* fix java path////* add logic to check if selenium is running or not////* add some deugging info////* initial commit to get chromedriver////* add chromedriver flag////* add get_chromedriver.sh to package.json and .travel////* change browser to chrome for now////* fix path issue////* update chromdriver path////* fix path issue again////* more debugging////* add debug msg////* fix typo////* minor fix for getting chromedriver////* install latest chrome browser////* clean up pakcage.json////* use npm target for test run////* remove removing trailing comma////* fix another trailing comma////* updated travis test target////* clean up scripts////* not sure nmp run preinstall////* redirect selenium log to tmp file////* revert writing console log to file////* update test summary////* more clean up////* minor clean up before pull request////* resolved closure-library conflict////1. add closure-library to dependencies instead of devDependencies.//2. add lint back in scripts block////* fix typo (adding comma) in script section////* Renames Blockly.workspaceDragSurface to Blockly.WorkspaceDragSurface.////Fixes #880.////* Ensure useDragSurface is a boolean.////Fixed #988////* use pretest instead of preinstall in package.json (#1043)////* cherry pick for pretest fix////* put pretest target to test_setup.sh////* fix conflict////* cherry pick for get_chromedriver.sh////* add some sleep to wait download to finish////* use node.js stable////* use npm test target////* field_angle renders degree symbol consistently.////Fixes #973////* bumpNeighbours_ function moved to block_svg.////Fixed #1009////* Update RegEx in js-to-json to match windowi eol (#1050)////The current regex only works with the ""\n"" line endings as it expects no characters after the optional "";"" at the end of the line. In windows, if it adds the ""\r"" it counts as a characters and is not part of the line terminator so it doesn't match.////* Fix French translation of ""colour with rgb"" block (#1053)////""colorier"", which is currently used, is a verb and proposed ""couleur"" is//a noun: the block in question does not change colour of anything, it//creates new colour instead, thus noun is more applicable.////Also, noun is used in French translation of ""random colour"" block://""couleur aléatoire"".////* Enforcing non-empty names on value inputs and statement inputs. (#1054)////* Correcting #1054 (#1056)////single quotes. better logic.////* Created a variable model with name, id, and type.////Created a jsunit test file for variable model.////* Change how blockly handles cursors.  The old way was quite slow becau… (#1057)////* Change how blockly handles cursors.  The old way was quite slow because it changed the stylesheet directly.  See issue #981 for more details on implementation and tradeoffs.  This changes makes the following high level changes: deprecate Blockly.Css.setCursor, use built in open and closed hand cursor instead of custom .cur files, add css to draggable objects to set the open and closed hand cursors.////* Rebuild blockly_uncompressed to pick up a testing change to make travis happy.  Fix a build warning from a multi-line string in the process. (#1059)////* Merge master into develop (#1063)////- pick up translation changes//- clean up trailing spaces////* use goog.string.startswith instead of string.startswith (#1065)////* New jsinterpreter demo includes wait block. Both demos have improved UI for clarity. (#1001)////Refactor of interpreter demo// * Renamed demos/interpreter/index.html as demos/interpreter/step-execution.html (including redirect), and added demos/interpreter/async-execution.html.// * Refactored code to automatically generate/parse the blocks, eliminating the need for a ""Parse JavaScript"" button. Code is still shown in alert upon stepping to the first statement. Print statements now write to output <textarea> instead of modal dialogs.////* Fix #1069 (#1073)////* Fix cursor and mistaken css from merge////* Comment out broken field angle merge////* Fix broken merge with borders////* Add back original package json (woops)////* Remove render function for field angle, may not be the right way but it was broken...////* Revert merge blocking variable shadow blocks////* Add changes from built lang files////* Add back travis and readme////* Revert broken cleanup additions////* Add notes for scratch-block specific functions////* Revert change to css so blocks stay under the toolbox////* Add back accidentally removed files////* Use getFlyout_ instead of getFlyout everywhere////* Satisfy the linter////* Re-remove deprecated function////* Remove duplicated code in block_svg////* Add back flip_rtl option for images////* Remove more duplicated functions from past merges////* Fix flip_rtl code////* Revert renaming of getFlyout",https://github.com/microsoft/pxt-blockly/commit/1827255261a4086baaec63fc312fd8193d01f8b4,79385111,microsoft/pxt-blockly,False,False,"['#881', '#790', '#805', '#806', '#813', '#818', '#820', '#819', '#825', '#828', '#832', '#836', '#832', '#834', '#837', '#816', '#838', '#850', '#830', '#844', '#846', '#851', '#848', '#861', '#869', '#867', '#870', '#874', '#876', '#879', '#892', '#895', '#900', '#901', '#893', '#908', '#907', '#913', '#911', '#916', '#920', '#919', '#923', '#661', '#934', '#946', '#945', '#950', '#937', '#962', '#822', '#961', '#822', '#904', '#964', '#888', '#899', '#962', '#970', '#904', '#972', '#904', '#904', '#974', '#967', '#979', '#969', '#986', '#992', '#996', '#991', '#1000', '#1011', '#1015', '#1017', '#1019', '#1028', '#1027', '#1023', '#1035', '#880', '#988', '#1043', '#973', '#1009', '#1050', '#1053', '#1054', '#1054', '#1056', '#1057', '#981', '#1059', '#1063', '#1065', '#1001', '#1069', '#1073']",64
182,8a0bb74fe1f37aba8514b6b2bb949a93213b1469,"Perf: disable 'unicore/no-for-loop' (#13673)//In general, we prefer for-of loops for iterating over all items in a//collection when the element index is not used.////This rule goes a step further, rewriting for-of loops that use the index//variable by destructuring Array.entries().////Unfortunately, this yields a measurable performance regression [node 14//x64]. I recommend we disable this rule until JS engines optimize this//iteration pattern.",https://github.com/microsoft/FluidFramework/commit/8a0bb74fe1f37aba8514b6b2bb949a93213b1469,203843667,microsoft/FluidFramework,False,False,['#13673'],65
185,8f72830cd89d470a0d57ccdf9f5f63c7bf470e0b,"Squashed commit of the following://commit 74f09fe72fdc1facbf2b023c9d3307838afc1b3f/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Feb 8 21:27:31 2023 +0000//    Merged PR 3070: Fixes for sub_array and _split_dimension//    Fixes for sub_array and _split_dimension//    This fixes the sub array and split dim ops to work with the accera/    codebase that has updated around them. Some MemoryLayout assumptions are/    getting in the way and have been disabled in the short-term, however/    long term our memory layout behavior should more closely match what MLIR/    affine maps can represent for more generalized dynamic support//commit d8f2baa3ad40bbcfe3a40bb15aafff36819e6067/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Feb 8 05:52:55 2023 +0000//    Merged PR 3063: Refactor Dimension with C++ backend container class and few other fixes//    - Refactor Dimension with C++ backend container (ScalarDimension)/    - Enable output scalar variables/    - Fix dynamic sized TEMP arrays//commit ffc3d66a473c8b9f6d21aca39e3c515df4bb619b/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Fri Feb 3 09:21:56 2023 +0000//    Merged PR 3072: Bump hatlib version to 0.0.34, skip unsupported test on arm64 macOS, minor targets doc update//    Update hatlib version since there is no incompatibility//commit 63b99baa0e0a188fde4855cd98476340d9c35928/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Feb 1 23:40:13 2023 +0000//    Merged PR 3069: Set target device features on module and check when matching avx2/512 ops//    Set target device features on module and check when matching avx2/512 ops//commit 6c7b520567c171bc9ba548197f59e27761cde19b/Author: Kern Handa <kerha@microsoft.com>/Date:   Fri Jan 27 06:19:31 2023 +0000//    Merged PR 3060: Adds support for sqrt op in acc-translate//commit 5f5059bf0c0ae397e232a357267856f9d449df9f/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 25 19:42:07 2023 +0000//    Merged PR 3055: Move value unrolling to after function inlining and loop simplification//    Move value unrolling to after function inlining and loop simplification//    This enables dynamically-sized inner functions that get inlined into/    statically-sized regions to have loop unrolling affect their/    actually-statically-sized loops when possible//commit f5ded1d1cf99ed9469d9bb1558c980c67d83ee45/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 25 18:45:33 2023 +0000//    Merged PR 3053: Add package.build flags for building with higher-precision FP vector ops//    Add package.build flags for building with higher-precision FP vector ops//    Setting this new flag prevents a vmulps -> vaddps sequence/    from being contracted into a vfmaddps//commit 4dafdd0ae3df7bdf027307b5f94d712a8ca29f93/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 25 17:16:10 2023 +0000//    Merged PR 3052: Place heap allocations at the top level of the function//    Place heap allocations at the top level of the function//commit fac561f52e04faa88605300adcbb0224289e32e5/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Jan 24 19:54:54 2023 +0000//    Merged PR 3050: [non-func, API] Change Nest.get_shape() to always return a list//    Change Nest.get_shape() to always return a list//commit f8be9f315d5291daaaaf79e01b717b2695422489/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Jan 18 19:41:01 2023 +0000//    Merged PR 3030: Include acc-translate whenever accera is installed//    Perhaps a longer-term fix is to merge the accera-gpu package into accera-compilers so we have one less package to maintain.//    However, that adds constraints to the binary size of acc-opt (to not push us past the 100MB PyPI hard limit), so punting until we have cycles for this.//commit fdbf45dc8d8320972c1f330651bab48cd4eabadf/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Jan 18 01:42:45 2023 +0000//    Merged PR 3035: [nfc] Adds my machine to targets.py//commit 296fa15e1bc7bd05c7e7c3a6333182777f8abf79/Author: Mason Remy <masonr@microsoft.com>/Date:   Tue Jan 17 18:52:45 2023 +0000//    Merged PR 3029: Work around constraint resolution issues with dynamic split size 1//    Work around constraint resolution issues with dynamic split size 1//commit 7939957fe65cd602197fcb944182452d4e0a0853/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Sat Jan 14 05:36:29 2023 +0000//    Merged PR 3027: Hack required to use Array as output element argument (Dimension)//commit e4da98835c7dae09d5a37432659733bb2de0a6b2/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Jan 13 21:37:24 2023 +0000//    Merged PR 3025: Add arg name and size string required for hat metadata//    Add arg name and size string required for hat metadata//commit 83a75cee0acda133fb2a9f397fc1fcc93037f872/Author: Denny Sun <dennys@microsoft.com>/Date:   Thu Jan 12 22:41:09 2023 +0000//    Merged PR 3017: Output array supports gather function//    Add the dsl test for gather function.//commit c2c791923d0070c143c71ce9e2866d7d5562f7f7/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 11 03:21:45 2023 +0000//    Merged PR 3018: Use VS 17.4.3-built binaries. This is in a separate channel to allow older ve...//    Use VS 17.4.3-built binaries. This is in a separate channel to allow older versions to keep working//commit ef0552571e492745f0c3e53d7d1e77f452b3f08e/Author: Denny Sun <dennys@microsoft.com>/Date:   Mon Jan 9 03:54:54 2023 +0000//    Merged PR 3012: Correctness check for output array support for range node//    Successful correctness check means output array support can work end to end.//commit 06d392fef06e5a340a8e6c26ba7d1c312f779964/Author: Denny Sun <dennys@microsoft.com>/Date:   Sat Jan 7 00:53:57 2023 +0000//    Merged PR 3015: Update hatlib version to support floating type as function arg//    Update hatlib version to support floating type as function arg//commit 622fd7a73e56f55747f1c86e46dcaa93b14585e9/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Thu Jan 5 18:19:47 2023 +0000//    Merged PR 3010: Disable BinOp simplification for floating types//    Disable BinOp simplification for floating types//commit 989f1785d080e82c802dc046e84e84cfdb5717bf/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Jan 5 07:39:28 2023 +0000//    Merged PR 3013: Apply major version in docs//    Removes the need to update docs versions every time we release//commit c24f4dcfd26588733b5c59cd568cb9beb03ac902/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Jan 3 18:02:52 2023 +0000//    Merged PR 2981: Prologue and Epilogue op support with tensorization and caching//    - Add optional prologue and epilogue support for tensorization/    - Supported gemm parameters with fragment ops are: {alpha: 1, beta: any} and {alpha: >1, beta: 0}/    - ReLU, SET, SCALE added a standard fragment op//    Related work items: #3704//commit b524c9e6b69840485ec9bdf947f07e47ba8f04f1/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Dec 15 09:01:43 2022 +0000//    Merged PR 3001: [test] Expect failures on macos for x86 intrinsics tests//    macos does not support x86 and x86 avx intrinsicts//commit 005eb8540af4dce68e49cca725f7fb27f8b44a4b/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Dec 15 00:14:41 2022 +0000//    Merged PR 3000: Expect failures for macos in vpmaddwd tests//commit 0d610dfaa7ea32a5c378f70209bd1da6a9eca6ac/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Dec 14 16:41:07 2022 +0000//    Merged PR 2994: Bump hatlib to 0.0.32//commit 1a39c89b1b9d9c8b1723fb8037682539341b1a46/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Dec 14 15:06:52 2022 +0000//    Merged PR 2997: Support more casting cases in vpmaddwd matcher//    Support more casting cases in vpmaddwd matcher//commit 858db7c80e1e0fffcff180b841e99e8353f98430/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Dec 14 10:47:47 2022 +0000//    Merged PR 2996: [release] bump docs to 1.2.14 for next release//    bump docs to 1.2.14 for next release//commit a272d35955fe3a05d2c52f54481af40869a74849/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Dec 14 06:51:40 2022 +0000//    Merged PR 2987: Add support for max/min/round ops and vectorizing those ops//    Add support for max/min/round ops and vectorizing those ops//commit 375be08681b88df01e2e3043d5094684c134d862/Author: Mason Remy <masonr@microsoft.com>/Date:   Tue Dec 13 23:30:28 2022 +0000//    Merged PR 2963: Control TEMP array allocation location//    Control TEMP array allocation location//commit 929eeafe8263f866bacc77b958953268f58d8b8e/Author: Mason Remy <masonr@microsoft.com>/Date:   Tue Dec 13 21:56:38 2022 +0000//    Merged PR 2962: Expand vpmaddwd matching and add intrinsic call//    Expand vpmaddwd matching and add intrinsic call//    Matches more vpmaddwd cases and creates a pathway to invoking the LLVM/    intrinsic directly.//commit e47a02ed4929e8ba9a085c7870cc5e4fe9f0db62/Author: Mason Remy <masonr@microsoft.com>/Date:   Sat Dec 10 00:40:42 2022 +0000//    Merged PR 2961: Match more vectorization patterns and support vectorized cast//    Match more vectorization patterns and support vectorized cast//    Tries to match and rewrite vectorization patterns:/    - 2-loop interleaving store -> vector shuffle and store/    - simple horizontal reductions (not always efficient currently)/    - vectorized casts//    Makes vectorization of non-innermost loops do a per-op ""inplace"" unroll and/    vectorize the innermost loop/    TODO : update documentation to describe this behavior better//commit 628983a1a3c5f9ea42dac0cdb7db3cebcb427f43/Author: Mason Remy <masonr@microsoft.com>/Date:   Fri Dec 9 05:54:01 2022 +0000//    Merged PR 2960: Enable marking functions as no-inline-into//    Enable marking functions as no-inline-into//    Functions marked no-inline-into/    won't inline calls to other functions within their body. This/    is a useful compiler performance (not emitted code performance)/    optimization when we have many nested functions calls//commit d4404ea31cccff456a28ef6998403d228e427507/Author: Denny Sun <dennys@microsoft.com>/Date:   Fri Dec 9 00:40:16 2022 +0000//    Merged PR 2986: [output array] Emit range function with input_output type arguments//    Instead of using output type, we use input_output instead to generate two functions for the Range function./    Now Accera can successfully generate code for range function.//    ```/    ```//commit 7d867a33afc36a1a2fa68b49f507b6ad202c14ce/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Dec 8 22:12:14 2022 +0000//    Merged PR 2959: Improved affine for op range simplification//    Improved affine for op range simplification//    Add range value / constant-cmp-result patterns and affine for op range/    simplifications to the affine simplification pass and run it after/    inlining functions./    When inlining a dynamically-sized function into a statically-sized/    function, this change is useful for resolving the dynamic ranges to/    constants and pruning dynamic-range loops that are not needed given the/    specific constant value being used.//commit 511112c61b513c5d8d7ed4dba06ee266d5affbca/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Dec 8 17:14:00 2022 +0000//    Merged PR 2958: Hack to erase loops in a nest to support nest-of-nest or overfused//    Hack to erase loops in a nest to support nest-of-nest or overfused/    scenarios//    This change enables an action plan to erase loops. Typically this would/    be used when an outer nest traverses tiles and invokes an inner nest (or/    multiple nests) which operate within each tile. The outer nest still/    needs to cover the full iteration space, however after splitting by the/    tile sizes a user will not want the outer nest to perform the inner/    loops//commit 5dd35c423e3878a8f490de07ca21d3ac261c6224/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Dec 7 01:59:14 2022 +0000//    Merged PR 2985: [release] Rev docs to 1.2.13//commit b5697107f084bf910d4d77e75e67a90363855375/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Dec 7 00:57:08 2022 +0000//    Merged PR 2983: Increase timeouts of GPU benchmarks//    Increase timeouts of GPU benchmarks//commit 05c096f116216fbc9505c7d9a6f1e88b7626411f/Author: Mason Remy <masonr@microsoft.com>/Date:   Sat Dec 3 01:25:01 2022 +0000//    Merged PR 2982: Work around bug with redundant splits of dynamic dimensions//    Work around bug with redundant splits of dynamic dimensions//commit 4056d3177c5b14987e4c5fcd4aa91ddac67c4ed1/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Nov 30 07:55:06 2022 +0000//    Merged PR 2972: Build both static and dynamic binaries by default, put both in aux dependencies//commit b79602b9cf543b0852c7e0c85e548970d5ac7fbb/Author: Kern Handa <kerha@microsoft.com>/Date:   Tue Nov 29 22:34:04 2022 +0000//    Merged PR 2975: Updates llc/opt build flags to enable more optimizations by default//    Updates llc/opt build flags to enable more optimizations by default//commit 8a856b8af10227538ebb72486bd0bfd52af98873/Author: Kern Handa <kerha@microsoft.com>/Date:   Tue Nov 29 21:49:40 2022 +0000//    Merged PR 2977: Updates CMake to do FindPython before pybind11 config//    Updates CMake to do FindPython before pybind11 config//commit 6d05fc0e8a6d1933d7507cfa8b6838c04606a798/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Nov 22 22:34:50 2022 +0000//    Merged PR 2955: Reduce Linux PR runtime to under 60mins//    Filter DEV_MODE reruns to dsl_tests.py, this is not comprehensive and is a best effort.//commit 0354abe136dfb37ea243aaceeed6a5accb12d738/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Fri Nov 18 10:09:41 2022 +0000//    Merged PR 2953: Workaround debug mode failures with dimension argument ordering//    * Order dimension arguments after Array args to avoid this lowering issue in Debug mode (until Debug mode is fixed)//    ```/    test_all_dynamic_sizes_static_unroll_matmul_llvm.mlir:236:28: error: use of value '%7' expects different type than prior uses: 'i64' vs '!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>'/        %42 = llvm.insertvalue %7, %41[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>/                               ^/    /Users/lisaong/work/staging/Accera/build/lib.macosx-11.1-arm64-3.10/test_acccgen/test_all_dynamic_sizes_static_unroll_matmul/_tmp/test_all_dynamic_sizes_static_unroll_matmul/test_all_dynamic_sizes_static_unroll_matmul_llvm.mlir:201:5: note: prior use here/        %7 = llvm.insertvalue %arg6, %6[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>/        ^/    ```//    * Enable DEV_MODE tests in one CI pipeline so that we can catch these in the future//commit 5d365527d0b17c6d147086e71f958ed8ec2a7c56/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Nov 16 06:20:47 2022 +0000//    Merged PR 2950: [Release] Rev docs to v1.2.12//    In preparation for 1.2.12 release EOW//commit e9cca1927e98ff5a8c8af16f8746c317ba5998d8/Author: Mason Remy <masonr@microsoft.com>/Date:   Mon Oct 31 20:57:36 2022 +0000//    Merged PR 2946: Fix hierarchical partial fusing//    Fix hierarchical partial fusing//    Index attributes in fragment predicate ops weren't getting updated as/    part of fusion mapping old indices to new fused indices. This fix is a/    quick change to recursively walk predicates and update their index/    attributes manually./    In the future we could use SymbolicIndexOps and rely on/    BlockAndValueMapping replacements in clone, however this will also/    require that we don't create as many duplicate SymbolicIndexOps for the/    same Index//commit ecbc5b63ea6d879437e2ae08a1fd0edf05505032/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Oct 27 21:45:54 2022 +0000//    Merged PR 2942: Hold onto intermediate split indices when fusing//    Hold onto intermediate split indices when fusing//    When we split a loop multiple times, the outer index references the/    inner intermediate split indices in affine expressions, even if those/    indices get further split and are no longer loop indices. We have been/    discarding them because they aren't loop indices or dimension indices,/    but they wound up getting re-added to the transformed domain by/    serialization and this led to fusion bugs.//commit f38adc9b18c234e56c5fa4a213df51e5d0d1d033/Author: JUBI TANEJA <jubitaneja@microsoft.com>/Date:   Thu Oct 27 07:07:34 2022 +0000//    Merged PR 2834: match and rewrite a pattern to vectorize int16 matmul//    This rewrite rule matches the jj and kk loops in int16 matmul, where outer loop `jj` `{0..8}` is followed by an inner loop `kk` `{0..2}`. It vectorizes the `jj` and `kk` loop and replaces each affine op by a vectorized op. At the end, it generates `vpmaddwd` instruction for MatMul.//commit 7a1597d88e216bfb6df5780092b61711d6a36657/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Oct 27 01:24:41 2022 +0000//    Merged PR 2918: Support vectorization and static size caching for split dynamic range//    Support vectorization and static size caching for split dynamic range/    loops//commit b6ebe0df5222184221f1a5cf7d99cac60131eadb/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Oct 27 00:44:13 2022 +0000//    Merged PR 2914: Support static loop splits of dynamic sized ranges//    Support static loop splits of dynamic sized ranges//    This change creates a specialization of the AffineConstraintsHelper that/    works with Loopnest concepts and uses that in LoopNestBuilder to update/    the loop split generation//commit e5fa02d9b734dba2d24c10424ef947db7c5a3052/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Oct 26 19:29:49 2022 +0000//    Merged PR 2911: Support dynamic ranges in ScheduledLoopOp//    Support dynamic ranges in ScheduledLoopOp//commit 2a9cf40237814b8ea793d4020ec0b5be1633306a/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Oct 26 18:54:49 2022 +0000//    Merged PR 2907: Implement initial affine constraint helper for dynamic size loop//    Implement initial affine constraint helper for dynamic size loop/    handling//    Implements a wrapper around mlir::FlatAffineValueConstraints and a set/    of low-level tests using it that enable static-sized splitting of/    dynamic loop ranges//commit 5784d4483a1f03308b2ece7337fdf6d6b96fd757/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Oct 21 21:45:03 2022 +0000//    Merged PR 2935: Remove thread coarsening factor > 4 from GPU benchmarks//    Remove thread coarsening factor > 4 from GPU benchmarks//commit 432f88a6fbc5898ba93d85e87502f0421a68dbe4/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Thu Oct 20 00:13:50 2022 +0000//    Merged PR 2932: Upgrade to CUDA 11.8//    Upgrade to CUDA 11.8//commit b2669c511c2cca8bef2991f74cfed3aba5d39440/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Oct 19 17:14:40 2022 +0000//    Merged PR 2931: Update to ROCm 5.3//    Update to ROCm 5.3//commit 1472394dcf14a881d5336447abd307ee5ba77209/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Oct 19 00:37:10 2022 +0000//    Merged PR 2926: Plumb parameter usages to emitted HAT files//commit 7c786ce8f0b337e7af7c281db69436f53c74d4ca/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Oct 18 23:02:21 2022 +0000//    Merged PR 2927: Reduce benchmark configs using thread coarsening//    Reduce benchmark configs using thread coarsening//commit 5f21639e49373112c5c42875b84ed2b74e58616b/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Oct 18 20:06:42 2022 +0000//    Merged PR 2925: Add optional optimization hint for number of thread blocks per SM//    Add optional optimization hint for number of thread blocks per SM//    Related work items: #3736//commit 8b3633da20e79e19ed1f94f88882f11e4c7c4879/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Oct 18 06:29:19 2022 +0000//    Merged PR 2924: Update hatlib dependency in setup.cfg, add comment//commit 9598d13f6d9fafd20ebd6907f4d617dcfc9d97a4/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Oct 17 22:58:24 2022 +0000//    Merged PR 2922: [Github] Update vcpkg//    From c2177e64bdf05e7ea69a8d41f420fcdb42df49db Mon Sep 17 00:00:00 2001/    From: Rose <83477269+AtariDreams@users.noreply.github.com>/    Date: Sun, 16 Oct 2022 23:47:22 -0400/    Subject: [PATCH] Update vcpkg (#52)//    This package has not been updated in months//commit 396e4096059fad56a664b32113f59109c6bc652b/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Oct 12 17:45:31 2022 +0000//    Merged PR 2910: Updates hatlib dependency to 0.0.29//commit 61ef91312105775d373ee56cd30cc2d4eb2878fb/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Oct 12 01:02:13 2022 +0000//    Merged PR 2905: Fix internal param name in GPU benchmarks//    Fix internal param name in GPU benchmarks//commit 8a6fe20e20c08a149e0fb7188d994d2b6420a4df/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Mon Oct 10 23:03:34 2022 +0000//    Merged PR 2902: Increase ROCm baseline benchmark timeout to 10 hours//    - Increase ROCm baseline benchmark to 10 hours/    - Add category to the gemm input for classification//commit faada498b57d756a05ea93f9db018f140eed3219/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Mon Oct 10 05:37:03 2022 +0000//    Merged PR 2901: Increase ROCm baseline timeout to 7 hours//    Increase ROCm baseline timeout to 7 hours//commit 7ae827591fa94fc0fcc593993b9ae241a1cadb5e/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Oct 7 19:21:45 2022 +0000//    Merged PR 2900: Prune gemm benchmark input for big sizes by removing NT and TT configs//    - Prune gemm benchmark input for big sizes by removing NT and TT configs/    - Disable verification for resnet sizes/    - Fix baseline tagging for pytorch//commit 67bc56cc2aa14a3e3d74a3f936f5bdcfceb30055/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Oct 7 16:25:40 2022 +0000//    Merged PR 2896: Dynamic shared memory allocation support//    - Add optional param in plan.cache for memory offset/    - Add optional param in schedule.create_plan for total dynamic memory size in bytes/    - Update benchmarks to allow dynamic shared memory usage//    Related work items: #3735//commit 09690a1bd7886680c8fa0ac8826f422397230f15/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Oct 7 07:17:41 2022 +0000//    Merged PR 2898: Add pytorch gemm implementation for GPU benchmark baselines//    Add pytorch gemm implementation for GPU benchmark baselines//commit de03cfa267c160b168ddb116a0e98bdee6383770/Author: Mason Remy <masonr@microsoft.com>/Date:   Fri Oct 7 05:10:57 2022 +0000//    Merged PR 2897: Generalize partial dynamic size support//    Generalize partial dynamic size support//    Plumbs through mappings from arrays to which args provide the dimension/    sizes for those arrays more generically.//    This also generalizes dynamic size support beyond matmul scenarios.//    Note: due to assumptions in the debug mode plumbing, the size arguments/    still must occur first in the argument list, and a later PR should/    generalize that//commit df29d9450f055a6b067857179e3920f5f5badf0d/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Oct 5 07:49:00 2022 +0000//    Merged PR 2894: Add one test case for partially dynamic sized array//commit 07bcc97e1d84271cdeda85b17a2e17b88f7516b4/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Oct 4 21:09:42 2022 +0000//    Merged PR 2891: [nfc][release] Rev docs to 1.2.11//commit 337e7e16b5fdf46cabbe9d60d5139b9f5fffbc36/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Oct 4 17:07:02 2022 +0000//    Merged PR 2882: Add tests for thread coarsening and update GPU benchmarks//    - Add tests for thread coarsening and update GPU benchmarks//    Related work items: #3684//commit 6a0c938b01f544e44728007e9a2fba1ce28059a7/Author: Mason Remy <masonr@microsoft.com>/Date:   Mon Oct 3 23:56:15 2022 +0000//    Merged PR 2890: Add folding scenario for cast ops where the only downcasts are//    Add folding scenario for cast ops where the only downcasts are/    internally-generated//    This is useful for converting uint8*uint8->uint8 to/    int16*int16->int32 using cache element types as is needed in the/    vpmaddwd matmul scenario//commit 5fd93cb9d054f77c94c51d83f3c9faf94fe1b7ce/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Sep 30 21:41:53 2022 +0000//    Merged PR 2889: [refactoring] Prevent overloading of keyword ""Tensor"" - disambiguate with ""MMAFragment""//    Prevent overloading of keyword ""Tensor"" - disambiguate with ""MMAFragment""//commit c47e4e77df51deffa97e421cf24473213d90be80/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Sep 29 00:24:08 2022 +0000//    Merged PR 2886: [release] Bump docs to 1.2.10, sync GH to ADO//    * Bulk docs version update//    * Bump protobuf from 3.20.1 to 3.20.2 in /accera/onnx-emitter/test (d1b87ec6820417da0e86d60094eacf354398d4b9)//    * Also fixing a minor docs bug (errant backtick)//commit f4e0db2b9243a165c5372d76f047550c3c7da147/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Sep 28 23:35:25 2022 +0000//    Merged PR 2884: Add DSL test for runtime size correctness//commit 3d7ceffdc8f3e8af72a064afa398cee589c992f2/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Sep 28 21:46:48 2022 +0000//    Merged PR 2878: Optimize warp id calculation by forcing scalar registers//    - ROCM: use  **__builtin_amdgcn_readfirstlane** to force scalar reg usage/    - CUDA: don't use anything special since **__shfl_sync** seems to generate slower code//commit a8be268040bd7eaf7de17d10a3bee017869bd007/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Sep 28 21:08:36 2022 +0000//    Merged PR 2885: Updates python dependencies//    Updates hatlib version//commit 661e0174185f253c2052221abbb3286e45ae26ea/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Sep 28 02:48:15 2022 +0000//    Merged PR 2881: Fix the runtime crash caused by incorrectly generated LLVM IR//    1. Call the specific version of LLVM type converter for dynamic memory/    2. Create MemRefDescriptor from dynamic memory shape by associating the arrays with correct size arguments//    With this change, the following DSL test can succeed and pass correctness check.//    ```/            M = Dimension()/            N = Dimension()/            K = Dimension()//            A = Array(shape=(M, K), element_type=ScalarType.float32,/                role=Array.Role.INPUT)//            B = Array(shape=(K, N), element_type=ScalarType.float32,/                role=Array.Role.INPUT)//            C = Array(shape=(M, N),/                        element_type=ScalarType.float32,/                        role=Array.Role.INPUT_OUTPUT)//            @nest.iteration_logic/            def _():/                C[i, j] += A[i, k] * B[k, j]//            M_test = np.int64(64)/            N_test = np.int64(128)/            K_test = np.int64(32)/            A_test = np.random.random((M_test, K_test)).astype(np.float32)/            B_test = np.random.random((K_test, N_test)).astype(np.float32)/            C_test = np.random.random((M_test, N_test)).astype(np.float32)//            correctness_check_values = {/                ""pre"": [M_test, N_test, K_test, A_test, B_test, C_test],/                ""post"": [M_test, N_test, K_test, A_test, B_test, C_test + A_test @ B_test],/            }//            function = package.add(nest, args=(M, N, K, A, B, C), base_name=""runtimesizes"")//            with verifiers.VerifyPackage(self, ""test_runtimesizes"", TEST_PACKAGE_DIR) as v:/                package.build(""test_runtimesizes"", format=TEST_FORMAT | Package.Format.MLIR_VERBOSE, mode=TEST_MODE, output_dir=TEST_PACKAGE_DIR)/                if correctness_check_values:/                    v.check_correctness(/                        function.name,/                        before=correctness_check_values[""pre""],/                        after=correctness_check_values[""post""],/                    )/    ```//commit 1cdbaf2788bae8bf875085bb79c6d01b29e13747/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Sep 26 23:47:23 2022 +0000//    Merged PR 2879: Fix exception in GPU baseline benchmark//    Fix exception in GPU baseline benchmark//commit 5a082c7f357130649847784f5628fc173b8aeb1b/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Sep 23 02:04:12 2022 +0000//    Merged PR 2856: Enable output caching in ROCM for all MMA shapes//commit 93d747a6d8330741e8e651500e795a908ba341b9/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Sep 22 17:05:06 2022 +0000//    Merged PR 2876: Introduce warp bindings in CUDA//    - Bind indices to WARP_X/Y along with tensorization (exclusively from thread id mapping)/    - warp x dim is always a multiple of warp size in the x dimension. e.g. if for dividing a 64x64 block tile into 4 subtiles of 32x32 each where each subtile is computed by a single warp then the blockDim would be (64,2,1)./    - This is required since with tensorization we would want block dims to be generated in a specific way than without it. Calculating offsets within the matrix based on warps is non-trivial if not impossible with just thread bindings.//    Related work items: #3726//commit f62cac97b58d6020d30c78ac1651c545ad9fb4e4/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Sep 21 18:19:02 2022 +0000//    Merged PR 2874: Add unrolled convolution case study link (#50)//    Add unrolled convolution case study link (#50)//    * Update README.md//    Add unrolled convolution case study reference link//    * Update the reference link//    Update the reference according to latest updates in the case study//    See: https://github.com/microsoft/Accera/pull/50//commit a017b47e1fcf6827eb7237cc21c312b1f63fdaa6/Author: Denny Sun <dennys@microsoft.com>/Date:   Tue Sep 20 21:16:34 2022 +0000//    Merged PR 2873: Convert function signature from dynamic memref type to llvm type//    With this change, Accera is able to write the correct function signature of dynamic memref type to HAT file//commit 8050908026e69ebb5ff3c35eefb8071ea54f6376/Author: Denny Sun <dennys@microsoft.com>/Date:   Tue Sep 20 01:19:33 2022 +0000//    Merged PR 2871: Update hatlib version//    from 0.0.23 to 0.0.25//commit 0b30f30a6aa61e523544cf1be454966824609daf/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Sep 19 18:50:21 2022 +0000//    Merged PR 2870: Filter benchmark kernels based on scheduling policy//    Filter benchmark kernels based on scheduling policy//commit 85be9c8257cfd4414bf773e756a09291ef65d234/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Sep 19 18:11:15 2022 +0000//    Merged PR 2867: [build][github] Update test path in github actions//    Fixes https://github.com/microsoft/Accera/actions/runs/3071905923//commit 724817d114a1e630abe52425b4f26068c310e19c/Author: Denny Sun <dennys@microsoft.com>/Date:   Sat Sep 17 01:01:35 2022 +0000//    Merged PR 2850: Add llvm type converter for dynamic memory type//    This type converter is used to convert mlir type to llvm type before written to the HAT file. Now the helper function in LLVM only supports static memory type, so we need a new version for dynamic memory type.//commit dc15c16dec73ef9316bde789f7cfa90776ab1340/Author: Denny Sun <dennys@microsoft.com>/Date:   Fri Sep 16 21:18:45 2022 +0000//    Merged PR 2862: write runtime size of index type to Hat//    write runtime size of index type to Hat//commit 91dc8f6458ed605f7a8a940a4e9d58b89d741a46/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Sep 16 08:26:44 2022 +0000//    Merged PR 2861: Fix cache_C benchmark variable which is not getting set properly for CUDA//    Fix cache_C benchmark variable which is not getting set properly for CUDA//commit 4bab0884b0ce53ea03a7cba927c7169ce3c22e1e/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Fri Sep 16 06:15:39 2022 +0000//    Merged PR 2864: [build]: fix breaks due to agent image updates//    Latest version of azure pipelines images now set VCPKG_ROOT, which overrides the submodule used by Accera.//    See: https://github.com/actions/runner-images/commit/ef638dd95f31092f88c882294b0db3bfe9728685//    * Only pipelines that rely on azure build agents are affected./    * We still need to keep the submodule around to enable external builds from the Github repo./    * Remove defunct pipeline/    * Update vcpkg submodule while we're here//commit fe40e67394232de4524a80b15d8a31731398e9f6/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Sep 10 04:45:25 2022 +0000//    Merged PR 2839: Enable CUDA output caching//    - Add Tensor memory space type to denote memory fragments for caching (e.g. C in gemm). this might go away in future and just be replaced with Private once caching code is unified with ROCM behavior./    - Change caching code to generate MMALoad/StoreOps for caching of the output.//    Related work items: #3725//commit 0fd36d5c7897eb2b3814a396626a56ec822cec0c/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Wed Sep 7 20:03:30 2022 +0000//    Merged PR 2813: Add pass to recognize patterns that look like int16 matrix multiply//    This PR adds a pass to rewrite GEMM-like loops that multiply-accumulate int16 matrices into an int32 result. If this pattern gets invoked, the output should contain the much-sought `vpmaddwd` instruction.//    It also fixes some old low-level tests of integer arithmetic.//commit fea6475e4b54b4036bd6f160552723b1e9f16662/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Sep 6 23:56:56 2022 +0000//    Merged PR 2847: [release] Bump docs version to 1.2.9 and update github action container//    * Rev docs to 1.2.9//    * Update github workflow to reference updated tag for 14.0.6-1//commit 369b6bd532d5fca545991750f1be708db0d992df/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Sep 1 20:00:32 2022 +0000//    Merged PR 2845: Filter GPU benchmarks by de-parameterizing cache layouts//    Filter GPU benchmarks by de-parameterizing cache layouts//commit 0d96e70ec9433c9fac7b1b2490cdf05b18fd5a86/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Aug 31 02:00:28 2022 +0000//    Merged PR 2843: Fix bug in GPU benchmark to calculate valid variant//    - Fix bug in GPU benchmark to calculate valid variant/    - Add cosmosdb util to cleanup old entries//commit 2b0af04f30082ac4fdd2b5922024c6eeb1faeafa/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Aug 31 01:14:28 2022 +0000//    Merged PR 2835: Merge in MLIR fixes for LocationSnapshot and MemRefCastOp//    From 1abc4a981067ef1fd9bf717d7fabc4f6d75520d1 Mon Sep 17 00:00:00 2001/    From: Chuck Jacobs <cjacobs@microsoft.com>/    Date: Wed, 24 Aug 2022 04:14:51 +0000/    Subject: [PATCH] Merged PR 2822: Fix lowering of `MemrefCastOp` to the LLVM dialect//    From 39f0a4c97f5c89d7fa815118a3230091172bc795 Mon Sep 17 00:00:00 2001/    From: Charles Jacobs <cjacobs@microsoft.com>/    Date: Mon, 15 Aug 2022 16:00:43 -0700/    Subject: [PATCH] Fix issue where passed-in op-printing flags were ignored//commit f517044a330e8c45df9f9b63410cf1a57dacf4f8/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Aug 30 04:16:33 2022 +0000//    Merged PR 2842: Paramterize cache strategy in GPU benchmarks and fix kernel filters//    Paramterize cache strategy in GPU benchmarks and fix kernel filters//commit b0dc38572b66792a24e7ed8136c270bc4979fafb/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 29 18:19:41 2022 +0000//    Merged PR 2836: Value DSL support for runtime sized output arrays//    * This adds memref-in-memref support for output arrays that are allocated in the function/    * A new ""Pointer"" Value wrapper class with a Store() function which creates an accv.StoreOp, similar to Array, Scalar/    * Update accv.StoreOp to support memrefs-in-memrefs//    Value pointer levels are defined as follows://    |Layout|Example|Pointer level|C-type|/    |--|--|--|--|/    |scalar|int16, float32, index, ...|0|int16_t, float32_t, int64_t, ...|/    |single-level memref|memref<1xindex>, memref<3x2xf32>, memref<10x16x11x?xf32>|1|int64_t*, float32_t*, float32_t*|/    |memref in memref|memref<memref<?x?x?f32>>|at least 2 (= the number of levels of memrefs)|float32_t**|//    Future work:/    * End-to-end lowering through Python DSL/    * Bare pointer convention for output arrays/    * Custom allocator functions. Currently we use the built-in std alloc.//    Related work items: #3730//commit 2748bd94e98333d13401786b8f9153537ad8a89b/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 29 16:23:09 2022 +0000//    Merged PR 2840: [nfc] Remove redundant ACR info from docker scripts//    The container registry allows pull-only access//commit b7ce8ed4932fe613a4770df9ba00b2b7a8ad3d09/Author: Denny Sun <dennys@microsoft.com>/Date:   Fri Aug 26 21:07:34 2022 +0000//    Merged PR 2838: Runtime sized Array lowering to LLVM, accv.alloc to LLVM malloc//    1. make deep copy of range end of value type when cloning ops/    2. plumbing runtime size to LLVM/    3. transform memref.alloc to LLVM malloc/    4. conversion between block argument and symbol name//    the generated IRs://    **Initial.mlir**//    `%2 = ""accv.alloc""(%arg0, %arg1) {sym_name = ""diff""} : (index, index) -> memref<?x?xf32> loc(#loc)`//    **LoopNestToValueFunc.mlir**//    ```/    %2 = ""accv.alloc""(%arg0, %arg1) {sym_name = ""diff""} : (index, index) -> memref<?x?xf32> loc(#loc)/    affine.for %arg4 = 0 to %arg0 {/        affine.for %arg5 = 0 to %arg1 {/        }/    }/    ```//    **ConvertValueToStd.mlir**//        `%0 = memref.alloc(%arg0, %arg1) : memref<?x?xf32>`//    **ConvertValueToLLVM.mlir**//    ```/    %8 = llvm.mul %arg1, %arg0  : i64/    %9 = llvm.mlir.null : !llvm.ptr<f32>/    %10 = llvm.getelementptr %9[%8] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>/    %11 = llvm.ptrtoint %10 : !llvm.ptr<f32> to i64/    %12 = llvm.call @malloc(%11) : (i64) -> !llvm.ptr<i8>/    ```//    Related work items: #3733//commit dbbce7261e0f8c83a3cb56b5607662ebe2faa651/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Aug 24 22:00:02 2022 +0000//    Merged PR 2831: Record unique IDs so that different processes acting on a value module//    Record unique IDs so that different processes acting on a value module/    don't produce conflicting IDs//commit 0d168c99f3049f4f83a11883d573087785bec23b/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Aug 24 17:47:50 2022 +0000//    Merged PR 2837: Fix WPT calculation to prevent 0 work and filter benchmarks//    Fix WPT calculation to prevent 0 work and filter benchmarks//commit 830bd6cd2d8d621ffcb2b13282de3ccc7929224d/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Aug 23 20:39:49 2022 +0000//    Merged PR 2832: Caching strategy flag and thread ID optimization (GPU)//    - Add a flag to plan.cache() to expose the different thread <--> data arrangements/    - Optimize thread ID calculation to check blockdim first//commit cc2c38e9818f4b6ffa6ea4218a2ab483c4a8a574/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Aug 22 15:58:00 2022 +0000//    Merged PR 2829: Add handwritten caching implementation for GPU//    Add GPUBlockCacheOp which lowers to handwritted caching implementation on the GPU which supports access patterns for minimizing bank conflicts in shared memory and maximizing coalescing global memory access.//commit 432621157bd2ebeb0344fa36cb3821becf06fc3c/Author: Kern Handa <kerha@microsoft.com>/Date:   Fri Aug 19 00:22:00 2022 +0000//    Merged PR 2821: Fixes constraint logic for fusion of more than two schedules//    Fixes constraint logic for fusion of more than two schedules//commit 16f31231bb4159835d68a90fec43f49eda2aa983/Author: Kern Handa <kerha@microsoft.com>/Date:   Thu Aug 18 23:53:44 2022 +0000//    Merged PR 2830: Fixes macOS CI build//    Fixes macOS CI build//commit 786744fd2ae7c0f2d3e58f49edb561cadeb72d80/Author: Mason Remy <masonr@microsoft.com>/Date:   Fri Aug 12 23:50:04 2022 +0000//    Merged PR 2806: Enable specifying cache element type//    Enable specifying cache element type//    - Supports accumulating and/or computing in a different element type and/      batching up the casts for those types/    - Also adds support for binop/castop expansion and castop folding//commit a777fb5c59d6215ff707e8ee536f25a4b9f78641/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 11 22:03:15 2022 +0000//    Merged PR 2818: Upgrade hatlib dependency to v0.0.23//    Upgrade hatlib dependency to v0.0.23//commit ee15139a7f362807af10c42d09273cd0719def4a/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Aug 11 06:05:50 2022 +0000//    Merged PR 2792: Refactor cast to a value cast op//    Refactor cast to a value cast op//commit 138d2abfac4c10641d6ff6a486cdc5c4d4b0fd38/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Thu Aug 11 01:59:47 2022 +0000//    Merged PR 2788: Re-enabled fusing test that was taking too long//    This PR just re-enables a skipped test that was taking too long//commit fc70a56aa4982912cda7a2dff7888f21f23aaeaa/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 11 00:58:24 2022 +0000//    Merged PR 2816: Upgrade hatlib requirement to 0.0.22//    Upgrade hatlib requirement to 0.0.22//commit 12fea07a0d1bc8b3ba1c5c5543de5ea9b3ae5a20/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Aug 10 04:30:48 2022 +0000//    Merged PR 2811: [nfc] Upgrade CUDA to 11.7 on NVidia benchmark machines//    According to https://hub.docker.com/r/nvidia/cuda/tags, 11.7.0 is still the latest.//commit 8e4041a19d8577a4c14741b45b6ab733e5d53d74/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Aug 10 00:22:43 2022 +0000//    Merged PR 2814: Parameterize batch_size in GPU benchmarks//    Parameterize batch_size in GPU benchmarks//commit eb6197a8f54555ab47be383f7f48b7efc9442041/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 8 05:51:35 2022 +0000//    Merged PR 2810: [release] [nfc] Bump docs version to 1.2.8, bump github actions to llvm 14.0.6//    Preparation for 1.2.8 release//commit 63c7a397210a753836a647f399e2798bba521939/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 8 05:03:36 2022 +0000//    Merged PR 2808: [ci] Add vcpkg caching for buddy builds, disable flaky parallelized tests//    * Enable vcpkg binary caching for CI pipelines that are using non custom agents. This reduces vcpkg install time from 2-3 minutes to ~30 seconds/    * ctest --parallel on macos can sometimes fail randomly. The tests will need to be updated to support running in parallel//    References: https://vcpkg.io/en/docs/users/binarycaching.html/    Note: an organization-wide Nuget feed must be created. Project-wide Nuget feeds will fail with access denied.//commit 37e207a0deb2c8c431a6c0e73787c726221a4f37/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 8 04:13:14 2022 +0000//    Merged PR 2804: [ci] Reduce runtimes of PR Buddy Builds//    * Remove redundant setup.py builds in pipelines with cmake builds/    * Build debug for Linux only (the fastest config)/    * Add pipeline caching for ccache, conan, and pip where applicable/    * Add parallel configs where applicable/    * Filter out some tests on windows due to slow runtimes. These should have coverage on Linux  and macOS.//commit c8940050d9064e5c326644761ef2821b59e8e431/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Aug 5 23:31:24 2022 +0000//    Merged PR 2807: Enable verification for CK baselines//    - Enable verification for CK baselines/    - increase timeout for cuda resnet/    - add functionality for extracting kernel code from cosmosdb//commit da114623db8518c9b47eae83eee1357f0bcd3565/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Fri Aug 5 22:35:43 2022 +0000//    Merged PR 2802: Fix barrier optimization pass//    This PR fixes a couple of barrier-related issues:/    - The barrier optimization pass wasn't keeping barriers that protected vector load/store ops/    - Multiple barriers were getting generated when hoisting barriers out of conditionals//    Related work items: #3732//commit 03171fec09146bdeacfdc2da68ff73202e30d534/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 4 19:08:27 2022 +0000//    Merged PR 2800: Add max_threads to parallelize and change default behavior//    - Add num_threads to parallelize/    - change default behavior to count the number of iterations of the given indices/    - Update documentation//commit 7ff3a90dd09f74c8699657b17909a575c59267fa/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 4 16:42:29 2022 +0000//    Merged PR 2801: Remove verification on cuda-fp32-big benchmark//    Remove verification on cuda-fp32-big benchmark//commit 5e6f6d93f7c62b2f965e12cb69d00b77a6c65a89/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 1 22:36:03 2022 +0000//    Merged PR 2798: LLVM 14.0.6 upgrade//    An incremental upgrade with minimal or no changes to MLIR//commit bf8faeaee154befc7c34e221fe54f9a1fd2799f3/Author: Kern Handa <kerha@microsoft.com>/Date:   Sat Jul 30 04:55:03 2022 +0000//    Merged PR 2796: Makes NestedPassAdaptor's pipeline consistent//    Makes NestedPassAdaptor's pipeline consistent//    This change makes it so NestedPassAdaptor creates a new pass manager/    every time a new pass is added. Prior to this change, if dumpPasses was/    false, the same nested pass manager would be used. If dumpPasses was/    true, a new nested pass manager would be created per call to addPass./    This difference in behavior was also resulting in the lowering pipeline/    to be different, depending on the value of dumpPasses.//    For example, in the following code in AcceraPasses.cpp, all the passes/    that are added to `funcOpPM` run BEFORE `createConvertSCFToOpenMPPass`/    if `dumpPasses` was false.//    ```cpp/        auto funcOpPM = pmAdaptor.nestPassManager([&]() -> OpPassManager& { return pm.nest<v::ValueModuleOp>().nest<FuncOp>(); });/        funcOpPM.addPass(createConvertLinalgToAffineLoopsPass());/        funcOpPM.addPass(createSimplifyAffineStructuresPass());/        funcOpPM.addPass(createCanonicalizerPass());/        funcOpPM.addPass(createLoopInvariantCodeMotionPass());/        funcOpPM.addPass(createCSEPass());//        pmAdaptor.addPass(createConvertSCFToOpenMPPass());/        pmAdaptor.addPass(value::createValueToStdPass(options.enableProfile));/        funcOpPM.addPass(value::createBarrierOptPass(options.writeBarrierGraph.getValue(), options.barrierGraphFilename.getValue()));/        pmAdaptor.addPass(value::createRangeValueOptimizePass());/        pmAdaptor.addPass(createCanonicalizerPass());/        pmAdaptor.addPass(createCSEPass());/    ```//    Additionally, this change exposed the fact that the BarrierOpt pass is/    incorrectly erasing barriers, and so has been made into a no-op until/    this correctness issue has been fixed.//commit d97a5fd55712ce783f65dd948a9e9c152b1ff2d1/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Jul 28 18:33:54 2022 +0000//    Merged PR 2795: [docs] Cleanup viz scripts, clarify reorder illustrations//    * Clarify in the labels while working on the animated version//    * Cleanup and rename .js files for (slightly) easier lookup//commit 4afe6b763c2097a9a09eebac4ed5f0f5f59f587d/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Jul 28 08:06:22 2022 +0000//    Merged PR 2475: LLVM 14.0.0 upgrade//    Tag: llvmorg-14.0.0//    Notable changes:/    * std dialect ops are now moved to arith, math dialects/    * StrEnumAttribute is now replaced by simple enums. This affects things like gpu.dimension.x/    * [Issue] linalg.copy is removed, replaced by memref.copy, which introduces a runtime dependency on a `memrefCopy` C function for non-identity layout copies. This affects Array.sub_array in debug mode./    * [Regression] OMP to LLVM lowering will crash in mlir-translate findAlloc due to a empty set of blocks being emitted. This only affects dynamic scheduling with collapsed loops./    * Lots of renames/    * Upgraded macOS to macOS-12//    Related work items: #3646//commit de3bd0ffde5ebb4bf69cb0db0c46bc76fef37c4b/Author: Denny Sun <dennys@microsoft.com>/Date:   Thu Jul 28 01:02:23 2022 +0000//    Merged PR 2753: accera.Dimension and runtime-sized Arrays in the Python DSL//    With this change, Accera is able to generate the initial mlir for runtime sized Arrays. The ir lowering is not fully working due to some bug, which can be fixed in the later changes.//    ```/            M = Dim()/            N = Dim()/            K = Dim()//            A = Array(shape=(M, K), element_type=ScalarType.float32, role=Array.Role.INPUT)/            B = Array(shape=(K, N), element_type=ScalarType.float32, role=Array.Role.INPUT)/            C = Array(shape=(M, N), element_type=ScalarType.float32, role=Array.Role.INPUT_OUTPUT)//            nest = Nest((M, N, K))/            i, j, k = nest.get_indices()//            @nest.iteration_logic/            def _():/                C[i, j] += A[i, k] * B[k, j]//            package.add()/            package.build()/    ```//    ```/    module @test_runtimesizes attributes {llvm.data_layout = ""... ...""}  {/      accv.module ""test_runtimesizes""  {/        accv.func nested @runtimesizes_..._impl_...(%arg0: index loc(unknown), %arg1: index loc(unknown), %arg2: index loc(unknown), %arg3: memref<?x?xf32, #map> loc(unknown), %arg4: memref<?x?xf32, #map> loc(unknown), %arg5: memref<?x?xf32, #map> loc(unknown)) attributes {accv.output_verifiers = ["""", """", """", """", """", ""_debug_check_allclose_<accera.lang.Dim.Dim object at ...>_<accera.lang.Dim.Dim object at ...>_...""], exec_target = 0 : i64} {/          %0 = ""accv.get_element""(<<UNKNOWN SSA VALUE>>) : (memref<index>) -> index loc(#loc)/          %1 = ""accv.get_element""(<<UNKNOWN SSA VALUE>>) : (memref<index>) -> index loc(#loc)/          %2 = ""accv.get_element""(<<UNKNOWN SSA VALUE>>) : (memref<index>) -> index loc(#loc)/          ""accln.nest""(%0, %1, %2) ( {/            %3 = accln.sym_index {name = ""i""} #accln<""index{i,3}""> loc(#loc)/            %4 = accln.sym_index {name = ""j""} #accln<""index{j,4}""> loc(#loc)/            %5 = accln.sym_index {name = ""k""} #accln<""index{k,5}""> loc(#loc)/            ""accln.kernel""() ( {/              %7 = ""accv.slice""(%arg5, %3, %4) {sliceDimensions = [0, 1]} : (memref<?x?xf32, #map>, index, index) -> memref<f32> loc(#loc)/              ... .../              accln.terminator loc(#loc)/            }) {sym_name = ""_""} : () -> () loc(#loc)/            ... .../            accln.terminator loc(#loc)/          }) {domain = #domain0, exec_target = 0 : i64, kernels = []} : (index, index, index) -> () loc(#loc)/          accv.return loc(#loc)/        } loc(#loc)/        accv.func @runtimesizes_...(%arg0: index loc(unknown), %arg1: index loc(unknown), %arg2: index lo...//commit 75553672d92f6e60638b4cb6169bda9712401eef/Author: JUBI TANEJA <jubitaneja@microsoft.com>/Date:   Wed Jul 27 23:34:03 2022 +0000//    Merged PR 2793: support sign extend op in canVectorize() function to improve generated MLIR//    While trying to optimize `int16` `MatMul` with vectorize transformation in DSL, we noticed an unrolled loop with load, binop, sexti, store instructions. There was no vector instruction emitted and it hinted us that sign extend instruction is not supported in `canVectorize` function and now with this op supported, we can emit some vector instructions in the MLIR.//commit 4fa740166b1c17359d40b540b7b7eb623caa167a/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Jul 27 07:02:01 2022 +0000//    Merged PR 2790: Filter invalid kernels from GPU benchmarks//    - Filter invalid kernels from GPU benchmarks/    - Disable verification on cuda f16 benchmarks/    - Remove frequent cleanups//commit 6cff78412b04f15c3257bc2286a3805974a56012/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Jul 26 03:27:14 2022 +0000//    Merged PR 2787: Remove MLIR flag from package format in benchmarks//    Remove MLIR flag from package format in benchmarks//commit 0e7b7ef930f177e6a70b88aad7982e9a36dd116f/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Jul 25 23:10:43 2022 +0000//    Merged PR 2784: Merge Github changes to ADO//    Author: Lisa Ong <11318241+lisaong@users.noreply.github.com>/    Date:   Mon Jul 25 19:13:00 2022 +0800//        Update Building_on_Ubuntu.md//    commit 474d7e4c6fd7dcd2f723193e69446da4c63f97ee/    Author: Lisa Ong <11318241+lisaong@users.noreply.github.com>/    Date:   Mon Jul 25 19:03:30 2022 +0800//        Github codespaces configuration (#48)//    commit 0e8ffcd806bfc1671c89e599c2562592c4d06f21/    Author: Anthony Shaw <anthony.p.shaw@gmail.com>/    Date:   Mon Jul 25 15:34:18 2022 +1000//        Set license field in metadata of package (#46)//        * Set license field in meta//        * Update all setup.cfg files//    commit 9a8ea90b22b02379072a98eacc8d5f49c1a28e69/    Author: Lisa Ong <11318241+lisaong@users.noreply.github.com>/    Date:   Mon Jul 25 10:24:26 2022 +0800//        Enable CIs from pull requests from forks//commit 8275363815c0e128ff477a8c7692ad44353db5aa/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Mon Jul 25 20:41:39 2022 +0000//    Merged PR 2776: Make fusing more efficient//    This PR refactors the code generation for schedules and makes it more efficient. This makes a big difference for complex schedules with constraints on the kernels (like the ones generated when fusing schedules).//    Here are some timings on a few tests (modified versions of Mason's example script) I ran://    | test | main branch | PR branch |/    |----|----|----|/    | 3 fused schedules, tile first only | 18.8s | 5.8s |/    | 3 fused schedules, tile 1 & 2 | 190s | 6.2s |/    | 3 fused schedules, tile all 3 | ???? | 7.2s |//    Related work items: #3731//commit 2306afbb9425dcecced6a38590da2ae31937d23e/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Jul 25 06:51:24 2022 +0000//    Merged PR 2781: Fix benchmark with MLIR format and add repro test//commit 6e72de99c9f1952111081dc320cc055eb09aabf6/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Jul 23 04:26:14 2022 +0000//    Merged PR 2780: Type support for tensor ops in CUDA//    - Add support for FP32 input (TF32 compute)/    - Add support for bfloat16 input/FP32 output/    - Add support for integer types//    Related work items: #3709, #3710//commit 3bedc2c51c7b93865462df68b154db9c4bdda5ec/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Jul 22 04:11:41 2022 +0000//    Merged PR 2779: Some assorted benchmark fixes//    - Build Accera in release mode/    - Shuffle gemm sizes to run small sizes first/    - Increase tolerance to account for floating point drift for large k-split//commit cb010de71df47c75c48ae3a8a749e03fc606e24f/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Jul 21 19:43:11 2022 +0000//    Merged PR 2774: Add input caching tests for CUDA, enable tests in PR pipelines//    Add input caching tests in CUDA//    Related work items: #3725//commit 85c09542106b4e685ba4141d9cb34b823d0d02b7/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Jul 20 23:55:04 2022 +0000//    Merged PR 2677: Unify rocm/cuda tensor ops lowering under accv dialect//    - remove gpu dialect lowering (CUDA)/    - add accv dialect lowering for CUDA/    - rocm and cuda lowering use the same semantics//    Related work items: #3728//commit 282d66743b4d5d828998198d94003ea93228165c/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jul 19 02:14:58 2022 +0000//    Merged PR 2764: [doc] Rename acc.Dim to acc.Dimension and add create_dimensions()//    * Rename `acc.Dim` to `acc.Dimension`, `acc.Dim.Role` to `acc.Dimension.Role`/    * Add the simplified `acc.create_dimensions()` construction pattern/    * Kept the `acc.Dimension` constructor for advanced use cases involving generator patterns//    Related work items: #3720//commit e8a0a7475acc2b117b41b97238b2ecb11060cbd6/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Jul 14 03:27:17 2022 +0000//    Merged PR 2752: Add nargs to input args in benchmark tool//    add nargs to input args in benchmark tool//commit 2c5083a721b4cbef11d1782b43d34d67b76caa0e/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Jul 13 05:07:40 2022 +0000//    Merged PR 2680: [doc] Manual and Reference doc updates for Runtime Array DSL//    Proposed DSL changes for supporting runtime array sizes:/    * Adds a new dimension type that serves as a placeholder for runtime dimension sizes for `Array` and `Nest`. Supports both input and output dimensions/    * Adds output-only Arrays/    * Add the Scalar type/    * Example kernels demonstrating different aspects:/      * Gather: basic features/      * Range: scalar function arguments/      * ReduceMean: fusion//    Related work items: #3720//commit dbdbbb94c98f787782e8e4a6171a3af067f91e58/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Jul 13 01:45:07 2022 +0000//    Merged PR 2683: Support conditionals in Logic Function//    Before this change, there is no way to emit conditionals in logic function.//    With this change, the user is able to write the following logic function://    ```/                def if_func():/                    T[i, j] = A[i, j] + B[i, j]/                    C[i, j] += T[i, j]**2.//                def elseif_func():/                    T[i, j] = A[i, j] - B[i, j]/                    C[i, j] += T[i, j]**2.//                def else_func():/                    C[i, j] = A[i, j] + B[i, j]//                @nest.iteration_logic/                def _():/                    _If(j<100, if_func).ElseIf(i>100, elseif_func).Else(else_func)/    ```//    Related work items: #3706//commit f3a1a2becb6740ae8cf7873b5029c6df140f5c19/Author: Kern Handa <kerha@microsoft.com>/Date:   Tue Jul 12 16:52:41 2022 +0000//    Merged PR 2744: [doc] Fixes link in reference/functions/cast.md, revs version on all docs//    [doc] Fixes link in reference/functions/cast.md//commit 23f4c8fbf2415b02e8b0090a76380d34790205fa/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jul 12 05:55:48 2022 +0000//    Merged PR 2743: [DSL] Document implicit casting rules and the explicit `cast` function//    * Document implicit casting rules implemented by !2693/    * Promote `acc.cast` to a documented function to give the user control to override implicit casting behavior//commit 3ec63b62705327a65decc4da7ec4cb5412dc7299/Author: Kern Handa <kerha@microsoft.com>/Date:   Mon Jul 11 23:57:23 2022 +0000//    Merged PR 2739: Updates ROCM tensorization pattern to handle casting//    Updates ROCM tensorization pattern to handle casting//commit 60c082dd38ff1b0bc030a7e28dc19f553bad9099/Author: Mason Remy <masonr@microsoft.com>/Date:   Mon Jul 11 22:58:42 2022 +0000//    Merged PR 2643: Some fixes for last major array caching in tensorization//    Some fixes for last major array caching in tensorization//commit 812c3065b7d4d6c9d716acf4fb1df4be66ef101d/Author: Kern Handa <kerha@microsoft.com>/Date:   Mon Jul 11 20:43:12 2022 +0000//    Merged PR 2693: Updates DSL codegen to implicitly cast if possible//    Updates DSL codegen to implicitly cast if possible//commit 6ed316e50e8f9e398f9ee6b8bfa8e6aa05fbffb1/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Jul 9 05:52:22 2022 +0000//    Merged PR 2735: Pass multiple input files as comma-separated list to benchmark tool//    https://intelligentdevices.visualstudio.com/ELL/_build/results?buildId=41588&view=logs&j=d78921a4-2f18-50b0-77ad-4c6803f3371b&t=f97c60f6-ada7-5ec9-5ea1-510216c408e9//    Above pipeline did not run the 2nd set of input sizes since the 1st process did not exit until pipeline timeout was hit. After the fix, we will always have a single job.//commit e5010caebc5a135e40464a06432a5cf1fc965203/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Jun 27 23:32:49 2022 +0000//    Merged PR 2721: Remove unnecessary logging in benchmarks//    Remove unnecessary logging in benchmarks//commit e0c5945d3ef218a5be858bc0934274793972abdb/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jun 21 01:12:02 2022 +0000//    Merged PR 2674: Support emitting runtime array sizes in the Value DSL//    * Minimum set of changes to support runtime sizes in the Value DSL without transformations/    * Add a ScalarDimension type (name TBC) which is aliased to Scalar/    * Support variable ends in MemoryLayout, ScheduledLoopOp, RangeValueAnalysis/    * Use mlir::ShapedType::kDynamicSize and mlir::ShapedType::kDynamicStrideOrOffset as sentinel values, following the pattern in MemRefOps, TensorOps, etc./    * TODO: E2E verification in the next PR/    * TODO: Python DSL changes in the next PR//    Output of mlir-translate for the runtime_sizes_all case, where %21, %22 and %23 are the runtime sizes for M, N, and K://    ```/    define void @NestMatMul(float* %0, float* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, float* %7, float* %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13, float* %14, float* %15, i64 %16, i64 %17, i64 %18, i64 %19, i64 %20, i64 %21, i64 %22, i64 %23) !dbg !3 {/      br label %25, !dbg !7//    25:                                               ; preds = %57, %24/      %26 = phi i64 [ %58, %57 ], [ 0, %24 ]/      %27 = icmp slt i64 %26, %21, !dbg !9/      br i1 %27, label %28, label %59, !dbg !10//    28:                                               ; preds = %25/      br label %29, !dbg !11//    29:                                               ; preds = %55, %28/      %30 = phi i64 [ %56, %55 ], [ 0, %28 ]/      %31 = icmp slt i64 %30, %22, !dbg !12/      br i1 %31, label %32, label %57, !dbg !13//    32:                                               ; preds = %29/      br label %33, !dbg !14//    33:                                               ; preds = %36, %32/      %34 = phi i64 [ %54, %36 ], [ 0, %32 ]/      %35 = icmp slt i64 %34, %23, !dbg !15/      br i1 %35, label %36, label %55, !dbg !16//    36:                                               ; preds = %33/      %37 = mul i64 %26, %5, !dbg !17/      %38 = add i64 %37, %34, !dbg !18/      %39 = getelementptr float, float* %1, i64 %38, !dbg !19/      %40 = load float, float* %39, align 4, !dbg !20/      %41 = mul i64 %34, %12, !dbg !21/      %42 = add i64 %41, %30, !dbg !22/      %43 = getelementptr float, float* %8, i64 %42, !dbg !23/      %44 = load float, float* %43, align 4, !dbg !24/      %45 = fmul float %40, %44, !dbg !25/      %46 = mul i64 %26, %19, !dbg !26/      %47 = add i64 %46, %30, !dbg !27/      %48 = getelementptr float, float* %15, i64 %47, !dbg !28/      %49 = load float, float* %48, align 4, !dbg !29/      %50 = fadd float %49, %45, !dbg !30/      %51 = mul i64 %26, %19, !dbg !31/      %52 = add i64 %51, %30, !dbg !32/      %53 = getelementptr float, float* %15, i64 %52, !dbg !33/      store float %50, float* %53, align 4, !dbg !34/      %54 = add i64 %34, 1, !dbg !35/      br label %33, !dbg !36//    55:                                               ; preds = %33/      %56 = add i64 %30, 1, !dbg !37/      br label %29, !dbg !38//    57:                                               ; preds = %29/      %58 = add i64 %26, 1, !dbg !39/      br label %25, !dbg !40//    59:                                               ; preds = %25/      ret void, !dbg !41/    }/    ```//    Related work items: #3716, #3717//commit 51a07e5c60009c47c3b375b402ac96f47619ca8f/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Jun 21 00:18:02 2022 +0000//    Merged PR 2682: Add nvidia device optimized sizes and some benchmark fixes//    Add nvidia dev opt sizes and some bench fixes//commit 6325b5e5bc68136d29e4a65d657699a4e781214d/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Jun 18 17:59:50 2022 +0000//    Merged PR 2676: Add automated weekly rocm baseline benchmark//    https://intelligentdevices.visualstudio.com/ELL/_build/results?buildId=41316&view=logs&j=4f7f213a-5f0f-58b0-1189-99ef12faf0d8&t=687344d2-d6b6-5d8c-dd9d-6aab558fd96c//    https://intelligentdevices.visualstudio.com/ELL/_build/results?buildId=41314&view=logs&j=4f7f213a-5f0f-58b0-1189-99ef12faf0d8//commit 940e599ff7026e7c41cb1b2566eec44d70709e96/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Jun 17 16:34:22 2022 +0000//    Merged PR 2673: Add automated weekly baseline benchmarks on Nvidia GPU//commit 1a521c78783538e233230ecc90d2bc347092e0da/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Jun 16 00:07:26 2022 +0000//    Merged PR 2657: Add conversion pass from gpu ops to rocdl ops//    - switch to gpu dialect for gpu index ops/    - add conversion pass from gpu dialect to rocdl//commit 3c3271deb2a2a42bac5e6356f28d7e04e6ff7678/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Jun 15 02:52:50 2022 +0000//    Merged PR 2652: Add integer tensor ops support for AMD targets//    - int mfma ops/    - tests/    - static_cast in c++//    Related work items: #3727//commit 8b96d139067119de37ab6bcd1ecb0382ce7f46b3/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jun 14 20:25:33 2022 +0000//    Merged PR 2650: [release] Docs version to 1.2.6, sync Github to ADO//    Author: Lisa Ong <onglisa@microsoft.com>/    Date:   Tue Jun 14 17:04:53 2022 +0800//        bump docs version to 1.2.6//    commit 4014c176e8e5eb270404915c1bdc7404d657d9f6/    Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>/    Date:   Sat Jun 4 07:11:15 2022 +0800//        Bump bottle from 0.12.19 to 0.12.20 in /tools/viz (#44)//        Bumps [bottle](https://github.com/bottlepy/bottle) from 0.12.19 to 0.12.20./        - [Release notes](https://github.com/bottlepy/bottle/releases)/        - [Changelog](https://github.com/bottlepy/bottle/blob/master/docs/changelog.rst)/        - [Commits](https://github.com/bottlepy/bottle/compare/0.12.19...0.12.20)//commit 72ede2b19b5e21f3d96fc800bcc1ed30d69c389c/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Jun 13 23:17:59 2022 +0000//    Merged PR 2624: Add more MMA shapes for CUDA//    Add more MMA s…",https://github.com/microsoft/Accera/commit/8f72830cd89d470a0d57ccdf9f5f63c7bf470e0b,410044642,microsoft/Accera,False,False,"['#3704', '#3736', '#52', '#3735', '#3684', '#3726', '#50', '#50', '#3725', '#3730', '#3733', '#3732', '#3646', '#48', '#46', '#3731', '#3709', '#3710', '#3725', '#3728', '#3720', '#3720', '#3706', '#3716', '#3717', '#3727', '#44']",66
212,ffe05fa6e5c7819a6cb2c9105ed9694245656842,"Release 1702.1 (#1992)//* D2DFactory Wrapper (#1085)////* D2DFactory Wrapper////* Fix path for wrapper includes in project file.////* Moving starboard to mm file.////* Address CR feedback, remove useless code, clean up D2D factories.////* Moving header file to private location////* Factory helper should only create single threaded D2D factories.////* Actually fix the wrapper header location.////* Add the CG/D2D design document. (#1112)////* Implement an ID2D1RenderTarget-backed CGContext (#1126)////There are wide swaths of code wrapped in #if 0 ... #endif blocks; they will be removed and repaired as part of the ongoing work on this branch.////Issues have been logged for many TODOs, but the rest will be removed as part of the ongoing work on this branch.////Currently broken:////* path rendering//*  shadow//* transparency layers//* bitmap contexts that are not CALayer contexts//* font rendering is left in CGContextCairo.mm and will be moved////This merge is intended to unblock parallel work on CG/Direct2D.////* Add CFCppBase, a helper class for implementing C++ CF types.////* Switch CGContext/CGBitmapContext over to CppBase.////*  Initial implementation of CGPath Using ID2D1Geometries (#1138)////*  Initial implementation of CGPath Using ID2D1Geometries//// This work provides the foundation for creating a CGPath based on// ID2D1PathGeometry and GeometrySink. A simple implementation for// adding a simple line, moving the current location to a new point// and retrieving some basic information from the Geometry sink has// been added. Isolated unit tests have also been added to ensure// these APIs are working as intended for these simple scenarios.////* Addressing CR Feedback.////* Reworking the __CGPath struct to use a nested implementation////Also addressed some concerns with the state of geometry objects.////* Fixing re-opening functionality by creating a new path and streaming contents of old path into it.////* Addressing CR Feedback.////* Cleaning up CGPath and removing unused code.////* Refactor into using CFCppBase////* Cleaning up a few things.////* Addressing CR Feedback.////Removing fully qualified names. Using inline helpers//between D2D and CG. Fixing CGPathAddLines which will be//tested more accurately in the future. Removing unnecessary//dealloc method for CGPath base type. Fixing include->import.////*  Addming more helper functions and reverting bad test change.////* Addressing CR Feedback. Fixing Inlines////* Disabling tests that rely on CGPath in CoreText////* CGContext DPI, parameter, stroking & interpolation improvements (#1181)////* Make CGContext display scale-agnostic by propagating the scale into Direct2D's DPI.//  A CGContext rendering to a scaled surface will not apply a scale//  transformation. The scaling logic has been moved into render target//  creation.//  //  Fixes #1180.//* Replace __CGContextDrawGeometry with RenderToCommandList+RenderCommandList.//* Push CG Interpolation mode into Direct2D.//  References #1177.//* Make all CG APIs nullptr-safe.//* Move stroke style caching/computation into drawing state.//* Fix CGContextConcatCTM (math was backwards.)////* Perform major surgery on CGContext.////* Fix improper use of internal functions in CGPath. (#1249)////* Fix calculating exclusion zones based on CGPaths.////* Implementation of CGImage using Windows Imaging Component. (#1185)////- Implementation of CGImage via WIC//- Remove circular dependencies between CGImage and UIImage//- Implement UIImage interms of CGImage//- Fix issues in UIImage//- Increase code quality in UIImage//- Remove libpng depencie of CGImage//- Improvements to result.h Macros for conditional checks//- Improve code quality for existing image interaction//- Added unit tests////* Add support for black and coloured shadows via ID2D1Effect. (#1239)////* Add support for black and coloured shadows via ID2D1Effect. Closes #1237.//* Apply the CTM transform for commandlist, device transform for final draw.//  Shadows project completely ignoring the context flip and any user translation.//  Therefore, we must translate all our drawing commands when we create//  them, but only apply the device scale in the final composition step.//* Implement CGSizeApplyAffineTransform.//* Allow a private consumer to control the shadow projection params.//* Switch all internal interfaces to HR returns.////* Implement the CGContext non-drawing path functions in terms of CGPath. (#1240)////Curiously, CGContext path queries and CopyPath return untransformed units.//Closes #1238.////* Finish Simple line and status CGPath APIs. (#1255)////* Finish Simple line and status CGPath APIs.////Add additional tests to cover these scenarios.////* Addressing CR Feedback. Releasing leaked paths in tests.////* Addressing CR Feedback. Cleaning up nested conditionals and macro usage.////* Addressing CR Feedback.////* Removing unnecessary internal helper function. Adding extra test case for equality of paths with sub shapes.////* Fixing access to internal members of implemtation for CGPath.////* Rework __CGPath as per new encapsulation procedures.////* Adding additional test case for possible sub shapes equality failure.////* Implement drawing CGPaths through CGContext (#1307)////* Implement drawing CGPaths through CGContext////* Fix calls to return an HRESULT.////* Address CR Feedback.////* Fix poor comptr usage and leaks. Return to static initializer model.////* Refine CGContext's user<->device coordinate space boundary (#1324)////CGContext will now strive, wherever possible, to store its internal state in fully-device-transformed units. This transformation includes the device scale (flip+translate from CG to D2D) and the user scale.////To enable this, this pull request also adds the ability to specify that coordinate system a drawn geometry is in: paths will use the premultiplied values, and user-space geometry values will use userspace->device transformation.////This allows us to leverage the Direct2D effect stack without having to apply input and output transformations to the effects, and simplifies shadow rendering (we no longer transform for userspace in the commandlist and then device space when we draw it.)////* Refactor  CoreGraphics to use IWIC/D2D  (#1332)////- Full Implementation of CoreGraphics via IWIC/D2D//- Refactor CoreGraphics////#1299//#1227//#1246//#1292//#1345////* Update CGContext, CGPath and sorta CGImage for the CFCppBase changes. (#1356)////* Disable CTFont.CreatePathForGlyph////* Adapting the WIC factory creator to follow the outlined format in D2DWrapper (#1357)////* Propagate context alpha into brushes for per-primitive draw, not layer////* Add support for clipping (and EO clipping); add support for non-EO fill. (#1368)////* Properly EO- or Winding-fill Geometries.//* Add support for CGContext(EO)?Clip().////Fixes #1269.////* Add CoreGraphics.Drawing UT and a bunch of image rendering tests.////This change set introduces DRAW_TEST and DRAW_TEST_F, as well as a handful of//image drawing test fixtures. Commands rendered to a test's context as part of//its test body will be rasterized and saved in a file named//TestImage.$TESTCASE.$TESTNAME.png////The test driver's ideal interface is multi-modal; it needs to be able to//generate a corpus of reference images on disk, and it needs to be able to diff//them. For this, it needs a custom EntryPoint (included), and the ability to//parse command-line arguments.////The ideal default mode will be one that loads reference images from disk and//fails tests if a number of pixels differ. That work is not yet complete.////Hopefully, the draw tests here will be able to be plugged into another module//that can perhaps render them to screen, or display them as part of a UI-driven//flow for comparison and demoing purposes.////Refs #1271.////* Implementation of CGBitmapContext. (#1371)////Added custom iwic bitmap to support copying, and backed data buffer.//Added colour conversion format check for pixel formats.//Added tests to draw, render and validate changes.//CGImage changed to use OnLoad caching.////* Changing IWIC image loading to on Load rather than on demand. (#1413)////* Simplify geometry casting. (#1428)////* Disable every drawing test manually instead of using exit(0). (#1434)////* Cleaning up internal headers and moving CGImage implementation to source file (#1430)////* Implementation of drawing an Image into context (#1414)////Implement UIKit image drawing via WIC/D2D #1245 //Added unit and semi functional tests for drawing into context and scaling.////* Clean up internal headers; delete CGContextImpl.////* Clean up CoreGraphics' public headers.////This moves most of the types out of CoreGraphicsExport.////* Automatically generate greenline images for tests and provide for test failure. (#1438)////CoreGraphics.Drawing.UnitTests can now be invoked in one of two modes, mediated by command line flags:////* `--compare[=/path/to/reference/folder]` (_default mode_) compare all rendered images against their baselines, failing the test if any images differ by even a single pixel.//* `--generate [--out=/path/to/output/directory]` generate output images only (do not run comparisons.)////A failing test will emit a brightly-colored diff image to `Greenlines.TestImage.CASE.TEST.png` in the _output directory_, and attach attributes to the gtest output XML data specifying where to find the images. A compatible test runner can load these images and display them side-by-side.////**Open Questions/Concerns**//* I do not like the design of `rgba/bgraPixels`.//* I do not take stride into account; if the image is width-padded, the tests will ikely fail.//* The reference platform loads images in RGBA, and we load them in BGRA. This is not an incompatibility, but it does make manual buffer manipulation dicey.//  * The fix here is to render the image into a NEW context, but that presents a few issues of its own://    * We must trust our DrawImage function//    * We must further validate bitmap context, and trust our bitmap context as an integral part of test execution.//* All tests will be disabled as of the merge of #1434. We can re-enable them and reintroduce reference images after build validation.////Closes #1271.////* remove export of internal function (#1458)////* Fix internal and Objective-C use in CoreGraphics.DrawingTests.////Fixed #1448.////* Use CopyTo(p) instead of *p=Get(). Fixes #1453.////* In CGImageDestination, never pair a Get with a Release.////* *DO NOT* rely on the value of uninitialized memory.////* zero out memory for backing buffer////* Implement Arcs using D2D (#1384)////* Implement arcs and curves in CGPath using D2D////* Implement transformations in terms of D2D simplify.////* Update curves, test app with Transformation options.////* Fixing UI and other things.////* Adding comments on arc math and updating cpputils////* Use CGAffineTransform equality function instead of defining our own.////* Fix const getter functions, reorder out pointer arguments////* Fix failing coordinate tests due to stomped equality operator.////* Re-Integration from develop->CGD2D////- Removal of bridged IDisplayTexture #1337//- Getting it to build//- Proper usage of the IDisplayTexture//- Tests validated//- Usage of proper colour format//- Move image files to data folder and change tests to adapt.////* [CGD2D] Add support for Transparency Layers. (#1496)////This changeset introduces support for transparency layers. Transparency layers serve as render targets that are composed down to the backing surface in one fell swoop.////To make way for this, CGContext was mildly refactored://* Existing private (denoted by `__CGContextX`) methods were moved into `__CGContext` the class as `__CGContext::X`.//* Graphics state manipulation was promoted to `__CGContext`.//* Some methods were promoted to drawing state methods (clipping, draw decision)//* `__CGContextLayer`, a class that tracks a stack of drawing states and their destination buffers, was introduced.//* CGContext's render target setup was moved into its constructor.//* `globalAlpha` was reintroduced, as sometimes per-primitive alpha is just not enough. *Such as: layers are composed down all at once using the alpha set at the time the context was created.*////Deficiencies://* Clipped layers are implemented in terms of a baseline clipping state applied to the layer. All primitives are drawn through a Direct2D **PushLayer** and **PopLayer** pair.//* Alpha-composited layers are implemented in terms of the same.//* There is some dodgy math witnessed on the reference platform that grows shadowed layers by some combination of shadow offset and width; an attempt was made to mimic this.//* Minor layering violations that pass a `__CGContext` to a `CGContextXxx()` public function by way of **this**.////Fixes #1427, #584.////* Implement CGPathApply (#1507)////* CGPathApply////* Curve Apply Test Page////* Update tests, address CR feedback, move geometry sink to individual file.////* Addressing CR Feedback.////* Fix no-op on cgpathapply when path is null.////* Address CR Feedback////* Single element point arrays are now just a variable////* Ignoring clang warnings on ARM builds for WRL helpers.////* Replace lost ID from last commit.////* Remove bitmap context hack from NSTextContainer////* Fix Affine Transform in CGPath (#1550)////* Affine Transform////* Remove excess com pointer usage from getters.////* Update API status.////* Enable Path Tests + Reference Images////* Disabled AddEllipseInRect test until CGContextSetStrokeColor is supported.////* Add support for copying subregions from CGIWICBitmap.////References #1379.////* Convert CGBitmapContext's image on output (if data isn't provided).////* Convert ImageIO to use CGImage's WIC internals directly.////Additionally, clean up some EXPECT/ASSERT/_MSG in ImageIO Tests.////Fixes #1287.////* Tidy CGImage's list of supported pixel and rendering formats.////Add some more bitmap format tests, and adjust the rest of the tests to//match.////* Fix CoreGraphics.Drawing's image loader & premultiplied alpha.////* The unpremultiplier here matches the algorithm used in WIC.//* A test image has been added that will load unpremultiplied, but render//  premultiplied.////* Add support+tests for clipping context rendering to an image mask. (#1528)////This pull request adds support for clipping rendering into a context by an image or an image mask in terms of Direct2D opacity brushes.////An image mask is a grayscale image whose pixel values range from 0 to 100%, and those values are taken as inverse alpha. That is: a fully black image (px=0.0) will be rendered through at alpha 1.0; a fully white pixel will be at alpha 0.0 and values between the two will be interpolated appropriately.////Masks can be stacked. This is implemented in terms of a double composite operation; the two opacity brushes are combined and used to draw a black region into a new image. The new image will serve as the final bitmap backing the new opacity brush.////Since Direct2D does not support b/w masks natively, an effort was undertaken to translate them into alpha channel masks.////Black/white masks do, unfortunately, not work with CGBitmapContext as-is. We cannot render an image into a 1-component colorspace bitmap. This requires that this pull request be merged after #1529.////Fixes #1421. Provides a base implementation for #1425.////* Add support for CGImageCreateWithMask. (#1555)////Fixes #1425.////* Store CGContext's text position in its text matrix. (#1580)////* Implementation of Tiled Images + tests (#1542)////Implementation of Tiled Images + tests #1417////* Implementation of fill and stroke pattern brushes and tests #1422////* Implementation of set stroke and fill methods #1422//refactor existing code to use common functions.////* Implementation of Linear gradients with full optional support  (#1416)////* Support opacity and interpolation for Drawing Images (#1557)////* Add support for opacity and interpolation for drawing images #1556////* Reintegrate CoreGraphics and Accelerate.framework. (#1680)////Fix some dodgy memory management in Accelerate.////* Fix Accelerate.UnitTests. Fixes #1285.////* Fix (and update) UIGraphicsFunctions. (#1681)////Fixes #1642.////* Do not use UIColor in CoreText!////* Fix CGImage to not copy CGDataProvider. Fix CGDataProvider in vImage.////* CoreImage:Implementation of CIImage using CGImage + test (#1625)////* CoreImage:Implementation of CIImage using CGImage + test////* Proper annotations for implemented methods (#1719)////* Implementation of JPEG & PNG representation and tests////* #1338 Adding support to copy images to/from clipboard////* Add woc::AutoCF<T>. It's like AutoId<T> for CFTypes.////Just like AutoId<T>, it takes a lifetime trait template: CFLifetimeRetain//for CFRetain/CFRelease, and CFLifetimeUnsafe for straight assignment.////It builds upon and replaces woc::unique_cf<T>.// * It is copyable (and can share ownership)// * AutoCF<T> can be passed anywhere T* is required.// * It has a fully-loaded operator& so you can pass it wherever//   a T** is required. The old value will be released.// * It has counterparts in StrongCF and UnsafeCF, just like StrongId//   and UnsafeId.////By default, a StrongCF will *share ownership* of a CFType.//To transfer ownership, construct it with std::move(cf) or use//woc::MakeStrongCF<T>(CFCreateXxx(...)).////As a migration measure, woc::unique_cf is still provided, though it is//now based on StrongCF. It retains its ""transfer ownership on construct""//semantics and provides a few shim methods to adapt it to the//AutoCF/AutoID world (release -> detach, reset -> attach).////(cherry picked from commit a64f48238e8876fd2cfe966626baa8d35aec04de)////* Fix fallout from the merge of #1692.////* Migrate the text drawing code from Cairo to CGD2D.////* Fix the default fill/stroke color values from the reference platform.////* #1733 CGContextClearRect: Support to clear rect if clipping is not set (#1743)////* Fix our WIC<->CG color format table again.////Fixes #1694.////* Work around #1769 by doing the DPI calculation ourselves.////* Fix Figure Creation in CGPath (#1738)////* Fix Figure Creation in CGPath////* Fix private class member naming.////*  Merge with CGD2D////* Check for null geometry on figure end calls////* Plug memory leak in __DWriteTextLayoutApplyFont (#1788)////Fixes #1766////* Fixing ApiAnalyzer errors. (#1794)////* NSTextContainer handle exclusion zones extending outside of area (#1792)////Fixes #1779////* getNetworkConnectivityLevel can throw under some circumstances.  Handle (#1795)////* getNetworkConnectivityLevel can throw under some circumstances.  Handle//these and treat the connection status as 'not connected'.////* Fix leak in NSRunLoop _statesForMode: helper (#1793)////* Fix leak in NSRunLoop _statesForMode: helper////* just use autorelease for helper; remove additional unused method from NSRunLoop (which would double release if called)////* SC callbacks must by default happen on the main thread unless the app (#1801)////specifies a different queue.  This fixes a crash in reachability sample.////* Fix drawing tests on OSX (#1815)////Need to be explicit about stealing the deltaImage when doing a move of our ImageDelta////Fixes #1805////* UX Functional test pattern - exercising sample app's UIViewController within a functional test (#1771)////CHANGES://1. Created a new XAMLCatalog UIViewController with 2 controls (slider, UITextField) to manipulate a UIButton's label//2. This UIViewController's exposes a public UIButton property that can be manipulated from a functional test (UIButtonTests)//3. Created UX helper class, ViewControllerTestHelper, to display visuals using pushVC/dismissVC//4. Created UX helper class, XamlEventSubscription, to register/unregister XAML property change events//5. Updated FunctionalTest VCXPROJ to move external VCs into its own folder////TODO://1. Migrate NSCondition to Win32 event mechanism////* CoreText Performance: Call ID2D1RenderTarget::BeginDraw()/EndDraw() f… (#1705)////* CoreText Performance: Call ID2D1RenderTarget::BeginDraw()/EndDraw() fewer times////Fixes #1620////* - Added Begin/EndDraw pairs to a few more places//- Mitigated an issue with cairo where ID2D1RenderTarget would sometimes cache a before state during begin draw,//  and wipe out any changes cairo made, breaking APIs like CGContextFillRect.//- Changed implementation/naming of the 'escape the current begin/end draw stack' functions////(cherry picked from commit d5a86b9e1a8fe77f634c836bee1fb51c07cb05ce)////* Merge #1705 to CGD2D// - Add PushBeginDraw/PopEndDraw pairs to UISegment, UIImage//   (not on develop since this likely would've actually hurt performance there)// - Add Escape/Unescape pairs to CGContext areas where the target is changed////Fixes #1635////cr feedback////cr feedback////(cherry picked from commit 0ac549166b3ee8a1b55554d014bcde50ccb3414a)////* Remove Cairo and unused dependencies (#1797)////Fixes #1455////* [CGD2D] Render buffer-shared G8 images as A8. (#1804)////This is riddled with caveats, many of which are documented in the code.////A first pass attempt was made to implement a format converter that would run//per-primitive. It's expensive, but it did get the job done.////Unfortunately, asking WIC to convert a PRGBA buffer to a G8 buffer causes it to//discard all alpha data -- even if premultiplied, the luminance of//partially-transparent pixels is not appropriately reduced in the final G8 image.//This impacts alpha-heavy uses such as grayscale font rendering.////The A8 implementation was chosen for maximal compatibiltiy with Cocos2D. Cocos2D//renders white (!) text into a ""grayscale"" buffer that it then passes off to//OpenGLES as a `GL_ALPHA8` buffer. Hah.////The A8 ""hack"" also represents what we currently have on the develop branch.////Fixes #1747.////* Use custom font for stable version and copyright (#1799)////Fixes #1798////* Change parameterized test to use custom font (thanks Dustin :D)////* Initialize m_lastPoint; fixes intermittent test failure.////* Porting ObjectiveC language services VSIX to VS2017 (#1745)////* Make sure our touch/point conversion works in middleware (C#-hosted, etc.) scenarios.  Controls that are placed within arbitrary Xaml scenes don't have a superview chain up to a valid UIWindow, so touch point conversion is failing.  The fix is to - in middleware scenarios - use the app's main UIWindow for any UIView that doesn't have a superview. (#1821)////Fixes #1818.////* Fix various Uikit memory leaks (#1803)////* Fixing some UIKit/WinRT projections memory leaks.  Any time we allocate a WinRT projected object via make*, we are responsible for freeing it.////* Fixing leak in Autolayout and its usage of ClSlackVariables.////* Updating libcassowary build output with memory leak fix.////* Incorporating CR feedback.////* Allow _UIPopupViewController to present itself in middleware scenarios. (#1832)////A recent fix/change to UIViewController (75effb9) regressed one of our middleware scenarios. UIViewController now makes sure that one is presenting over a currently-visible ViewController. However, in middleware scenarios, that won't hold true, so we must loosen the check in such cases.////Fixes #1831.////* Fix additional leaks in UIKit (#1789)////* Fix additional leaks in UIKit////* just add autorelease to paragraphStyle helper////* address CR (prefer local StrongId to adding a bare release in UIDatePicker; add ARC enabled assertions). fix additional leaks in UITabBarController.////* ObjC2Winmd: Support for async delegates with multiple parameters (#1833)////* Fix a missed endianness flip in #1748.////Fixes #1837.////* Fix various leaks in Foundation (#1834)////Thanks to @ehren.////* Migrate foundation tests out of woccatalog (#1826)////Moves Foundation Tests, which includes task_info, URL Session, and UserDefaults, and moves them to a new test app Foundation-Dev in tests/testapps////Fixes #1577////* Migrate foundation tests out of woccatalog////* Even more relative path////* Updated GLKitComplex sample project with missing textures. (#1842)////* Add data files to xcodeproject////* Updated glkit project with missing textures.  Fixes #1840.////* Fixing Github issue 1602 and 1689 - sizeThatFits and adjustFontSizeToFitWidth does not work on UILabel////* Revert ""Redo locking and ref counting in NSOperationQueue to be much safer. A… (#1676)""////This reverts commit 1db8c6608349fddc6d95fbff2df8dc33f9272904.////* Revert ""Fix various leaks in Foundation (#1834)""////This reverts commit 3a654940c4d8bfba2b7f67e7a67473b34dfe1fae.////* Fix #1827 by flipping the context *properly* in UIImage draw.////* Reimplement CGContextDrawImage in terms of _CGContextDrawImageRect.////This fixes the heavy drawing overhead on 9patch images, which used to//apply a context-global clip and draw the image in full nine separate//times.////Now we get to use D2D's native image region subsetting support!////* Created UX test helper class and simplified the tests using the new UX pattern (#1855)////* Created UX test helper class and simplified the tests using the new UX pattern////CHANGES://1. Created UXEvent class, wrapping NSCondition, and UIColor and WUXMSolidBrush comparison method//2. Added more controls to manipulate a UIButton via XAMLCatalog's viewcontroller//3. Applied new UX test pattern to CALayerAppearance tests////Fixes #1764, #1757////* Fix CGPathEqualToPath Implementation (#1813)////* Fix CGPathEqualToPath////* Address naming feedback and coding conventions.////* Address CR Feedback.////* Fix overuse of m_ and provide more proper names for parameters////* Fix islandwood news crash in article view when panning (#1857)////* Some improvements to RETURN_RESULT_* macros (#1862)////* Some improvements to RETURN_RESULT_* macros////* some nit picking////* Use _CGContextPushBegin/PopEndDraw for Drawing Tests (#1870)////* Use _CGContextPushBegin/PopEndDraw for Drawing Tests// - Since we generally expect real use-cases to use these functions for perf purposes,//   we should also validate that our drawing is correct when using them.// - Fixed a stray raw ->BeginDraw() ->EndDraw() in CGContext.mm that was missed//   and could cause crashes if used under PushBegin/PopEndDraw////Fixes #1869////* better format a comment////* Adding macros to enchance return and failure checks. (#1871)////* NSURLSession should throw for creating tasks with nil request or resume data (#1860)////Fixes #1844////* Check for nil before trying to resume////* CR feedback////* Fix starting position of arc in bezierPathWithArcCenter (#1864)////* Fixing more UIKit memory leaks (#1863)////* Fixing leak in UIKit.Xaml controls, and a leak in UIButton.////* Adding UIButton memory leak tests.////* Switching to fancy new event helper.////* Add a slight delay after freeing the UIBUtton to prevent a very intermittent test failure (failed twice out of 500 times).////* Switching to StrongId for VC.////* Incorporating CR feedback.////* Fix various leaks in Foundation (#1873)////Fixes leaks in NSLog and internal logging funcs, NSString and NSMutableString leaks,//and an NSTimer leak.////* Remove some dead code from bff7cce92.////* If the user provides bitmap data, a bitmap context must copy it out.////* [vImage] Don't hire a bitmap context to do our dirty work.////Converting an arbitrary buffer of bytes into an image should be handled//by CGImage. Using CGBitmapContext and its rather more limited set of//formats is bound to fail more often.////* Fix the Accelerate samples to use 32bpp images & proper byte ordering.////* Fix a missed swap from the format table introduced in 2122f2a18.////* Winmd2ObjC update: Fixed inconsistencies with create method and added annotations. (#1883)////* Enable vertical pixel-snapping when drawing glyph runs (#1890)////- Devices with vertical antialiasing would render text as blurry if rendered on a fractional vertical coordinate.//   - CGContext functions that draw glyphs do not necessarily use coordinates from our custom text renderer,//     which already has pixel snapping enabled.//   - As such, manually round the y-translation in CGContext::DrawGlyphRun()// - Updated reference images for two drawing tests dealing with line height.//// Fixes #1594////* Remove EbrCenterTextInRectVertically (#1882)////Changes UITabBarButton to directly center text vertically in drawRect://Removes dead code from UITextView-sizeThatFits:////Fixes #1812////* Change targets less in CGContext (#1878)////* Change targets less in CGContext// - CGContext previously changed targets for all draw primitive functions.//   Since changing targets causes an immediate flush, this significantly negatively impacted performance.//   Changed implementation to only change targets when needed (when shadows are enabled)// - Added drawing tests for a few edge cases regarding shadows and clipping.// - Removed unnecessary Escape/Unescape functions - these were not necessary to change targets as previously surmised.////Fixes #1810////*  - Enabled all shadow tests, using our current output (as opposed to reference platform) as reference images// - Make the reversion of transform to the identity matrix safer// - Misc cleanup////* CR feedback////* Rewrite portions of EbrFile handling to use UTF16  (#1891)//////* Rewrite path mapper to simplify code and support UTF16 path names.//* Rewrite Ebr file apis to use new path mapper.//* Remove dead code.//* fixed unit tests to build after refactor.//* Add NSFileManager test to use special characters.//* EbrGet/SetWritablePath are now IwGet/SetWritablePath, and support//UTF-16.////Fixes #1875////* Updating functionaltest.ps1 so it works in VSTS. (#1896)////* Disabling some NSDecimal subtraction tests on OSX (#1908)////* Update NSURLSessionConfiguration defaults to support OSX 10.12 (#1905)////#1905////* Objc2Winmd binary update:  (#1913)////* Objc2Winmd binary update: Fixed memory leak issues with IAsyncOperation implementation////* ObjC2Winmd binary update: Removed unnecessary comments////* Add benchmarking test project and add text drawing benchmark tests (#1876)////Creates a new test project Benchmark in the Unit Test group, which leverages GTest to run automated benchmark tests. Simple tests can be done with the TEST_BENCHMARK macro, or more complex ones can be used by creating classes to do setup and teardown so only specific parts of code are measured.////* Turning of clang modules. (#1914)////* Moving windows specific archival test(BackwardsCompatibilityWithOldWinObjCArchives) to windows only unit tests (#1907)////* This change implement UILabel minimumScale (#1918)////* implement UILabel minimumScaleFactor////* revert unncessary change to diagnose #1894////* CR comments////* comments////* SetTempFolder() should take wchar_t instead of char so that we don't (#1916)////* SetTempFolder() should take wchar_t instead of char so that we don't//lose encoding information. Fixes #1915////* Update usage of path names to UTF8 instead of CString////* CR feedback////* Update Implementation of NSURL.deletingLastPathExtension to OSX 10.12 (#1906)////* Improve performance in __CF_IsBridgedObject/__CF_IsCFObject (#1923)////* Improve performance in __CF_IsBridgedObject/__CF_IsCFObject// - __CF_IsCFObject() calls __CF_IsBridgedObject()// - Previously, __CF_IsBridgedObject() would do an O(n^2) comparison against the entire runtime class table.//   (O(n) traversal of table * O(n) check of inheritance tree)// - These two functions are used in CF memory management functions, such as CFRetain/Release,//   and due to their prevalence, took up substantial portions of CPU time.// - Changed bridged classes to adopt an empty 'bridged object' protocol when they are bridged/added to the class table.//   This protocol can be quickly checked against, and obviates the need to traverse the table.// - Removed some redundant _cfisa checks in _CF_IsCFObject////Fixes #1490////*  - Remove use of objective-C////*  - Also handle NSCFType////* Switch our D2D factory to be multithreaded. (#1911)////Fixes #1895.////* Use block scope thread_local static for NSProgress progress stack (#1912)////* Use block scope thread_local static for NSProgress progress stack:////Works around issue with file_scope thread_local in current clang. Leak check unit test added.////* cr feedback: collapse initialization////* switch to auto and return type deduction////* Reintroduce unique_cf's move ctor/assignment.////* Enabling some image drawing tests, moving image drawing to a separate… (#1605)////* Enabling some image drawing tests, moving image drawing to a separate file and updating some image file names////* Fix bug in sizeWithFont (#1917)////NSString+UIKitAdditions sizeWithFont:constrainedToSize: should return the height that the text requires rather than the height of the text that can actually fit in the region that CTFramesetterSuggestFrameSizeWithConstraints returns.////* Framework changes as a prestep towards supporting TAEF tests.////* Add a common test static lib and move all tests to use TAEF under the covers////* Small fixes in UTs for debug.////* CoreAnimationTest update - disable unsupported CALayer controls; adds a header and footer table entry; affine transformations update (#1874)////* CoreAnimationTest update - disable unsupported CALayer controls; adds a header and footer table entry; affine transformations update////CHANGES://1. Supports the enabling/disabling of layer property controls (greyed out if disabled)//2. Custom table view cells for header and footer added - view and number of layers//3. Affine transformations are now applied collectively, 3D transformation still require it to be centered at origin//4. Cosmetic updates and autolayout corrections - IslandWood autolayout still has some quirks (see CGRect- and CGPoint- cells)//5. All specialized layers extracted from external sources are marked as ""not supported"" even if render partially////Fixes #1598////* Code review feedback////* Change test output location////* Fix GitHub CI build status reporting////* Fix the Unit Test build break on OS X.////Fixes #1941.////* Augment the drawing tests with TAEF-specific behaviour.////* Fix interoperability with TAEF setup/teardown.//* Add a TAEF entrypoint and clear the win32 stuff out of the OS X one.////* Move UIKit.Xaml DependencyProperty registration out of UIKit.Layer's constructor. (#1949)////Fixes #1930.////* This change includes the addition of a few new features to UIButton. (#1920)////* This change includes the addition of a few new features to UIButton.  Some functionality deviates from the reference platform, but we feel that it aligns more closely with the default look and feel of Xaml buttons on Windows because buttons 'look' pressed in more cases with these changes, and there are straightforward ways to opt out of this behavior if it's not desired.////**adjustsImageWhenDisabled/adjustsImageWhenHighlighted**://We're adding WinObjC-specific support for adjustsImageWhenDisabled and adjustsImageWhenHighlighted.  On the reference platform, this tinting/darkening behavior is ONLY applied to the button's background an foreground images, but on our platform, the tintening/darkening is applied to the entire button's bounds (including its background color), but NOT to its label text.  The primary justification for this approach is that there's not a straighforward way to tint Xaml Images on RS1, yet this approach also helps us implement simple SystemButton support and it makes UIButtons appear a bit more 'windows-like' in many cases, since they show more distinct pressed behavior.  The behavior is as follows; if adjustsImageWhenDisabled is set to YES, and if no UIControlStateDisabled properties are set on the button, then the entire button contents (aside from its label) receives a lightening effect.  Similar behavior is implemented for adjustsImageWhenHighlighted.  The way to opt-out of this behavior is to either set a single UIControlStateDisabled/UIControlStateHighlighted property, or to set adjustsImageWhenDisabled/adjustsImageWhenHighlighted to NO.////**SystemButton (aka buttonWithType)**://We're adding support for UIButtonTypeSystem, which behaves as follows:////	- Default background is white.//	- Receives a default text color of (blue/green) [UIColor colorWithRed:0.0f green:0.47843137f blue:1.0f alpha:1.0f] which applies to all states (unless set otherwise)//	- Default to UIColor lightTextColor for disabled titleLabelColor////**SystemButton - Deviations from the Reference Platform**://	- When selected, the entire label background turns the default text color (blue/green) [UIColor colorWithRed:0.0f green:0.47843137f blue:1.0f alpha:1.0f], and the text color is changed to white.  This seems like a corner case that we're not implementing until we need to for a customer.////	- When highlighted, the titleLabel contents (its text and any sublayer content) are tinted to a darker/greyed out version of the normal state.//		- Instead of this behavior, we're piggy-backing off of our adjustsImageWhenHighlighted implementation to avoid needing to do this extra work.  The button *looks* highlighted, so we don't have to change the text color.////	- On the reference platform, when disabled, text is grey by default, UNLESS any custom normal or disabled text colors are set.  On our platform, we DEFAULT to disabled to grey text and then you can change it, but changing the normal color won't affect the default color (for the sake of simplicity).////Scrubbed Annotations://All UIButton annotations have been scrubbed and updated with 'NotInPlan' status as needed.////Fixes #1442//Fixes #1885//Fixes #1671//Fixes #1671////Fixes VSO 10145069.//Fixes VSO 9533114.////* Adding comments + clang-format.////* Incorporating CR feedback.////* Fixing up UIButton tests.////* Partial revert of 8bbd30f739343b5afa73e63a33583cfda10eaf4d (#1957)////* Partial revert of 8bbd30f739343b5afa73e63a33583cfda10eaf4d////* Fixing lab tests.  Also combinining tests into 1 common test. (#1951)////* Fixing lab tests.  Also combinining tests into 1 common test.////* CR Feedback.////* CR feedback////* Projection binary update: Fixed ARC issues caused by names starting with new/copy/alloc////* Projections binary update: fixed annotations for non-object types////* Working around #1965 in UIImageSetLayerContents. (#1967)////Fixes #1962.////* Adding support for borders to UILabel and UIButton (via CALayer and the CoreAnimation/UIKit composition layer).  Note that we still don't have border support on basic CALayers, because we haven't needed to add them yet, but the plumbing is in now place to add them when needed. (#1956)////Fixes #1884.////* Supporting gesture subclassing and firing delegates for supporting gestures concurrent firing negotiations. (#1909)////* Supporting gesture subclassing and firing delegates for negativating concurrent firing////* Comments////* Fix some regressions////* separate the gesture processing code into its own class and adding initial tests////* CR comments////* Comments////* comments////* delete UIGestureRecognizerDelegate.h which causes protocol forward usage which av the tests////* Add support for all CGTextDrawingModes (#1933)////Several changes have been added to address #1933 and #1935////CGContextDrawGlyphRun has been changed to _CGContextDrawGlyphRuns and __CGContext::DrawGlyphRun -> __CGContext::DrawGlyphsRuns, which takes a dummy struct GlyphRunData, which holds the DWRITE_GLYPH_RUN, relative position of the glyph run (to the text position), and attributes of the glyph run (fill color, etc.).////Text drawing methods such as CTFrameDraw now accumulate an array of GlyphRunDatas and pass them to _CGContextDrawGlyphRuns, which in turn calls context->DrawGlyphRuns.////To batch all run drawing for clipping/stroking into the same geometry, the runs have to be drawn with the same transformation, so position has to be given (hence relative position in GlyphRunData). The position is transformed by the inverse of the text transform, so when the glyph is drawn and transformed by the real text transform it will have the correct position. This has the added benefit of allowing us to draw a glyph run which has a transformed text matrix all together, rather than glyph-by-glyph as we did previously.////Because text drawing is being batched, attributes which are handled at draw time on a run-per-run basis such as fill color need to be done in DrawGlyphRuns. The attribute names are defined in CoreText, though all of them are just CoreGraphics attributes, so local values have been added to CGContext.mm and exported for the CT/UIKit versions as CG.////Images have been updates since changing this seems to have enabled antialiasing to some degree on several tests.////Fixes #1933//Fixes #1935////* Fixing naming of UIKit.Label helper method: TextBox->TextBlock. (#1970)////* Add support for colored and non-colored Patterns (#1952)////* Add support for coloured and non-colored Patterns//* Enables proper anchoring for patterns////* Avoid D2D1Group fill mode conversion for CGPath. (#1954)////* Avoid D2D1Group fill mode conversion for CGPath and other simple geometries. Fill mode conversion removed from CGContext.////* Remove unnecessary check for proper fill mode since only one fill mode will ever be converted to.////* Parameterized test for fill modes with embedded circles with alternating arc directions.////* Fix Fill/Stroke tests and remove redundant tests.////* Fix relative project path////* Updating version for 1702 release",https://github.com/microsoft/WinObjC/commit/ffe05fa6e5c7819a6cb2c9105ed9694245656842,37950166,microsoft/WinObjC,False,False,"['#1992', '#1085', '#1112', '#1126', '#1138', '#1181', '#1180', '#1177', '#1249', '#1185', '#1239', '#1237', '#1240', '#1238', '#1255', '#1307', '#1324', '#1332', '#1299', '#1227', '#1246', '#1292', '#1345', '#1356', '#1357', '#1368', '#1269', '#1271', '#1371', '#1413', '#1428', '#1434', '#1430', '#1414', '#1245', '#1438', '#1434', '#1271', '#1458', '#1448', '#1453', '#1384', '#1337', '#1496', '#1427', '#584', '#1507', '#1550', '#1379', '#1287', '#1528', '#1529', '#1421', '#1425', '#1555', '#1425', '#1580', '#1542', '#1417', '#1422', '#1422', '#1416', '#1557', '#1556', '#1680', '#1285', '#1681', '#1642', '#1625', '#1719', '#1338', '#1692', '#1733', '#1743', '#1694', '#1769', '#1738', '#1788', '#1766', '#1794', '#1792', '#1779', '#1795', '#1793', '#1801', '#1815', '#1805', '#1771', '#1705', '#1620', '#1705', '#1635', '#1797', '#1455', '#1804', '#1747', '#1799', '#1798', '#1745', '#1821', '#1818', '#1803', '#1832', '#1831', '#1789', '#1833', '#1748', '#1837', '#1834', '#1826', '#1577', '#1842', '#1840', '#1676', '#1834', '#1827', '#1855', '#1764', '#1757', '#1813', '#1857', '#1862', '#1870', '#1869', '#1871', '#1860', '#1844', '#1864', '#1863', '#1873', '#1883', '#1890', '#1594', '#1882', '#1812', '#1878', '#1810', '#1891', '#1875', '#1896', '#1908', '#1905', '#1905', '#1913', '#1876', '#1914', '#1907', '#1918', '#1894', '#1916', '#1915', '#1906', '#1923', '#1490', '#1911', '#1895', '#1912', '#1605', '#1917', '#1874', '#1598', '#1941', '#1949', '#1930', '#1920', '#1442', '#1885', '#1671', '#1671', '#1957', '#1951', '#1965', '#1967', '#1962', '#1956', '#1884', '#1909', '#1933', '#1933', '#1935', '#1933', '#1935', '#1970', '#1952', '#1954']",67
214,8c62a30786495996be1656fadb7846ed2cd2e0f3,"Fixed two spinner Content/Control view issues.//- Issue #272 ControlViewSpinnerStructure should allow ListItem/- Issue #268 ContentViewSpinnerStructure should allow ListItem//In both cases, the code now allows for 0 or more ListItem children of the spinner control.//Note: Keen observers of the documentation may notice that list items are permitted only when the Selection control pattern is present, and such a check is not done in this code. This is a shortcoming of several of the content/control view rules. However, since no rules currently check for such patterns, it is not the intent to remedy that as part of this change.//Another such failing is that the children are not actually checked to make sure they have the IsContentElement or IsControlElement properties set to true. This failing is common throughout these rules. And again, there is no intent to remedy that as part of this change.",https://github.com/microsoft/accessibility-insights-windows/commit/8c62a30786495996be1656fadb7846ed2cd2e0f3,160750843,microsoft/accessibility-insights-windows,False,False,"['#272', '#268']",68
217,15827c5d306e007d7da0f97b34dbde7624f37b84,"Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin(). (#907)//Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin().//This adds support for a common use pattern in extensions, and adds//error checking to avoid future incompatibilities.",https://github.com/microsoft/pxt-blockly/commit/15827c5d306e007d7da0f97b34dbde7624f37b84,79385111,microsoft/pxt-blockly,False,False,['#907'],69
218,b4d664f526fda6a151f5092bfeaf9c726698b1c6,"Don't require a name or version in ""project"" manifests. (#605)//* Don't require a name or version in ""project"" manifests.////In resolving https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1494960 ""[vcpkg ce] vcpkg-ce does not find vcpkg.json to find vcpkg-configuration.json"" I ran into a problem for existing vcpkg artifacts-only customers, where today they can name artifact dependencies without needing to supply a name or version. I want to be able to provide a reasonable ""how to fix it"" message for these customers and it seems reasonable to be able to declare dependencies without having a name or version. After some discussion with @ras0219-msft and @vicroms , the requirement for a name and version seems to be a historical artifact of using the same code to parse both port manifests and consumer/project manifests.////include/vcpkg/sourceparagraph.h://Rename parse_manifest_object to parse_port_manifest_object and add parse_project_manifest_object.////include/vcpkg/versiondeserializers.h://Declare visit_optional_schemed_deserializer (with static removed in the versiondeserializers.cpp)////include/vcpkg/versions.h://Add VersionScheme::Missing for the case that it isn't provided.////cmakevars.cpp://Use ""_manifest_"" as the ""port"" name when a name wasn't supplied for purposes of vcpkg_get_dep_info.////add.ps1://Add a new test of add port that uses an input manifest with no name or version information.////manifests.ps1://Remove name and version from the prototype manifest. Note that some of the tests still use a manifest with a name; in particular the ""self reference"" ones so we still have coverage of that.////format-manifest.ps1://Add project manifest examples in addition to the previous ""reserialize all ports"" test.////* Put the json entity type assert in the right place.////* Use JSON stuff rather than string stuff in the parsing tests.////* Invert template method pattern in manifest deserializer.////* Formatting////* Add overlay ports test.////* Add output asserts.",https://github.com/microsoft/vcpkg-tool/commit/b4d664f526fda6a151f5092bfeaf9c726698b1c6,319781556,microsoft/vcpkg-tool,False,False,['#605'],70
227,1d787d5cb799bed43282e6178a830ef186d4e5f7,"Move Loader Constructor to Props Pattern (#3945)//As part of some prototyping related to the version work, I saw the need to add another parameter to the loader constructor. I'm not sure what will come to fruition, as I'm continuing to explore a few designs. However, in looking at adding a new param i saw that the current constructor already takes several optional params, which is cumbersome, as each preceding optional param must be specified to specify the next. Moving the loader to a props pattern will make the loader easier to work with and construct.////Additionally, many of these same parameters are then passed to the container. I've simplified this to just pull the properties it needs directly from the load itself.",https://github.com/microsoft/FluidFramework/commit/1d787d5cb799bed43282e6178a830ef186d4e5f7,203843667,microsoft/FluidFramework,False,False,['#3945'],71
228,51c3ce7c564d4cf18dfc1594bd3a8efb29d5dc18,.NET adding internal cache prototype (perf improvement) (#1998)//* .NET adding internal cache prototype for speed (#1)////* Initial config normalization in English////* Add internal cache prototype////* Updated new Swedish recognizers and fixed Date cache experiment.////* Removing support for .NET Framework 4.5 and 4.5.2.////* Adding flag to disable internal cache.////* Fixing TurkishNumberRangeParserConfiguration to use Turkish number extractors.////* Making sure English number range passes Options internally.////* Moving cache keys to tuples. Making sure all datetime extractions receive reference time.////* Further improvements with cache reuse and key changes.////* Adding ISO 639-2 language codes to relevant pattern files////* Moving to standardize configs. Needs to be propagated to other languages.////* Reducing number of cache instances and propagating to Dutch.////* Centralizing number resultscache code and propagating configs to Chinese.////* Propagated configs and cache to Spanish and Portuguese numbers.////* Patch for other platforms after the language marker changes to match ISO////* Minor cleanup,https://github.com/microsoft/Recognizers-Text/commit/51c3ce7c564d4cf18dfc1594bd3a8efb29d5dc18,88544417,microsoft/Recognizers-Text,False,False,"['#1998', '#1']",72
242,518c2b7874153eeaa4779abde356985473b0debd,"Restrictions on redeclarations of no prototype functions. (#76)//Calls to no-prototype functions are not type checked according to the C specification (Section 6.5.2.2 of the C11 specification).  The lack of type checking allows the checking of bounds declarations to be bypassed.   For the Checked C extension, this is addressed by not allowing redeclarations of no-prototype functions to have prototypes that use checked types, as well as not allowing checked values to be passed to no-prototype functions.  Section 5.5 of the Checked C extension specification describes the restrictions.  ////This change implements the Checked C restrictions on redeclarations of no-prototype functions.  It is  part of work on issue #30.    The restrictions are implemented by changing the implementation of C type compatibility in clang.   We make no-prototype function types incompatible with function types that take arguments or return values that have checked types, contain values with checked types embedded within them, or are recursively pointers to function types that take or return check types.  We also change the construction of function types from function declarators to enforce the Checked C rule that a no-prototype function cannot have a checked return type.////When two declarations of a function are incompatible, we try to diagnose whether a failure is due to a Checked C type compatibility rule and print descriptive error messages.   We do this only when the failure  is because of the presence or absence of a prototype of a declaration.  We do not try to diagnose type compatibility problems involving parameters with function pointer types,  In that case, programmers will get a generic ""types are not compatible"" message.////There is a subtle complication when checking redeclarations in the presence of incomplete structure or union types.  In the Checked C rules, a function type with an incomplete type is compatible with a no-prototype function (because the incomplete type is unknown).  For a series of declarations of a function, clang merges the types so that the latest declaration has the merged type.  This means that a function could start as a no-prototype function, be given a prototype with an incomplete type, the incomplete type could be completed to be  checked type, and then the function could be declared again://```//int f();      // decl 1//struct S;//int f(S v);   // decl 2//// complete the type//struct S {//  ptr<int> p;//}//...//int f(S v) {  // decl 3 (possibly a definition)//  ...//}//```//clang looks at only the type of the prior declaration when merging declaration types.  For Checked C, this misses the fact that `f` was declared originally  as a no-prototype function at `decl 1`.   The prototype was allowed only because it involved an incomplete type at `decl 2`.  If we had the complete type at `decl 2`, the prototype would not have been allowed.  Instead of looking at just the prior declaration, we look back at all prior declarations of a function to make sure they are compatible with the current declaration of the function.////Note that we still need to prevent `decl 2` from being used after `S` is complete.  The current change only addresses redeclarations of `f`, not uses of `f`.   That is  future work tracked by issue #75. ////In the implementation of type compatibility, we miss the case of no-prototype function pointers being incompatible with prototype function pointers that take integer arguments with bounds.  This depends on issue #20 (adding bounds to function types).  We will address this case as part of issue #20.////Testing://- This change uncovered places in existing tests in the Checked C repo where we were using no prototype functions.  Update the tests to properly declare the functions as having no arguments (using the `f(void)` pattern).//- Add a new tests on to Checked C repo in typechecking\no_prototype_functions.c.//- Add some clang-specific tests under tests\CheckedC\typechecking.c.//- Passes the updated and new Checked C tests.//- Passes the existing clang regression tests.",https://github.com/microsoft/checkedc-clang/commit/518c2b7874153eeaa4779abde356985473b0debd,60645050,microsoft/checkedc-clang,False,False,"['#76', '#30', '#75', '#20', '#20']",73
247,b363e3aa9b403221774817098837d9a2517883f0,add subscription id telemetry (#2070)//* add subscription id telemetry////* catch any exception and set azure sub id to empty////* initialize httpclient with client handler for correctly working with proxy////* trace exception message////* remove unnecessary $ sign////* use async pattern for get sub id,https://github.com/microsoft/azure-pipelines-agent/commit/b363e3aa9b403221774817098837d9a2517883f0,53052789,microsoft/azure-pipelines-agent,False,False,['#2070'],74
254,30f74216028193e619826809897085a9f536a607,"Adding OpenSSL support to FFMPEG, fixed Assmimp UWP build (#2018)//* Enable ffmpeg to build using openssl for HTTPS/TLS support////* [ffmpeg] Add contract versions to libpath////* Updated FFMPEG to 3.3.3; Fixed unistd.h issue in ffmpeg build////* merge fix////* merge fix////* fix merge////* removed extra files////* Assimp UWP build fix////* [assimp] Bump version////* [ffmpeg] Implement openssl support through features.////* [opencv] remove ffmpeg depenency////OpenCV has own prebuilt ffmpeg library////* Fix version, package name is not a part of it////* Add support build option to PCL port////Add support build options (pcap, qt) to PCL port.////* Update VTK to 8.0.1////Update VTK to 8.0.1.////* [vcpkg] Enable pkg[*] as alias for all features.////* Using CP_UTF8 macro instead of magic numbers.////* [vcpkg] Add optional Abi field to BinaryParagraph for future use.////* [double-conversion] Fix --head builds////* [vcpkg] --head should only apply to USER_REQUESTED packages.////* [vcpkg] Fix bug where packages with uninstalled features appear to be uninstalled.////* Update Catch to 1.11.0////* Fix proxy usage in Win7 (powershell 2.0)////* [findVSInstances] Data lines are now placed within <sol><eol> tags. Text outside these tags is ignored////This means we can print text in powershell now and it won't break vcpkg.////* [fetchDependency] Now also returns output in the form <sol>data<eol>////* [git] Update to 2.15.0 (was 2.14.3)////* [bootstrap-vcpkg] Added better diagnostics in case of MSBuild failure.////* [poco] build with MySQL support (#2088)////* [poco] build with MySQL support////Set proper variables to enable MySQL support if libmysql port is installed////* [poco] Move Mysql support to a feature. Enable CMake config files.////* help assimp find vcpkg's copy of zlib so it does not build its own////* [assimp] Bump revision////* [assimp] Fix assimp overwriting CMAKE_PREFIX_PATH.////* [boost] Handle spaces in vcpkg path.////* [vcpkg] Fix use of features in undocumented build command////* Update to v1.2.0. Remove man pages////* [opencv] Remove ffmpeg from dependencies -- it is not currently possible to use an external ffmpeg with opencv.////Add features for cuda and vtk.////* Enable OpenGL support for GUI////Enable OpenGL support for GUI.////* [protobuf] Add feature packages for zlib////ZLib based features like Gzip streams.////* [llvm] Require Python3////* [blaze] Fix remaining stray _INVALID_ROOT_////* Add option to enable Qt GUI support////Add option to enable Qt GUI support.////* Sorting CMake options for maintainability////Sorting CMake options based on grouped of CMake-GUI  for//maintainability.////* VTK: implement features (#2071)////* [vtk/portfile] add OpenVR option////* [vtk/control] add OpenVR feature////* [vtk/portfile] Add OpenVR feature to portfile////* [vtk/CONTROL] add features////* [vtk/portfile] implement features////* [vtk/CONTROL] fix syntax////* [vtk/CONTROL] fix case////* [vtk/portfile] fix case////* [vtk/CONTROL] fix syntax////* [vtk/CONTROL] fix syntax////* [vtk/portfile] fix module name////* [vtk] Bump version////* [uwebsockets] Remove boost from dependency list to follow upstream's official README////* [libharu] Fix DLLIMPORT macro replacement////* Update CHANGELOG and bump version to v0.0.95////* Fix date in CHANGELOG.md////* [apr] Update to 1.6.3////* Enable C++11 features////Enable C++11 features.////* Enable Microsoft Media Foundation support for Video I/O////Enable Microsoft Media Foundation support for Video I/O.////* [double-conversion] Fix regression introduced in vcpkg_fixup_cmake_targets.////* [vcpkg] Refactor argument parsing to use common code paths.////* [vcpkg] Improve `vcpkg help` -- now has per-command help!////* [vcpkg-help-export-ifw] Add settings description////* [opencv] Disable MSMF in UWP due to an upstream bug////* [vcpkg_download_distfile] Now downloads in a temp dir and rename to the target location////* [vcpkg_find_acquire_program] Use vcpkg_download_distfile()////* Remove vcpkg_acquire_depot_tools////* [downloads] Don't show progress by default////* [vcpkg_acquire_msys] Use vcpkg_download_distfile()////* vcpkg_from_github] Use vcpkg_download_distfile()////* [vcpkg_from_bitbucket] Use vcpkg_download_distfile()////* [ports.cmake] Use vcpkg_download_distfile()////* [antlr] upgrade to antlr4.7////* [antlr4] bump version to 4.7////* Use download-at-temp-and-rename pattern in powershell too////* Print error message when there is a syntax error in triplet file////As it is now vcpkg fails silently (actually, it outputs two empty lines).////* [fdk-aac] init////* [fetchDependendy.ps1] Remove obsolete comment////* [fetchDependency.ps1] Improve error message on hash mismatch////* [vswhere] Update to 2.2.11 (was 2.2.7)////* libaiff////* Append W////* [libaiff] fix uninitialized buffer////* Add the flint2 library (#1988)////* Add the ""flint2"" library.////* FIX: update library name////* FIX: only set MSVC version to VC14////* FIX: use static linkage////* DOC: display notification to the user////* [flint/CONTROL] add gettimeofday dependency////* [flint/portfile] move up linkage////* [flint/portfile] attempt to override the CRT linkage////* Add arblib (#1991)////* Fix rename libraries of FLANN////Fix rename libraries of FLANN.////* Fix line endings////* [cmake] Update to 3.9.5 (was 3.9.4)////* Porting ITK////* Sourcing from GitHub, using a master version with vcpkg patch////* Update CHANGELOG and bump version to v0.0.96////* [fftw] update to 3.3.7////* [dlib] update to 19.7 and use vcpkg_from_github////* fix issue 2111////* Revert ""Updated libsigcpp to version 2.99.9""////This reverts commit 079ef9785ad539e1484f876577913a7269021288.////* Added glibmm and giomm.////* Added atkmm.////* Added pangomm.////* Added gtkmm////* Use unicode////* [glibmm] Add missing dependency: libsigcpp",https://github.com/microsoft/vcpkg/commit/30f74216028193e619826809897085a9f536a607,68312233,microsoft/vcpkg,False,False,"['#2018', '#2088', '#2071', '#1988', '#1991']",75
255,5e14799c5036c6a314ecc8645e7b32688c261017,Implement singleton pattern for ComWrappers (#675)//* implement singleton pattern for ComWrappersSupport,https://github.com/microsoft/CsWinRT/commit/5e14799c5036c6a314ecc8645e7b32688c261017,212694868,microsoft/CsWinRT,False,False,['#675'],76
261,0a5e0fe1e82c34760b29be84a59c6318cce2ea8e,Remove singleton pattern in base_generator//A generator doesn't need to be a singleton and this causes problems/when executing unit tests. This code was simply a left-over.//Change-Id: Ieaf71bf824a630c75c95b190f34cc55a812d7fc0/Closes-Bug: #1300675,https://github.com/microsoft/LIS-Tempest/commit/0a5e0fe1e82c34760b29be84a59c6318cce2ea8e,59671379,microsoft/LIS-Tempest,False,False,['#1300675'],77
264,d374c1cd095831f0de97f844197195b78b8beaee,Fixing bug affecting scene switching and loads (#37)//* Changing UserProfile to a singleton pattern and marked it as DontDestroyOnLoad////* Updated Stats to handle Awake correctly if user is already signed in,https://github.com/microsoft/xbox-live-unity-plugin/commit/d374c1cd095831f0de97f844197195b78b8beaee,74614877,microsoft/xbox-live-unity-plugin,False,False,['#37'],78
267,e67400f667f5f924341a60091e744728617d3d2a,Install Docker using notification (#1902)//* Install Docker using notification////* Update src/commands/dockerInstaller.ts////Co-Authored-By: Karol Zadora-Przylecki <karolz@microsoft.com>////* Update src/commands/dockerInstaller.ts////Co-Authored-By: Karol Zadora-Przylecki <karolz@microsoft.com>////* simplify singleton pattern////* Cache docker status once the docker is installed.////* Preinstall check for docker installer////* rename a function////* use real time docker install status////Co-authored-by: Karol Zadora-Przylecki <karolz@microsoft.com>,https://github.com/microsoft/vscode-docker/commit/e67400f667f5f924341a60091e744728617d3d2a,44415469,microsoft/vscode-docker,False,False,['#1902'],79
268,a4e297d6e1d81288d1edfa11630e2f225fea1de8,"Chrimc/mlprop (#2690)//* Make singleton the default and switch from tabs//to spaces.////* Switching to per-property name entity.////* Remove singleton////* Moving to ml property.////* add schema for basic types testing////* fix bugs in array templates////* support format////* fix basic types and format issues////* add templates to support keyword format////* remove addMissing function////* update mergeAssets////* update boolean////* update standard.schema////* delete allmissing functions////* fix getPropertyValueText function////* support date-time////* Update documentation.////* Implement dialog:generate:test////* move templates////* max min pattern////* implement max min and pattern////* Update documentation and add TestBot.////* Add schema and fix test.////* Fix API change in adpative expressions.////* Remove qnaKey.////* update launch.json////* update date/time templates////* refactor pattern, max, min templates////* Merge////* fix comments////* update getValueText function////* Progress on new model.////* Ensure $entities before processing templates.//Add entities map from entity name to properties that use it to scope.//Get rid of roles.//Fix ${'#'}.////* simplify prompt templates////* update stringArrayProperty.lg.lg////* update unit tests transcript////* delete spaces////* Working lu generation.////* Move to generic operations.////* Fix old operations from merge.////* Fix bad merge.////* Add explicit .lg to get better intellisense.////* Working LUIS model.////* Global lu working.////* update missing dialog template////* build in reference////* Intermediate changes.////* Basic working show all, help all and op names.////* Largely working with new model.////* change to sendactivity////* separate missing dialog and help dialog////* Everything is working.////* Add support for skipping a clarification////* Bug fix for skip////* fix comments////* All tests passing////* Add description to assertions.//New sandwich transcript.////* Remove sandwich////* Update scrtips and ensure files have schemas.////* Update oracles.////* Address review comments////Co-authored-by: Zongyang Ma <zoma@microsoft.com>",https://github.com/microsoft/BotBuilder-Samples/commit/a4e297d6e1d81288d1edfa11630e2f225fea1de8,68730444,microsoft/BotBuilder-Samples,False,False,['#2690'],80
270,9e7bf403817a3acd4e8d865b041f37609564076e,"Branch 152703253 (#9112)//* Improve py_func error handling.////Automatically translate some python errors into corresponding TF errors at runtime.//Change: 152156821////* Update interaction with libpng so that we use the public API instead of//knowledge of the internal libpng data structures.//Change: 152167754////* TensorBoard plugins now contain their own name/route prefix.//Change: 152167807////* Passes trainable flag to separable_conv2d biases.//Change: 152170239////* Saving resource variables with a caching device.//Change: 152171539////* Drop loss from estimator_spec.eval_metric_ops, as required by core Estimator.//Change: 152179924////* sample_stats.percentile DOCFIX.//Change: 152182295////* Added a memory optimizer to grappler.//Change: 152184170////* Change default behavior of the tf runs selector:////- If there are fewer than 41 runs, enable them all by default//- If there are 41 runs or more, disable them all by default////This is in response to user complaints that having it enable only the first ten runs by default was confusing, because it was not obvious to users that some runs had been disabled.//However, it still solves the initial user complaint that having very many runs simultaneously enabled would lag the UI.////I also changed the ""toggle all runs"" button to try to turn everything off before turning everything on.//Also, I improved the logic for detecting when the runs selection is back in the default state, so that we can avoid generating long URI strings wherever possible.//Change: 152188948////* Autogenerated Change: Change TensorBoard TAG to 52//Change: 152189000////* Remove warning that only happening with config cuda.//Change: 152189205////* Make resource variable shared name consistent with non-resource variables.////Remove colocation constraint from resource variable cached value with the//variable itself.//Change: 152192203////* Add a way to specify the optimization order; refactor and add constant folding to meta optimizer.//Change: 152193646////* Backport fixes and improvements from external Keras.//Change: 152198296////* Merge changes from github.//Change: 152200430////* Go: Update generated wrapper functions for TensorFlow ops.//Change: 152200754////* Update ops-related pbtxt files.//Change: 152203174////* Make ImportGraphDef() work with functions.////In addition to modify graph_constructor.cc, this patch adds some other//functionality to enable importing fucntions://* Ability to add FunctionDefLibraries to Graphs and//  FunctionLibraryDefinitions (in addition to existing functions)//* FunctionDefsEqual() utility function//Change: 152205258////* Expand contrib test to more than just test targets.//Change: 152206822////* Preserve graph version during optimization//Change: 152213262////* Exclude enter and exit nodes from shape refiner's constant folding.//Change: 152213637////* Allow reshape_mover and algebraic_simplifier to make multiple mutations, by avoiding the short-circuit//std::any_of.//Change: 152232810////* Fix dynamic_rnn transpose bug (can input/output non-3d tensors).////Also a few cleanups to RNN code.//Change: 152267628////* Fix flaky tests//Change: 152272801////* Add an auto parallelization grappler optimization pass.//Change: 152276787////* Change json.decode.JSONDecodeError to ValueError.  JSONDecodeError seems to be//the exception used in the simplejson module, not the json module.//Change: 152278012////* Internal change.//Change: 152281471////* [XLA] Force buffer sharing of separate while instructions.//Change: 152288540////* replica_device_setter should work for resource variables//Change: 152289915////* Fix ./configure script//1. Add %workspace% in .bazelrc file when using import statement//2. Write action_env into bazelrc file for required environment variables for OpenCL support//Change: 152290700////* Pointing a number of Tensorboard graph visualization-related help links to the new locations for the correspondent API documentation.//Change: 152293459////* Restore most of pull request #8606////Pull request #8606 added str(Label(...)) for most dependencies in//tensorflow.bzl, allowing most functions to be used from repositories which//include TensorFlow as a submodule.  Unfortunately, it broke when pulled into//Google and was removed in cl/152200430.  This CL restores the change, except//for two Android-only functions; these were the only problematic bits.//Change: 152297413////* Removed dead code in Estimator.//Change: 152297597////* Assert rank is at least equal to new_rank for `_sparse_inner_flatten`.//Change: 152303319////* Extend quantization ranges to include 0.0f.//Change: 152304380////* Remove Keras config file saving.//Change: 152306552////* API backwards compatibility tests.//Change: 152310869////* [TF:XLA] Add a test for an R3 -> R4 broadcast.//Change: 152313967////* Fix the problem that no enough placeholders for persistent tensor//batch delete////The deleter_key is always a device_name, hence there is only one//of it. Hence, we cannot delete >1 handles at one time.////In the fix, it creates delete placeholder on demand, the max//number of placeholders is _DEAD_HANDLES_THRESHOLD.//Change: 152322770////* [XLA] Add several reduction tests.//Change: 152323510////* Added the memory optimizer to the meta optimizer.//Change: 152323689////* Started a set of utilities to categorize op types//Change: 152329057////* Add AudioSpectrogram op to TensorFlow for audio feature generation//Change: 152332221////* Update ops-related pbtxt files.//Change: 152332812////* Automated rollback of change 152332221//Change: 152333917////* Call Py_CLEAR on dead fields during TF_RESOURCE-to-ndarray conversion//Change: 152338333////* [TF contrib seq2seq] Initial, incomplete implementation of beam search decoder.////**DOES NOT WORK, pushed for collaboration only**//Change: 152343927////* [XLA] Change HloPassPipeline to disallow Add* calls after Run.//Change: 152345578////* Automated rollback of change 152332812//Change: 152349057////* Remove all 64/32 bit compiler warnings from core/ops.//Change: 152353506////* libtensorflow.so: Don't export private symbols.////With this change, libtensorflow.so will only export//functions defined in c_api.h. This also results in//a decreased binary size of libtensorflow.so.////On Linux the decrease was from roughly 150MB to 67MB.//On OS X it was from roughly 101MB to 82MB.////Also fixes #8923//Change: 152366053////* Add Elu ops in XLA.//Change: 152383201////* Fixed test. ('broadcast_dims' has size 1)//Change: 152383633////* Add more detailed error message for rank assertion in _sparse_inner_flatten.//Change: 152397909////* tensor_bundle: propagrates errors related to directory creation.//Change: 152401909////* matrix_adjoint added to contrib/linalg/linear_operator_util//Change: 152404828////* Add an is_active method to plugins////This method determines whether a plugin is active. A plugin may be inactive if say it lacks data. This new is_active method allows us to add a route to TensorBoard noting which plugins are active. The frontend could then avoid querying routes of inactive plugins.//Change: 152406232////* Replace a gather op for shapes by a stack op so dilated convolutions can be//placed on GPU even with strict placing (before the gather went to CPU).//Change: 152411159////* [TF:XLA] Implement BatchToSpace, BatchToSpaceND, SpaceToBatch, SpaceToBatchND.//Fix crashes in core implementations of the same operators for zero-sized blocks.//Change: 152416903////* Estimator saves relative paths in checkpoint.//Change: 152420211////* Fix layers_test exception regex matching.//Change: 152422855////* Unhide bijectors. Correct TransformedDistribution docstring.//Change: 152424418////* Choosing a saner default for min_eval_frequency in the constructor for Experiment for the GCS file system, because the default of 1 causes performance problems.//Change: 152439984////* Inherit use_resource from scope for partitioned variables.//Change: 152442103////* Support quantized reshape in hexagon runtime//Change: 152445539////* tfdbg CLI: add command list_source (ls) + UI fixes and improvements////The new list_source (shorthand: ls) command lists Python source files responsible for constructing the nodes and tensors encountered in the run() call.////It divides the source files into two categories and list them separately.//1) files that are not part of the TensorFlow Python library, and//2) files that are a part of it.////The list contains information about how many nodes, tensors and dumps of tensors the files is responsible for. The file paths contain clickable links to the existing print_source/ps command.////The list_source/ls command supports filtering by file-path and node-name regex patterns.////UI fixes://* Fixed inconsistent black vs. transparent background color that made the layout look messy on some terminal types. Now using the transparent color for default font color consistently.//* In the print_source command output, add clickable links to expand source lines and graph elements.//Change: 152446002////* tfcompile: Be a little more verbose about missing required flags.////Fixes #9014//Change: 152446338////* Disable failing test cases in pooling_ops_test.//Change: 152447322////* Register more types for tf.image_crop_and_resize(). Resolves #9020.//Change: 152448160////* Automated rollback of change 152439984//Change: 152450929////* Add a route to TensorBoard for fetching plugin names////Specifically, we add a /data/plugins_listing route to the TensorBoard application. This route responds with an object mapping the name of each initialized plugin to whether it is active.////This route could help the frontend avoid issuing requests to inactive plugins.////Ordered the listing of routes within application.py so there is a little more organization.////Refactored the test for application to use a fake plugin.//Change: 152451390////* Added the ability to retrieve the amount of usable gpu memory//Change: 152453470////* Allow to set session ConfigProto in RunConfig and use it in Estimator.//Change: 152454548////* Colocate ResourceVariable reads with their handles.//Change: 152455939////* tfdbg: update doc for new command list_source/ls//Change: 152456128////* Make rnn directions slightly easier to follow.//Change: 152456296////* Internal change//Change: 152458104////* Adds batch renormalization.////NOTE: if you use renormalization, you might want to use faster moving average updates, i.e. lower `decay` values.//Change: 152458872////* When using ImportGraphDef with a passed in ShapeRefiner, use the//producer version of the GraphDef when importing; the ShapeRefiner//may be initialized with a different graph_def_version, so we need//to be able to override it.////The test failed without the change to graph_constructor and passes with it.//The test uses a legacy graph that is supported (reduction shape).//Change: 152459169////* Allow any iterable for `export_strategies` arg.//Change: 152461826////* Log steps/sec every 100 steps in MonitoredSession, as before.//Change: 152465320////* Fixes documentation to note that the in case of ties the identity of the return value of ArgMin and ArgMaxis not guaranteed .//Change: 152465346////* Automated rollback of change 152465346//Change: 152465844////* Fix shape inference fn on _ParallelConcatStart.//Change: 152466076////* Fix getting started guide////Explain numerical differences in loss//fix one example to print//Change: 152466119////* Remove superfluous mode argument.//Change: 152467334////* Add a tool that converts HLO computations to tensorflow GraphDef which can be visualized on Tensorboard.////This CL defines basic tensorflow::OpDef for each HLO instruction/node. More attributes (e.g. shapes, colors) will be added in the future.//Change: 152477918////* [TF:XLA] Increase shard count of //third_party/tensorflow/compiler/tests:spacetobatch_test to reduce flakiness when built under ASAN.//Change: 152496244////* Make projector plugin backend read assets saved via the PluginAssets API.////At the same time, keep backwards compatibility with the old way of looking up assets.//Change: 152504793////* Move MNIST pointers to mirror hosted by the CVDF on Google Cloud.//Fixes: #9031//Change: 152504901////* Merge changes from github.//Change: 152508170////* Update API after changing default step couter frequency before.//Change: 152517535////* Move a few random op helper functions to header files////1. shape_inference::RandomShape//2. OpKernel::MakeShape(Tensor, TensorShape*)//Change: 152522156////* addresses the divide by zero bug//Change: 152522488////* Clarify doc on tf.assign.//Change: 152523909////* Sparse adam for resource variables.//Change: 152525327////* Automated rollback of change 152310869//Change: 152528732////* Add an env_var tf_sync_on_finish_bool that block until device has finished all queued operations in a step if true.//Change: 152533676////* Add more node attributes for HloInstruction on Tensorboard e.g. shape and layout etc.//Change: 152534472////* Add tf.complex64 GPU support to tf.gather.////Also add ldg specializations for std::complex.//Change: 152537848////* Formatting changes//Change: 152544842////* Upgrade TensorBoard TypeScript to 2.2.1////See also: #8326//Change: 152545950////* TEST:  Getting reasonable test sizes on linalg library, removing need for//sharding.//Change: 152546409////* Disabling _testSourceUtilModuleReturnsTrue as its causing opensource issues.//Change: 152548721////* Fix race due to unsafe buffer forwarding in maxpooling second order gradients added in #6664.//Re-enable previously flaky tests.//Clean up a few minor things in maxpooling_op_gpu.cu.cc//Change: 152550050////* LinearOperator:  adjoint_arg kwarg added to all operators.  Now,//operator.apply(x, adjoint_arg=True) means that the adjoint of 'x' is taken//before application of operator.  Sometimes this is done more efficiently than//simply taking adjoint.//Change: 152560471////* Adds weighted_average_loss metric key.//Change: 152560999////* Documentation: Fix bug in manual device placement example//Change: 152563392////* Change for internal compatibility.////* Use std::vector for storage instead of map.//Do the sorting inplace and return the same vector to avoid any copies.//On larger streams it is about 50% faster.//Change: 152576112////* Add tf.add_n GPU support for complex64/complex128.////Also adds a unit test for tf.add_n.//Change: 152577190////* - Adds support for nested types in tf.case and tf.cond.//- Adds a ""strict"" mode which disables silent unpacking of singleton lists.//- Adds shape inference to tf.case.//- Adds a lot of unit tests.//Change: 152581097////* [XLA] Add support for folding transpose into convolution//Change: 152581336////* Add a smoke test to ensure that the doc generator runs.//Change: 152592164////* Add tensorboard to the _do_not_descend_map of the PublicAPIVisitor.//Change: 152592268////* Add auto parallelization to meta optimizer. Enable MetaOptimizer if any one of the optimizers is on.//Change: 152598517////* Update ops-related pbtxt files.//Change: 152629248////* Prevent the renorm_weight from being updated too early.//Change: 152631776////* Automated rollback of change 152528732//Change: 152652473////* Construct TensorBoard dashboards in a JS list////Previously, adding a dashboard to TensorBoard involved changing logic in several places.////As part of this effort, added constructors to dashboards. Tweaked logic in various dashboards to preserve original behavior. For instance, the graph dashboard can only perform fitting after the dashboard is attached to the DOM.//Change: 152658532////* Make CheckpointSaverListener visible next to CheckpointSaverHook.//Change: 152662945////* tfdbg CLI: minor bug fixes////1: The calculation of the scroll command in the scroll bar didn't take into account that the y-coordinate of the scroll block is in the ScrollBar coordinate system, while the mouse click y-coordinate is in the screen coordinate system.////2: The y position of the ScrollBar was off by one.////3: The command box is not re-created after mouse-triggered commands, leading to strange-looking cursor position.//Change: 152684294////* Remove obsolete use of validate_indices from embedding_ops.py////validate_indices is ignored, so it shouldn't appear in new code.//Change: 152691948////* Preparation of using GMock matchers in XLA tests.//Change: 152691970////* Replace RuntimeException by RuntimeError in coordinator documentation.//Change: 152697758////* Move the TensorBoard debugger plugin to be internal.////This feature is currently not open-source anyway.//Change: 152700267////* Add a single-machine tf.learn Estimator implementation for the WALS solver.//Change: 152700915////* Add tf.contrib.training.python_input -- making it easy to feed data into//TensorFlow from python coroutines.//Change: 152701623////* Show that QuantizeToFloat consistently introduces a small error. The//error is equal to//  range_min - round(range_min / range_scale) * range_scale//Change: 152702015////* Internal Changes//Change: 152703253////* Remove tensorflow/tensorboard/plugins/debugger, as part of merge resolution.",https://github.com/microsoft/tensorflow-directml/commit/9e7bf403817a3acd4e8d865b041f37609564076e,291217084,microsoft/tensorflow-directml,False,False,"['#9112', '#8606', '#8606', '#8923', '#9014', '#9020', '#9031', '#8326', '#6664']",81
271,284da7c9d57b33abce253aed5fc19b02898f6e0c, chore(FluentProvider): implement useContextValues() pattern (#19341)//* chore(FluentProvider): implement useContextValues() pattern////* Change files////* Update packages/react-provider/src/components/FluentProvider/useFluentProviderContextValues.test.ts////Co-authored-by: ling1726 <lingfan.gao@microsoft.com>////* fix state////Co-authored-by: ling1726 <lingfan.gao@microsoft.com>,https://github.com/microsoft/fluentui/commit/284da7c9d57b33abce253aed5fc19b02898f6e0c,60537144,microsoft/fluentui,False,False,['#19341'],82
272,f438da600091adb8fee45a029db9aea70049d26f,Update Echobot to use Corebot state pattern (#1229)//* Update Echobot to use Corebot state pattern////* Fix Param description,https://github.com/microsoft/BotBuilder-Samples/commit/f438da600091adb8fee45a029db9aea70049d26f,68730444,microsoft/BotBuilder-Samples,False,False,['#1229'],83
273,9a197208c06356c5cdd03428ed08ecce1bec3c91,Fix zero or one when pattern contains loop back to start (#144)//* Fix ZeroOrOne when there are states transitioning back to the start state////* clean up,https://github.com/microsoft/Trill/commit/9a197208c06356c5cdd03428ed08ecce1bec3c91,150474379,microsoft/Trill,False,False,['#144'],84
275,3569dd5ff1c0f10e658131cf6a1d7fb18c4d1914,"make all onTurnError functions consistent (#967)//- use the load, clear, save pattern for samples that use state",https://github.com/microsoft/BotBuilder-Samples/commit/3569dd5ff1c0f10e658131cf6a1d7fb18c4d1914,68730444,microsoft/BotBuilder-Samples,False,False,['#967'],85
276,4514d900b0dc8752e9dd96ce40984590eea2de91,Hoists visual editor selection state to Shell state (#1278)//* merge focused & drag selection as onSelect input////* add `focusedActions` as new shell state////* consume `focusedActions` in visual editor////* generate correct select ids in ObiEditor hook////* remove anti-pattern usage in ShellApi////* hoists 'selection' to Shell state////* consume the newly added 'visualEditorSelection' state in design page////* change editor selection judgement////* Fix bas merge,https://github.com/microsoft/BotFramework-Composer/commit/4514d900b0dc8752e9dd96ce40984590eea2de91,170615717,microsoft/BotFramework-Composer,False,False,['#1278'],86
283,e298e91a06df38fd624f9d2771909db07e937f05,Task/msal2 auth (#18)//* feat: upgrade to @azure/msal-browser////* chore: update readme to list msal-interactor package////* fix: readme typo////* refactor: MsalInteractor singleton////- remove duplicate singleton/instance state.////* chore: interactively bump package version////* refactor: msal-interactor////- use public constructor instead of singleton pattern.////* fix: spelling and add jsdoc comments,https://github.com/microsoft/essex-toolkit/commit/e298e91a06df38fd624f9d2771909db07e937f05,267420737,microsoft/essex-toolkit,False,False,['#18'],87
284,6ce01cdcb48c67f3aec98423e0c1de077b234894,"Workaround for new OpenXR issue.  (#187)//* Workaround for new OpenXR issue. OpenXR is now returning a session subsystem, but the session always (incorrectly) reports tracking state = None. Ignoring.////* Update UPM generation files to v1.4.1.////* Add 1 second delay in bootstrap to give ASA Spatial Anchor Manager time to finish starting before trying to utilize it.////* Conditionally for Unity 2020.4 or newer, switch to new AddComponent<ARAnchor> pattern, from old anchrMgr.AddAnchor().//It looks like the AddComponent<ARAnchor> started working sometime between U2020.3.2f1 (doesn't work) and U2020.3.8f1 (does work).////* Update supported versions for ASA.",https://github.com/microsoft/MixedReality-WorldLockingTools-Unity/commit/6ce01cdcb48c67f3aec98423e0c1de077b234894,187043415,microsoft/MixedReality-WorldLockingTools-Unity,False,False,['#187'],88
285,f752706506b4f53a68819eebb376bfc2da762557,Added Windows store file system watcher (#14577)//* Added Windows store file system watcher////* Use glob pattern matcher instead of regex////* Code reviews////* Code reviews////* Remove picomatch and use already existing minimatch////* Code reviews////* Correct python exe glob for python3.10////* Add a comment stating why we only capture python3.*.exes////* Refactor locator setup out of tests////* Correct glob////* Oops////* Cleanly indent,https://github.com/microsoft/vscode-python/commit/f752706506b4f53a68819eebb376bfc2da762557,106462765,microsoft/vscode-python,False,True,['#14577'],89
291,016659d5db758bbbf4a15123595e5942aec98e78,"fix: Update Automated Checks GroupItem HelpText to reflect IsExpanded state (#1203)//#### Details//Currently, the HelpText for the GroupItems in the Automated Checks ListView is always ""Press right arrow key to expand, enter or space to toggle children highlighting"", regardless of expanded/collapsed state. With this PR, it will now be ""Press left arrow key to collapse, enter or space to toggle children highlighting"" when the items are expanded. ////Example of NVDA reading these items now://- Collapsed://> 2 errors - A button must not support both the Invoke and Toggle patterns., all children highlighted  grouping  collapsed Press right arrow key to expand, enter or space to toggle children highlighting  1 of 6////- Expanded://> 2 errors - A button must not support both the Invoke and Toggle patterns., some children highlighted  grouping  expanded  Press left arrow key to collapse, enter or space to toggle children highlighting  1 of 6//////##### Motivation//Addresses ADO 1750592////##### Context//- It took a few tries to find the right place to put the `Trigger`////#### Pull request checklist//<!-- If a checklist item is not applicable to this change, write ""n/a"" in the checkbox -->////- [n/a] Run through of all [test scenarios](https://github.com/Microsoft/accessibility-insights-windows/blob/main/docs/Scenarios.md) completed?//- [x] Does this address an existing issue? If yes, Issue# - 1750592//- [n/a] Includes UI changes?//  - [x] Run the production version of Accessibility Insights for Windows against a version with changes.//  - [n/a] Attach any screenshots / GIF's that are applicable.////> Note: After the PR has been created, certain checks will be kicked off. All of these checks must pass before a merge.",https://github.com/microsoft/accessibility-insights-windows/commit/016659d5db758bbbf4a15123595e5942aec98e78,160750843,microsoft/accessibility-insights-windows,False,False,['#1203'],90
302,a55313314fb4732070b515237470e94627e9f332,"chore(deps-dev): Bump rimraf from 4.1.3 to 4.2.0 (#1574)//Bumps [rimraf](https://github.com/isaacs/rimraf) from 4.1.3 to 4.2.0.//<details>//<summary>Changelog</summary>//<p><em>Sourced from <a//href=""https://github.com/isaacs/rimraf/blob/main/CHANGELOG.md"">rimraf's//changelog</a>.</em></p>//<blockquote>//<h1>v4.2</h1>//<ul>//<li>Brought back <code>glob</code> support, using the new and improved//glob v9</li>//</ul>//<h1>v4.1</h1>//<ul>//<li>Improved hybrid module with no need to look at the//<code>.default</code>//dangly bit. <code>.default</code> preserved as a reference to//<code>rimraf</code>//for compatibility with anyone who came to rely on it in v4.0.</li>//<li>Accept and ignore <code>-rf</code> and <code>-fr</code> arguments to//the bin.</li>//</ul>//<h1>v4.0</h1>//<ul>//<li>Remove <code>glob</code> dependency entirely. This library now only//accepts actual file and folder names to delete.</li>//<li>Accept array of paths or single path.</li>//<li>Windows performance and reliability improved.</li>//<li>All strategies separated into explicitly exported methods.</li>//<li>Drop support for Node.js below version 14</li>//<li>rewrite in TypeScript</li>//<li>ship CJS/ESM hybrid module</li>//<li>Error on unknown arguments to the bin. (Previously they were//silently ignored.)</li>//</ul>//<h1>v3.0</h1>//<ul>//<li>Add <code>--preserve-root</code> option to executable (default//true)</li>//<li>Drop support for Node.js below version 6</li>//</ul>//<h1>v2.7</h1>//<ul>//<li>Make <code>glob</code> an optional dependency</li>//</ul>//<h1>2.6</h1>//<ul>//<li>Retry on EBUSY on non-windows platforms as well</li>//<li>Make <code>rimraf.sync</code> 10000% more reliable on Windows</li>//</ul>//<h1>2.5</h1>//<ul>//<li>Handle Windows EPERM when lstat-ing read-only dirs</li>//<li>Add glob option to pass options to glob</li>//</ul>//<h1>2.4</h1>//<ul>//<li>Add EPERM to delay/retry loop</li>//<li>Add <code>disableGlob</code> option</li>//</ul>//<h1>2.3</h1>//<!-- raw HTML omitted -->//</blockquote>//<p>... (truncated)</p>//</details>//<details>//<summary>Commits</summary>//<ul>//<li><a//href=""https://github.com/isaacs/rimraf/commit/80aef8b8a1f49a68c7fc8db3cb8d281ecf2bdfaf""><code>80aef8b</code></a>//4.2.0</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/0d19a99c30eb341d67f9e572a4e603361714d7e3""><code>0d19a99</code></a>//changelog 420</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/f768f26d6a67e7b482340712bc285f5a1bb6e670""><code>f768f26</code></a>//treat paths as glob patterns when glob option set</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/5760716a45786d1d75f48d1fffca78d04a9f0f71""><code>5760716</code></a>//make rimraf cancelable with AbortSignals</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/417cdc7184b8f80bf1414aca599f543a6e8ffb76""><code>417cdc7</code></a>//4.1.4</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/bdfa60c7dc37ee795bfd5c04f56a3270962ef416""><code>bdfa60c</code></a>//update deps, export types properly for cjs module</li>//<li><a//href=""https://github.com/isaacs/rimraf/commit/20e37999eb78fe9122c1201832ea4a76476663b6""><code>20e3799</code></a>//use NodeJS.ErrnoException instead of FsError</li>//<li>See full diff in <a//href=""https://github.com/isaacs/rimraf/compare/v4.1.3...v4.2.0"">compare//view</a></li>//</ul>//</details>//<br />//////[![Dependabot compatibility//score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rimraf&package-manager=npm_and_yarn&previous-version=4.1.3&new-version=4.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)////Dependabot will resolve any conflicts with this PR as long as you don't//alter it yourself. You can also trigger a rebase manually by commenting//`@dependabot rebase`.////[//]: # (dependabot-automerge-start)//[//]: # (dependabot-automerge-end)////---////<details>//<summary>Dependabot commands and options</summary>//<br />////You can trigger Dependabot actions by commenting on this PR://- `@dependabot rebase` will rebase this PR//- `@dependabot recreate` will recreate this PR, overwriting any edits//that have been made to it//- `@dependabot merge` will merge this PR after your CI passes on it//- `@dependabot squash and merge` will squash and merge this PR after//your CI passes on it//- `@dependabot cancel merge` will cancel a previously requested merge//and block automerging//- `@dependabot reopen` will reopen this PR if it is closed//- `@dependabot close` will close this PR and stop Dependabot recreating//it. You can achieve the same result by closing it manually//- `@dependabot ignore this major version` will close this PR and stop//Dependabot creating any more for this major version (unless you reopen//the PR or upgrade to it yourself)//- `@dependabot ignore this minor version` will close this PR and stop//Dependabot creating any more for this minor version (unless you reopen//the PR or upgrade to it yourself)//- `@dependabot ignore this dependency` will close this PR and stop//Dependabot creating any more for this dependency (unless you reopen the//PR or upgrade to it yourself)//////</details>////Signed-off-by: dependabot[bot] <support@github.com>//Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",https://github.com/microsoft/accessibility-insights-action/commit/a55313314fb4732070b515237470e94627e9f332,238042767,microsoft/accessibility-insights-action,False,False,['#1574'],91
304,8f72830cd89d470a0d57ccdf9f5f63c7bf470e0b,"Squashed commit of the following://commit 74f09fe72fdc1facbf2b023c9d3307838afc1b3f/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Feb 8 21:27:31 2023 +0000//    Merged PR 3070: Fixes for sub_array and _split_dimension//    Fixes for sub_array and _split_dimension//    This fixes the sub array and split dim ops to work with the accera/    codebase that has updated around them. Some MemoryLayout assumptions are/    getting in the way and have been disabled in the short-term, however/    long term our memory layout behavior should more closely match what MLIR/    affine maps can represent for more generalized dynamic support//commit d8f2baa3ad40bbcfe3a40bb15aafff36819e6067/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Feb 8 05:52:55 2023 +0000//    Merged PR 3063: Refactor Dimension with C++ backend container class and few other fixes//    - Refactor Dimension with C++ backend container (ScalarDimension)/    - Enable output scalar variables/    - Fix dynamic sized TEMP arrays//commit ffc3d66a473c8b9f6d21aca39e3c515df4bb619b/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Fri Feb 3 09:21:56 2023 +0000//    Merged PR 3072: Bump hatlib version to 0.0.34, skip unsupported test on arm64 macOS, minor targets doc update//    Update hatlib version since there is no incompatibility//commit 63b99baa0e0a188fde4855cd98476340d9c35928/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Feb 1 23:40:13 2023 +0000//    Merged PR 3069: Set target device features on module and check when matching avx2/512 ops//    Set target device features on module and check when matching avx2/512 ops//commit 6c7b520567c171bc9ba548197f59e27761cde19b/Author: Kern Handa <kerha@microsoft.com>/Date:   Fri Jan 27 06:19:31 2023 +0000//    Merged PR 3060: Adds support for sqrt op in acc-translate//commit 5f5059bf0c0ae397e232a357267856f9d449df9f/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 25 19:42:07 2023 +0000//    Merged PR 3055: Move value unrolling to after function inlining and loop simplification//    Move value unrolling to after function inlining and loop simplification//    This enables dynamically-sized inner functions that get inlined into/    statically-sized regions to have loop unrolling affect their/    actually-statically-sized loops when possible//commit f5ded1d1cf99ed9469d9bb1558c980c67d83ee45/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 25 18:45:33 2023 +0000//    Merged PR 3053: Add package.build flags for building with higher-precision FP vector ops//    Add package.build flags for building with higher-precision FP vector ops//    Setting this new flag prevents a vmulps -> vaddps sequence/    from being contracted into a vfmaddps//commit 4dafdd0ae3df7bdf027307b5f94d712a8ca29f93/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 25 17:16:10 2023 +0000//    Merged PR 3052: Place heap allocations at the top level of the function//    Place heap allocations at the top level of the function//commit fac561f52e04faa88605300adcbb0224289e32e5/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Jan 24 19:54:54 2023 +0000//    Merged PR 3050: [non-func, API] Change Nest.get_shape() to always return a list//    Change Nest.get_shape() to always return a list//commit f8be9f315d5291daaaaf79e01b717b2695422489/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Jan 18 19:41:01 2023 +0000//    Merged PR 3030: Include acc-translate whenever accera is installed//    Perhaps a longer-term fix is to merge the accera-gpu package into accera-compilers so we have one less package to maintain.//    However, that adds constraints to the binary size of acc-opt (to not push us past the 100MB PyPI hard limit), so punting until we have cycles for this.//commit fdbf45dc8d8320972c1f330651bab48cd4eabadf/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Jan 18 01:42:45 2023 +0000//    Merged PR 3035: [nfc] Adds my machine to targets.py//commit 296fa15e1bc7bd05c7e7c3a6333182777f8abf79/Author: Mason Remy <masonr@microsoft.com>/Date:   Tue Jan 17 18:52:45 2023 +0000//    Merged PR 3029: Work around constraint resolution issues with dynamic split size 1//    Work around constraint resolution issues with dynamic split size 1//commit 7939957fe65cd602197fcb944182452d4e0a0853/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Sat Jan 14 05:36:29 2023 +0000//    Merged PR 3027: Hack required to use Array as output element argument (Dimension)//commit e4da98835c7dae09d5a37432659733bb2de0a6b2/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Jan 13 21:37:24 2023 +0000//    Merged PR 3025: Add arg name and size string required for hat metadata//    Add arg name and size string required for hat metadata//commit 83a75cee0acda133fb2a9f397fc1fcc93037f872/Author: Denny Sun <dennys@microsoft.com>/Date:   Thu Jan 12 22:41:09 2023 +0000//    Merged PR 3017: Output array supports gather function//    Add the dsl test for gather function.//commit c2c791923d0070c143c71ce9e2866d7d5562f7f7/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Jan 11 03:21:45 2023 +0000//    Merged PR 3018: Use VS 17.4.3-built binaries. This is in a separate channel to allow older ve...//    Use VS 17.4.3-built binaries. This is in a separate channel to allow older versions to keep working//commit ef0552571e492745f0c3e53d7d1e77f452b3f08e/Author: Denny Sun <dennys@microsoft.com>/Date:   Mon Jan 9 03:54:54 2023 +0000//    Merged PR 3012: Correctness check for output array support for range node//    Successful correctness check means output array support can work end to end.//commit 06d392fef06e5a340a8e6c26ba7d1c312f779964/Author: Denny Sun <dennys@microsoft.com>/Date:   Sat Jan 7 00:53:57 2023 +0000//    Merged PR 3015: Update hatlib version to support floating type as function arg//    Update hatlib version to support floating type as function arg//commit 622fd7a73e56f55747f1c86e46dcaa93b14585e9/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Thu Jan 5 18:19:47 2023 +0000//    Merged PR 3010: Disable BinOp simplification for floating types//    Disable BinOp simplification for floating types//commit 989f1785d080e82c802dc046e84e84cfdb5717bf/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Jan 5 07:39:28 2023 +0000//    Merged PR 3013: Apply major version in docs//    Removes the need to update docs versions every time we release//commit c24f4dcfd26588733b5c59cd568cb9beb03ac902/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Jan 3 18:02:52 2023 +0000//    Merged PR 2981: Prologue and Epilogue op support with tensorization and caching//    - Add optional prologue and epilogue support for tensorization/    - Supported gemm parameters with fragment ops are: {alpha: 1, beta: any} and {alpha: >1, beta: 0}/    - ReLU, SET, SCALE added a standard fragment op//    Related work items: #3704//commit b524c9e6b69840485ec9bdf947f07e47ba8f04f1/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Dec 15 09:01:43 2022 +0000//    Merged PR 3001: [test] Expect failures on macos for x86 intrinsics tests//    macos does not support x86 and x86 avx intrinsicts//commit 005eb8540af4dce68e49cca725f7fb27f8b44a4b/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Dec 15 00:14:41 2022 +0000//    Merged PR 3000: Expect failures for macos in vpmaddwd tests//commit 0d610dfaa7ea32a5c378f70209bd1da6a9eca6ac/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Dec 14 16:41:07 2022 +0000//    Merged PR 2994: Bump hatlib to 0.0.32//commit 1a39c89b1b9d9c8b1723fb8037682539341b1a46/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Dec 14 15:06:52 2022 +0000//    Merged PR 2997: Support more casting cases in vpmaddwd matcher//    Support more casting cases in vpmaddwd matcher//commit 858db7c80e1e0fffcff180b841e99e8353f98430/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Dec 14 10:47:47 2022 +0000//    Merged PR 2996: [release] bump docs to 1.2.14 for next release//    bump docs to 1.2.14 for next release//commit a272d35955fe3a05d2c52f54481af40869a74849/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Dec 14 06:51:40 2022 +0000//    Merged PR 2987: Add support for max/min/round ops and vectorizing those ops//    Add support for max/min/round ops and vectorizing those ops//commit 375be08681b88df01e2e3043d5094684c134d862/Author: Mason Remy <masonr@microsoft.com>/Date:   Tue Dec 13 23:30:28 2022 +0000//    Merged PR 2963: Control TEMP array allocation location//    Control TEMP array allocation location//commit 929eeafe8263f866bacc77b958953268f58d8b8e/Author: Mason Remy <masonr@microsoft.com>/Date:   Tue Dec 13 21:56:38 2022 +0000//    Merged PR 2962: Expand vpmaddwd matching and add intrinsic call//    Expand vpmaddwd matching and add intrinsic call//    Matches more vpmaddwd cases and creates a pathway to invoking the LLVM/    intrinsic directly.//commit e47a02ed4929e8ba9a085c7870cc5e4fe9f0db62/Author: Mason Remy <masonr@microsoft.com>/Date:   Sat Dec 10 00:40:42 2022 +0000//    Merged PR 2961: Match more vectorization patterns and support vectorized cast//    Match more vectorization patterns and support vectorized cast//    Tries to match and rewrite vectorization patterns:/    - 2-loop interleaving store -> vector shuffle and store/    - simple horizontal reductions (not always efficient currently)/    - vectorized casts//    Makes vectorization of non-innermost loops do a per-op ""inplace"" unroll and/    vectorize the innermost loop/    TODO : update documentation to describe this behavior better//commit 628983a1a3c5f9ea42dac0cdb7db3cebcb427f43/Author: Mason Remy <masonr@microsoft.com>/Date:   Fri Dec 9 05:54:01 2022 +0000//    Merged PR 2960: Enable marking functions as no-inline-into//    Enable marking functions as no-inline-into//    Functions marked no-inline-into/    won't inline calls to other functions within their body. This/    is a useful compiler performance (not emitted code performance)/    optimization when we have many nested functions calls//commit d4404ea31cccff456a28ef6998403d228e427507/Author: Denny Sun <dennys@microsoft.com>/Date:   Fri Dec 9 00:40:16 2022 +0000//    Merged PR 2986: [output array] Emit range function with input_output type arguments//    Instead of using output type, we use input_output instead to generate two functions for the Range function./    Now Accera can successfully generate code for range function.//    ```/    ```//commit 7d867a33afc36a1a2fa68b49f507b6ad202c14ce/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Dec 8 22:12:14 2022 +0000//    Merged PR 2959: Improved affine for op range simplification//    Improved affine for op range simplification//    Add range value / constant-cmp-result patterns and affine for op range/    simplifications to the affine simplification pass and run it after/    inlining functions./    When inlining a dynamically-sized function into a statically-sized/    function, this change is useful for resolving the dynamic ranges to/    constants and pruning dynamic-range loops that are not needed given the/    specific constant value being used.//commit 511112c61b513c5d8d7ed4dba06ee266d5affbca/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Dec 8 17:14:00 2022 +0000//    Merged PR 2958: Hack to erase loops in a nest to support nest-of-nest or overfused//    Hack to erase loops in a nest to support nest-of-nest or overfused/    scenarios//    This change enables an action plan to erase loops. Typically this would/    be used when an outer nest traverses tiles and invokes an inner nest (or/    multiple nests) which operate within each tile. The outer nest still/    needs to cover the full iteration space, however after splitting by the/    tile sizes a user will not want the outer nest to perform the inner/    loops//commit 5dd35c423e3878a8f490de07ca21d3ac261c6224/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Dec 7 01:59:14 2022 +0000//    Merged PR 2985: [release] Rev docs to 1.2.13//commit b5697107f084bf910d4d77e75e67a90363855375/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Dec 7 00:57:08 2022 +0000//    Merged PR 2983: Increase timeouts of GPU benchmarks//    Increase timeouts of GPU benchmarks//commit 05c096f116216fbc9505c7d9a6f1e88b7626411f/Author: Mason Remy <masonr@microsoft.com>/Date:   Sat Dec 3 01:25:01 2022 +0000//    Merged PR 2982: Work around bug with redundant splits of dynamic dimensions//    Work around bug with redundant splits of dynamic dimensions//commit 4056d3177c5b14987e4c5fcd4aa91ddac67c4ed1/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Nov 30 07:55:06 2022 +0000//    Merged PR 2972: Build both static and dynamic binaries by default, put both in aux dependencies//commit b79602b9cf543b0852c7e0c85e548970d5ac7fbb/Author: Kern Handa <kerha@microsoft.com>/Date:   Tue Nov 29 22:34:04 2022 +0000//    Merged PR 2975: Updates llc/opt build flags to enable more optimizations by default//    Updates llc/opt build flags to enable more optimizations by default//commit 8a856b8af10227538ebb72486bd0bfd52af98873/Author: Kern Handa <kerha@microsoft.com>/Date:   Tue Nov 29 21:49:40 2022 +0000//    Merged PR 2977: Updates CMake to do FindPython before pybind11 config//    Updates CMake to do FindPython before pybind11 config//commit 6d05fc0e8a6d1933d7507cfa8b6838c04606a798/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Nov 22 22:34:50 2022 +0000//    Merged PR 2955: Reduce Linux PR runtime to under 60mins//    Filter DEV_MODE reruns to dsl_tests.py, this is not comprehensive and is a best effort.//commit 0354abe136dfb37ea243aaceeed6a5accb12d738/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Fri Nov 18 10:09:41 2022 +0000//    Merged PR 2953: Workaround debug mode failures with dimension argument ordering//    * Order dimension arguments after Array args to avoid this lowering issue in Debug mode (until Debug mode is fixed)//    ```/    test_all_dynamic_sizes_static_unroll_matmul_llvm.mlir:236:28: error: use of value '%7' expects different type than prior uses: 'i64' vs '!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>'/        %42 = llvm.insertvalue %7, %41[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>/                               ^/    /Users/lisaong/work/staging/Accera/build/lib.macosx-11.1-arm64-3.10/test_acccgen/test_all_dynamic_sizes_static_unroll_matmul/_tmp/test_all_dynamic_sizes_static_unroll_matmul/test_all_dynamic_sizes_static_unroll_matmul_llvm.mlir:201:5: note: prior use here/        %7 = llvm.insertvalue %arg6, %6[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>/        ^/    ```//    * Enable DEV_MODE tests in one CI pipeline so that we can catch these in the future//commit 5d365527d0b17c6d147086e71f958ed8ec2a7c56/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Nov 16 06:20:47 2022 +0000//    Merged PR 2950: [Release] Rev docs to v1.2.12//    In preparation for 1.2.12 release EOW//commit e9cca1927e98ff5a8c8af16f8746c317ba5998d8/Author: Mason Remy <masonr@microsoft.com>/Date:   Mon Oct 31 20:57:36 2022 +0000//    Merged PR 2946: Fix hierarchical partial fusing//    Fix hierarchical partial fusing//    Index attributes in fragment predicate ops weren't getting updated as/    part of fusion mapping old indices to new fused indices. This fix is a/    quick change to recursively walk predicates and update their index/    attributes manually./    In the future we could use SymbolicIndexOps and rely on/    BlockAndValueMapping replacements in clone, however this will also/    require that we don't create as many duplicate SymbolicIndexOps for the/    same Index//commit ecbc5b63ea6d879437e2ae08a1fd0edf05505032/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Oct 27 21:45:54 2022 +0000//    Merged PR 2942: Hold onto intermediate split indices when fusing//    Hold onto intermediate split indices when fusing//    When we split a loop multiple times, the outer index references the/    inner intermediate split indices in affine expressions, even if those/    indices get further split and are no longer loop indices. We have been/    discarding them because they aren't loop indices or dimension indices,/    but they wound up getting re-added to the transformed domain by/    serialization and this led to fusion bugs.//commit f38adc9b18c234e56c5fa4a213df51e5d0d1d033/Author: JUBI TANEJA <jubitaneja@microsoft.com>/Date:   Thu Oct 27 07:07:34 2022 +0000//    Merged PR 2834: match and rewrite a pattern to vectorize int16 matmul//    This rewrite rule matches the jj and kk loops in int16 matmul, where outer loop `jj` `{0..8}` is followed by an inner loop `kk` `{0..2}`. It vectorizes the `jj` and `kk` loop and replaces each affine op by a vectorized op. At the end, it generates `vpmaddwd` instruction for MatMul.//commit 7a1597d88e216bfb6df5780092b61711d6a36657/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Oct 27 01:24:41 2022 +0000//    Merged PR 2918: Support vectorization and static size caching for split dynamic range//    Support vectorization and static size caching for split dynamic range/    loops//commit b6ebe0df5222184221f1a5cf7d99cac60131eadb/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Oct 27 00:44:13 2022 +0000//    Merged PR 2914: Support static loop splits of dynamic sized ranges//    Support static loop splits of dynamic sized ranges//    This change creates a specialization of the AffineConstraintsHelper that/    works with Loopnest concepts and uses that in LoopNestBuilder to update/    the loop split generation//commit e5fa02d9b734dba2d24c10424ef947db7c5a3052/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Oct 26 19:29:49 2022 +0000//    Merged PR 2911: Support dynamic ranges in ScheduledLoopOp//    Support dynamic ranges in ScheduledLoopOp//commit 2a9cf40237814b8ea793d4020ec0b5be1633306a/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Oct 26 18:54:49 2022 +0000//    Merged PR 2907: Implement initial affine constraint helper for dynamic size loop//    Implement initial affine constraint helper for dynamic size loop/    handling//    Implements a wrapper around mlir::FlatAffineValueConstraints and a set/    of low-level tests using it that enable static-sized splitting of/    dynamic loop ranges//commit 5784d4483a1f03308b2ece7337fdf6d6b96fd757/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Oct 21 21:45:03 2022 +0000//    Merged PR 2935: Remove thread coarsening factor > 4 from GPU benchmarks//    Remove thread coarsening factor > 4 from GPU benchmarks//commit 432f88a6fbc5898ba93d85e87502f0421a68dbe4/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Thu Oct 20 00:13:50 2022 +0000//    Merged PR 2932: Upgrade to CUDA 11.8//    Upgrade to CUDA 11.8//commit b2669c511c2cca8bef2991f74cfed3aba5d39440/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Oct 19 17:14:40 2022 +0000//    Merged PR 2931: Update to ROCm 5.3//    Update to ROCm 5.3//commit 1472394dcf14a881d5336447abd307ee5ba77209/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Oct 19 00:37:10 2022 +0000//    Merged PR 2926: Plumb parameter usages to emitted HAT files//commit 7c786ce8f0b337e7af7c281db69436f53c74d4ca/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Oct 18 23:02:21 2022 +0000//    Merged PR 2927: Reduce benchmark configs using thread coarsening//    Reduce benchmark configs using thread coarsening//commit 5f21639e49373112c5c42875b84ed2b74e58616b/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Tue Oct 18 20:06:42 2022 +0000//    Merged PR 2925: Add optional optimization hint for number of thread blocks per SM//    Add optional optimization hint for number of thread blocks per SM//    Related work items: #3736//commit 8b3633da20e79e19ed1f94f88882f11e4c7c4879/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Oct 18 06:29:19 2022 +0000//    Merged PR 2924: Update hatlib dependency in setup.cfg, add comment//commit 9598d13f6d9fafd20ebd6907f4d617dcfc9d97a4/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Oct 17 22:58:24 2022 +0000//    Merged PR 2922: [Github] Update vcpkg//    From c2177e64bdf05e7ea69a8d41f420fcdb42df49db Mon Sep 17 00:00:00 2001/    From: Rose <83477269+AtariDreams@users.noreply.github.com>/    Date: Sun, 16 Oct 2022 23:47:22 -0400/    Subject: [PATCH] Update vcpkg (#52)//    This package has not been updated in months//commit 396e4096059fad56a664b32113f59109c6bc652b/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Oct 12 17:45:31 2022 +0000//    Merged PR 2910: Updates hatlib dependency to 0.0.29//commit 61ef91312105775d373ee56cd30cc2d4eb2878fb/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Wed Oct 12 01:02:13 2022 +0000//    Merged PR 2905: Fix internal param name in GPU benchmarks//    Fix internal param name in GPU benchmarks//commit 8a6fe20e20c08a149e0fb7188d994d2b6420a4df/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Mon Oct 10 23:03:34 2022 +0000//    Merged PR 2902: Increase ROCm baseline benchmark timeout to 10 hours//    - Increase ROCm baseline benchmark to 10 hours/    - Add category to the gemm input for classification//commit faada498b57d756a05ea93f9db018f140eed3219/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Mon Oct 10 05:37:03 2022 +0000//    Merged PR 2901: Increase ROCm baseline timeout to 7 hours//    Increase ROCm baseline timeout to 7 hours//commit 7ae827591fa94fc0fcc593993b9ae241a1cadb5e/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Oct 7 19:21:45 2022 +0000//    Merged PR 2900: Prune gemm benchmark input for big sizes by removing NT and TT configs//    - Prune gemm benchmark input for big sizes by removing NT and TT configs/    - Disable verification for resnet sizes/    - Fix baseline tagging for pytorch//commit 67bc56cc2aa14a3e3d74a3f936f5bdcfceb30055/Author: Captain Jack Sparrow <ritdas@microsoft.com>/Date:   Fri Oct 7 16:25:40 2022 +0000//    Merged PR 2896: Dynamic shared memory allocation support//    - Add optional param in plan.cache for memory offset/    - Add optional param in schedule.create_plan for total dynamic memory size in bytes/    - Update benchmarks to allow dynamic shared memory usage//    Related work items: #3735//commit 09690a1bd7886680c8fa0ac8826f422397230f15/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Oct 7 07:17:41 2022 +0000//    Merged PR 2898: Add pytorch gemm implementation for GPU benchmark baselines//    Add pytorch gemm implementation for GPU benchmark baselines//commit de03cfa267c160b168ddb116a0e98bdee6383770/Author: Mason Remy <masonr@microsoft.com>/Date:   Fri Oct 7 05:10:57 2022 +0000//    Merged PR 2897: Generalize partial dynamic size support//    Generalize partial dynamic size support//    Plumbs through mappings from arrays to which args provide the dimension/    sizes for those arrays more generically.//    This also generalizes dynamic size support beyond matmul scenarios.//    Note: due to assumptions in the debug mode plumbing, the size arguments/    still must occur first in the argument list, and a later PR should/    generalize that//commit df29d9450f055a6b067857179e3920f5f5badf0d/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Oct 5 07:49:00 2022 +0000//    Merged PR 2894: Add one test case for partially dynamic sized array//commit 07bcc97e1d84271cdeda85b17a2e17b88f7516b4/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Oct 4 21:09:42 2022 +0000//    Merged PR 2891: [nfc][release] Rev docs to 1.2.11//commit 337e7e16b5fdf46cabbe9d60d5139b9f5fffbc36/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Oct 4 17:07:02 2022 +0000//    Merged PR 2882: Add tests for thread coarsening and update GPU benchmarks//    - Add tests for thread coarsening and update GPU benchmarks//    Related work items: #3684//commit 6a0c938b01f544e44728007e9a2fba1ce28059a7/Author: Mason Remy <masonr@microsoft.com>/Date:   Mon Oct 3 23:56:15 2022 +0000//    Merged PR 2890: Add folding scenario for cast ops where the only downcasts are//    Add folding scenario for cast ops where the only downcasts are/    internally-generated//    This is useful for converting uint8*uint8->uint8 to/    int16*int16->int32 using cache element types as is needed in the/    vpmaddwd matmul scenario//commit 5fd93cb9d054f77c94c51d83f3c9faf94fe1b7ce/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Sep 30 21:41:53 2022 +0000//    Merged PR 2889: [refactoring] Prevent overloading of keyword ""Tensor"" - disambiguate with ""MMAFragment""//    Prevent overloading of keyword ""Tensor"" - disambiguate with ""MMAFragment""//commit c47e4e77df51deffa97e421cf24473213d90be80/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Sep 29 00:24:08 2022 +0000//    Merged PR 2886: [release] Bump docs to 1.2.10, sync GH to ADO//    * Bulk docs version update//    * Bump protobuf from 3.20.1 to 3.20.2 in /accera/onnx-emitter/test (d1b87ec6820417da0e86d60094eacf354398d4b9)//    * Also fixing a minor docs bug (errant backtick)//commit f4e0db2b9243a165c5372d76f047550c3c7da147/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Sep 28 23:35:25 2022 +0000//    Merged PR 2884: Add DSL test for runtime size correctness//commit 3d7ceffdc8f3e8af72a064afa398cee589c992f2/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Sep 28 21:46:48 2022 +0000//    Merged PR 2878: Optimize warp id calculation by forcing scalar registers//    - ROCM: use  **__builtin_amdgcn_readfirstlane** to force scalar reg usage/    - CUDA: don't use anything special since **__shfl_sync** seems to generate slower code//commit a8be268040bd7eaf7de17d10a3bee017869bd007/Author: Kern Handa <kerha@microsoft.com>/Date:   Wed Sep 28 21:08:36 2022 +0000//    Merged PR 2885: Updates python dependencies//    Updates hatlib version//commit 661e0174185f253c2052221abbb3286e45ae26ea/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Sep 28 02:48:15 2022 +0000//    Merged PR 2881: Fix the runtime crash caused by incorrectly generated LLVM IR//    1. Call the specific version of LLVM type converter for dynamic memory/    2. Create MemRefDescriptor from dynamic memory shape by associating the arrays with correct size arguments//    With this change, the following DSL test can succeed and pass correctness check.//    ```/            M = Dimension()/            N = Dimension()/            K = Dimension()//            A = Array(shape=(M, K), element_type=ScalarType.float32,/                role=Array.Role.INPUT)//            B = Array(shape=(K, N), element_type=ScalarType.float32,/                role=Array.Role.INPUT)//            C = Array(shape=(M, N),/                        element_type=ScalarType.float32,/                        role=Array.Role.INPUT_OUTPUT)//            @nest.iteration_logic/            def _():/                C[i, j] += A[i, k] * B[k, j]//            M_test = np.int64(64)/            N_test = np.int64(128)/            K_test = np.int64(32)/            A_test = np.random.random((M_test, K_test)).astype(np.float32)/            B_test = np.random.random((K_test, N_test)).astype(np.float32)/            C_test = np.random.random((M_test, N_test)).astype(np.float32)//            correctness_check_values = {/                ""pre"": [M_test, N_test, K_test, A_test, B_test, C_test],/                ""post"": [M_test, N_test, K_test, A_test, B_test, C_test + A_test @ B_test],/            }//            function = package.add(nest, args=(M, N, K, A, B, C), base_name=""runtimesizes"")//            with verifiers.VerifyPackage(self, ""test_runtimesizes"", TEST_PACKAGE_DIR) as v:/                package.build(""test_runtimesizes"", format=TEST_FORMAT | Package.Format.MLIR_VERBOSE, mode=TEST_MODE, output_dir=TEST_PACKAGE_DIR)/                if correctness_check_values:/                    v.check_correctness(/                        function.name,/                        before=correctness_check_values[""pre""],/                        after=correctness_check_values[""post""],/                    )/    ```//commit 1cdbaf2788bae8bf875085bb79c6d01b29e13747/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Sep 26 23:47:23 2022 +0000//    Merged PR 2879: Fix exception in GPU baseline benchmark//    Fix exception in GPU baseline benchmark//commit 5a082c7f357130649847784f5628fc173b8aeb1b/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Sep 23 02:04:12 2022 +0000//    Merged PR 2856: Enable output caching in ROCM for all MMA shapes//commit 93d747a6d8330741e8e651500e795a908ba341b9/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Sep 22 17:05:06 2022 +0000//    Merged PR 2876: Introduce warp bindings in CUDA//    - Bind indices to WARP_X/Y along with tensorization (exclusively from thread id mapping)/    - warp x dim is always a multiple of warp size in the x dimension. e.g. if for dividing a 64x64 block tile into 4 subtiles of 32x32 each where each subtile is computed by a single warp then the blockDim would be (64,2,1)./    - This is required since with tensorization we would want block dims to be generated in a specific way than without it. Calculating offsets within the matrix based on warps is non-trivial if not impossible with just thread bindings.//    Related work items: #3726//commit f62cac97b58d6020d30c78ac1651c545ad9fb4e4/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Sep 21 18:19:02 2022 +0000//    Merged PR 2874: Add unrolled convolution case study link (#50)//    Add unrolled convolution case study link (#50)//    * Update README.md//    Add unrolled convolution case study reference link//    * Update the reference link//    Update the reference according to latest updates in the case study//    See: https://github.com/microsoft/Accera/pull/50//commit a017b47e1fcf6827eb7237cc21c312b1f63fdaa6/Author: Denny Sun <dennys@microsoft.com>/Date:   Tue Sep 20 21:16:34 2022 +0000//    Merged PR 2873: Convert function signature from dynamic memref type to llvm type//    With this change, Accera is able to write the correct function signature of dynamic memref type to HAT file//commit 8050908026e69ebb5ff3c35eefb8071ea54f6376/Author: Denny Sun <dennys@microsoft.com>/Date:   Tue Sep 20 01:19:33 2022 +0000//    Merged PR 2871: Update hatlib version//    from 0.0.23 to 0.0.25//commit 0b30f30a6aa61e523544cf1be454966824609daf/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Sep 19 18:50:21 2022 +0000//    Merged PR 2870: Filter benchmark kernels based on scheduling policy//    Filter benchmark kernels based on scheduling policy//commit 85be9c8257cfd4414bf773e756a09291ef65d234/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Sep 19 18:11:15 2022 +0000//    Merged PR 2867: [build][github] Update test path in github actions//    Fixes https://github.com/microsoft/Accera/actions/runs/3071905923//commit 724817d114a1e630abe52425b4f26068c310e19c/Author: Denny Sun <dennys@microsoft.com>/Date:   Sat Sep 17 01:01:35 2022 +0000//    Merged PR 2850: Add llvm type converter for dynamic memory type//    This type converter is used to convert mlir type to llvm type before written to the HAT file. Now the helper function in LLVM only supports static memory type, so we need a new version for dynamic memory type.//commit dc15c16dec73ef9316bde789f7cfa90776ab1340/Author: Denny Sun <dennys@microsoft.com>/Date:   Fri Sep 16 21:18:45 2022 +0000//    Merged PR 2862: write runtime size of index type to Hat//    write runtime size of index type to Hat//commit 91dc8f6458ed605f7a8a940a4e9d58b89d741a46/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Sep 16 08:26:44 2022 +0000//    Merged PR 2861: Fix cache_C benchmark variable which is not getting set properly for CUDA//    Fix cache_C benchmark variable which is not getting set properly for CUDA//commit 4bab0884b0ce53ea03a7cba927c7169ce3c22e1e/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Fri Sep 16 06:15:39 2022 +0000//    Merged PR 2864: [build]: fix breaks due to agent image updates//    Latest version of azure pipelines images now set VCPKG_ROOT, which overrides the submodule used by Accera.//    See: https://github.com/actions/runner-images/commit/ef638dd95f31092f88c882294b0db3bfe9728685//    * Only pipelines that rely on azure build agents are affected./    * We still need to keep the submodule around to enable external builds from the Github repo./    * Remove defunct pipeline/    * Update vcpkg submodule while we're here//commit fe40e67394232de4524a80b15d8a31731398e9f6/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Sep 10 04:45:25 2022 +0000//    Merged PR 2839: Enable CUDA output caching//    - Add Tensor memory space type to denote memory fragments for caching (e.g. C in gemm). this might go away in future and just be replaced with Private once caching code is unified with ROCM behavior./    - Change caching code to generate MMALoad/StoreOps for caching of the output.//    Related work items: #3725//commit 0fd36d5c7897eb2b3814a396626a56ec822cec0c/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Wed Sep 7 20:03:30 2022 +0000//    Merged PR 2813: Add pass to recognize patterns that look like int16 matrix multiply//    This PR adds a pass to rewrite GEMM-like loops that multiply-accumulate int16 matrices into an int32 result. If this pattern gets invoked, the output should contain the much-sought `vpmaddwd` instruction.//    It also fixes some old low-level tests of integer arithmetic.//commit fea6475e4b54b4036bd6f160552723b1e9f16662/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Sep 6 23:56:56 2022 +0000//    Merged PR 2847: [release] Bump docs version to 1.2.9 and update github action container//    * Rev docs to 1.2.9//    * Update github workflow to reference updated tag for 14.0.6-1//commit 369b6bd532d5fca545991750f1be708db0d992df/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Sep 1 20:00:32 2022 +0000//    Merged PR 2845: Filter GPU benchmarks by de-parameterizing cache layouts//    Filter GPU benchmarks by de-parameterizing cache layouts//commit 0d96e70ec9433c9fac7b1b2490cdf05b18fd5a86/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Aug 31 02:00:28 2022 +0000//    Merged PR 2843: Fix bug in GPU benchmark to calculate valid variant//    - Fix bug in GPU benchmark to calculate valid variant/    - Add cosmosdb util to cleanup old entries//commit 2b0af04f30082ac4fdd2b5922024c6eeb1faeafa/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Aug 31 01:14:28 2022 +0000//    Merged PR 2835: Merge in MLIR fixes for LocationSnapshot and MemRefCastOp//    From 1abc4a981067ef1fd9bf717d7fabc4f6d75520d1 Mon Sep 17 00:00:00 2001/    From: Chuck Jacobs <cjacobs@microsoft.com>/    Date: Wed, 24 Aug 2022 04:14:51 +0000/    Subject: [PATCH] Merged PR 2822: Fix lowering of `MemrefCastOp` to the LLVM dialect//    From 39f0a4c97f5c89d7fa815118a3230091172bc795 Mon Sep 17 00:00:00 2001/    From: Charles Jacobs <cjacobs@microsoft.com>/    Date: Mon, 15 Aug 2022 16:00:43 -0700/    Subject: [PATCH] Fix issue where passed-in op-printing flags were ignored//commit f517044a330e8c45df9f9b63410cf1a57dacf4f8/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Aug 30 04:16:33 2022 +0000//    Merged PR 2842: Paramterize cache strategy in GPU benchmarks and fix kernel filters//    Paramterize cache strategy in GPU benchmarks and fix kernel filters//commit b0dc38572b66792a24e7ed8136c270bc4979fafb/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 29 18:19:41 2022 +0000//    Merged PR 2836: Value DSL support for runtime sized output arrays//    * This adds memref-in-memref support for output arrays that are allocated in the function/    * A new ""Pointer"" Value wrapper class with a Store() function which creates an accv.StoreOp, similar to Array, Scalar/    * Update accv.StoreOp to support memrefs-in-memrefs//    Value pointer levels are defined as follows://    |Layout|Example|Pointer level|C-type|/    |--|--|--|--|/    |scalar|int16, float32, index, ...|0|int16_t, float32_t, int64_t, ...|/    |single-level memref|memref<1xindex>, memref<3x2xf32>, memref<10x16x11x?xf32>|1|int64_t*, float32_t*, float32_t*|/    |memref in memref|memref<memref<?x?x?f32>>|at least 2 (= the number of levels of memrefs)|float32_t**|//    Future work:/    * End-to-end lowering through Python DSL/    * Bare pointer convention for output arrays/    * Custom allocator functions. Currently we use the built-in std alloc.//    Related work items: #3730//commit 2748bd94e98333d13401786b8f9153537ad8a89b/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 29 16:23:09 2022 +0000//    Merged PR 2840: [nfc] Remove redundant ACR info from docker scripts//    The container registry allows pull-only access//commit b7ce8ed4932fe613a4770df9ba00b2b7a8ad3d09/Author: Denny Sun <dennys@microsoft.com>/Date:   Fri Aug 26 21:07:34 2022 +0000//    Merged PR 2838: Runtime sized Array lowering to LLVM, accv.alloc to LLVM malloc//    1. make deep copy of range end of value type when cloning ops/    2. plumbing runtime size to LLVM/    3. transform memref.alloc to LLVM malloc/    4. conversion between block argument and symbol name//    the generated IRs://    **Initial.mlir**//    `%2 = ""accv.alloc""(%arg0, %arg1) {sym_name = ""diff""} : (index, index) -> memref<?x?xf32> loc(#loc)`//    **LoopNestToValueFunc.mlir**//    ```/    %2 = ""accv.alloc""(%arg0, %arg1) {sym_name = ""diff""} : (index, index) -> memref<?x?xf32> loc(#loc)/    affine.for %arg4 = 0 to %arg0 {/        affine.for %arg5 = 0 to %arg1 {/        }/    }/    ```//    **ConvertValueToStd.mlir**//        `%0 = memref.alloc(%arg0, %arg1) : memref<?x?xf32>`//    **ConvertValueToLLVM.mlir**//    ```/    %8 = llvm.mul %arg1, %arg0  : i64/    %9 = llvm.mlir.null : !llvm.ptr<f32>/    %10 = llvm.getelementptr %9[%8] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>/    %11 = llvm.ptrtoint %10 : !llvm.ptr<f32> to i64/    %12 = llvm.call @malloc(%11) : (i64) -> !llvm.ptr<i8>/    ```//    Related work items: #3733//commit dbbce7261e0f8c83a3cb56b5607662ebe2faa651/Author: Mason Remy <masonr@microsoft.com>/Date:   Wed Aug 24 22:00:02 2022 +0000//    Merged PR 2831: Record unique IDs so that different processes acting on a value module//    Record unique IDs so that different processes acting on a value module/    don't produce conflicting IDs//commit 0d168c99f3049f4f83a11883d573087785bec23b/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Aug 24 17:47:50 2022 +0000//    Merged PR 2837: Fix WPT calculation to prevent 0 work and filter benchmarks//    Fix WPT calculation to prevent 0 work and filter benchmarks//commit 830bd6cd2d8d621ffcb2b13282de3ccc7929224d/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Aug 23 20:39:49 2022 +0000//    Merged PR 2832: Caching strategy flag and thread ID optimization (GPU)//    - Add a flag to plan.cache() to expose the different thread <--> data arrangements/    - Optimize thread ID calculation to check blockdim first//commit cc2c38e9818f4b6ffa6ea4218a2ab483c4a8a574/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Aug 22 15:58:00 2022 +0000//    Merged PR 2829: Add handwritten caching implementation for GPU//    Add GPUBlockCacheOp which lowers to handwritted caching implementation on the GPU which supports access patterns for minimizing bank conflicts in shared memory and maximizing coalescing global memory access.//commit 432621157bd2ebeb0344fa36cb3821becf06fc3c/Author: Kern Handa <kerha@microsoft.com>/Date:   Fri Aug 19 00:22:00 2022 +0000//    Merged PR 2821: Fixes constraint logic for fusion of more than two schedules//    Fixes constraint logic for fusion of more than two schedules//commit 16f31231bb4159835d68a90fec43f49eda2aa983/Author: Kern Handa <kerha@microsoft.com>/Date:   Thu Aug 18 23:53:44 2022 +0000//    Merged PR 2830: Fixes macOS CI build//    Fixes macOS CI build//commit 786744fd2ae7c0f2d3e58f49edb561cadeb72d80/Author: Mason Remy <masonr@microsoft.com>/Date:   Fri Aug 12 23:50:04 2022 +0000//    Merged PR 2806: Enable specifying cache element type//    Enable specifying cache element type//    - Supports accumulating and/or computing in a different element type and/      batching up the casts for those types/    - Also adds support for binop/castop expansion and castop folding//commit a777fb5c59d6215ff707e8ee536f25a4b9f78641/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 11 22:03:15 2022 +0000//    Merged PR 2818: Upgrade hatlib dependency to v0.0.23//    Upgrade hatlib dependency to v0.0.23//commit ee15139a7f362807af10c42d09273cd0719def4a/Author: Mason Remy <masonr@microsoft.com>/Date:   Thu Aug 11 06:05:50 2022 +0000//    Merged PR 2792: Refactor cast to a value cast op//    Refactor cast to a value cast op//commit 138d2abfac4c10641d6ff6a486cdc5c4d4b0fd38/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Thu Aug 11 01:59:47 2022 +0000//    Merged PR 2788: Re-enabled fusing test that was taking too long//    This PR just re-enables a skipped test that was taking too long//commit fc70a56aa4982912cda7a2dff7888f21f23aaeaa/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 11 00:58:24 2022 +0000//    Merged PR 2816: Upgrade hatlib requirement to 0.0.22//    Upgrade hatlib requirement to 0.0.22//commit 12fea07a0d1bc8b3ba1c5c5543de5ea9b3ae5a20/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Aug 10 04:30:48 2022 +0000//    Merged PR 2811: [nfc] Upgrade CUDA to 11.7 on NVidia benchmark machines//    According to https://hub.docker.com/r/nvidia/cuda/tags, 11.7.0 is still the latest.//commit 8e4041a19d8577a4c14741b45b6ab733e5d53d74/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Aug 10 00:22:43 2022 +0000//    Merged PR 2814: Parameterize batch_size in GPU benchmarks//    Parameterize batch_size in GPU benchmarks//commit eb6197a8f54555ab47be383f7f48b7efc9442041/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 8 05:51:35 2022 +0000//    Merged PR 2810: [release] [nfc] Bump docs version to 1.2.8, bump github actions to llvm 14.0.6//    Preparation for 1.2.8 release//commit 63c7a397210a753836a647f399e2798bba521939/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 8 05:03:36 2022 +0000//    Merged PR 2808: [ci] Add vcpkg caching for buddy builds, disable flaky parallelized tests//    * Enable vcpkg binary caching for CI pipelines that are using non custom agents. This reduces vcpkg install time from 2-3 minutes to ~30 seconds/    * ctest --parallel on macos can sometimes fail randomly. The tests will need to be updated to support running in parallel//    References: https://vcpkg.io/en/docs/users/binarycaching.html/    Note: an organization-wide Nuget feed must be created. Project-wide Nuget feeds will fail with access denied.//commit 37e207a0deb2c8c431a6c0e73787c726221a4f37/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 8 04:13:14 2022 +0000//    Merged PR 2804: [ci] Reduce runtimes of PR Buddy Builds//    * Remove redundant setup.py builds in pipelines with cmake builds/    * Build debug for Linux only (the fastest config)/    * Add pipeline caching for ccache, conan, and pip where applicable/    * Add parallel configs where applicable/    * Filter out some tests on windows due to slow runtimes. These should have coverage on Linux  and macOS.//commit c8940050d9064e5c326644761ef2821b59e8e431/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Aug 5 23:31:24 2022 +0000//    Merged PR 2807: Enable verification for CK baselines//    - Enable verification for CK baselines/    - increase timeout for cuda resnet/    - add functionality for extracting kernel code from cosmosdb//commit da114623db8518c9b47eae83eee1357f0bcd3565/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Fri Aug 5 22:35:43 2022 +0000//    Merged PR 2802: Fix barrier optimization pass//    This PR fixes a couple of barrier-related issues:/    - The barrier optimization pass wasn't keeping barriers that protected vector load/store ops/    - Multiple barriers were getting generated when hoisting barriers out of conditionals//    Related work items: #3732//commit 03171fec09146bdeacfdc2da68ff73202e30d534/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 4 19:08:27 2022 +0000//    Merged PR 2800: Add max_threads to parallelize and change default behavior//    - Add num_threads to parallelize/    - change default behavior to count the number of iterations of the given indices/    - Update documentation//commit 7ff3a90dd09f74c8699657b17909a575c59267fa/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Aug 4 16:42:29 2022 +0000//    Merged PR 2801: Remove verification on cuda-fp32-big benchmark//    Remove verification on cuda-fp32-big benchmark//commit 5e6f6d93f7c62b2f965e12cb69d00b77a6c65a89/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Aug 1 22:36:03 2022 +0000//    Merged PR 2798: LLVM 14.0.6 upgrade//    An incremental upgrade with minimal or no changes to MLIR//commit bf8faeaee154befc7c34e221fe54f9a1fd2799f3/Author: Kern Handa <kerha@microsoft.com>/Date:   Sat Jul 30 04:55:03 2022 +0000//    Merged PR 2796: Makes NestedPassAdaptor's pipeline consistent//    Makes NestedPassAdaptor's pipeline consistent//    This change makes it so NestedPassAdaptor creates a new pass manager/    every time a new pass is added. Prior to this change, if dumpPasses was/    false, the same nested pass manager would be used. If dumpPasses was/    true, a new nested pass manager would be created per call to addPass./    This difference in behavior was also resulting in the lowering pipeline/    to be different, depending on the value of dumpPasses.//    For example, in the following code in AcceraPasses.cpp, all the passes/    that are added to `funcOpPM` run BEFORE `createConvertSCFToOpenMPPass`/    if `dumpPasses` was false.//    ```cpp/        auto funcOpPM = pmAdaptor.nestPassManager([&]() -> OpPassManager& { return pm.nest<v::ValueModuleOp>().nest<FuncOp>(); });/        funcOpPM.addPass(createConvertLinalgToAffineLoopsPass());/        funcOpPM.addPass(createSimplifyAffineStructuresPass());/        funcOpPM.addPass(createCanonicalizerPass());/        funcOpPM.addPass(createLoopInvariantCodeMotionPass());/        funcOpPM.addPass(createCSEPass());//        pmAdaptor.addPass(createConvertSCFToOpenMPPass());/        pmAdaptor.addPass(value::createValueToStdPass(options.enableProfile));/        funcOpPM.addPass(value::createBarrierOptPass(options.writeBarrierGraph.getValue(), options.barrierGraphFilename.getValue()));/        pmAdaptor.addPass(value::createRangeValueOptimizePass());/        pmAdaptor.addPass(createCanonicalizerPass());/        pmAdaptor.addPass(createCSEPass());/    ```//    Additionally, this change exposed the fact that the BarrierOpt pass is/    incorrectly erasing barriers, and so has been made into a no-op until/    this correctness issue has been fixed.//commit d97a5fd55712ce783f65dd948a9e9c152b1ff2d1/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Jul 28 18:33:54 2022 +0000//    Merged PR 2795: [docs] Cleanup viz scripts, clarify reorder illustrations//    * Clarify in the labels while working on the animated version//    * Cleanup and rename .js files for (slightly) easier lookup//commit 4afe6b763c2097a9a09eebac4ed5f0f5f59f587d/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Thu Jul 28 08:06:22 2022 +0000//    Merged PR 2475: LLVM 14.0.0 upgrade//    Tag: llvmorg-14.0.0//    Notable changes:/    * std dialect ops are now moved to arith, math dialects/    * StrEnumAttribute is now replaced by simple enums. This affects things like gpu.dimension.x/    * [Issue] linalg.copy is removed, replaced by memref.copy, which introduces a runtime dependency on a `memrefCopy` C function for non-identity layout copies. This affects Array.sub_array in debug mode./    * [Regression] OMP to LLVM lowering will crash in mlir-translate findAlloc due to a empty set of blocks being emitted. This only affects dynamic scheduling with collapsed loops./    * Lots of renames/    * Upgraded macOS to macOS-12//    Related work items: #3646//commit de3bd0ffde5ebb4bf69cb0db0c46bc76fef37c4b/Author: Denny Sun <dennys@microsoft.com>/Date:   Thu Jul 28 01:02:23 2022 +0000//    Merged PR 2753: accera.Dimension and runtime-sized Arrays in the Python DSL//    With this change, Accera is able to generate the initial mlir for runtime sized Arrays. The ir lowering is not fully working due to some bug, which can be fixed in the later changes.//    ```/            M = Dim()/            N = Dim()/            K = Dim()//            A = Array(shape=(M, K), element_type=ScalarType.float32, role=Array.Role.INPUT)/            B = Array(shape=(K, N), element_type=ScalarType.float32, role=Array.Role.INPUT)/            C = Array(shape=(M, N), element_type=ScalarType.float32, role=Array.Role.INPUT_OUTPUT)//            nest = Nest((M, N, K))/            i, j, k = nest.get_indices()//            @nest.iteration_logic/            def _():/                C[i, j] += A[i, k] * B[k, j]//            package.add()/            package.build()/    ```//    ```/    module @test_runtimesizes attributes {llvm.data_layout = ""... ...""}  {/      accv.module ""test_runtimesizes""  {/        accv.func nested @runtimesizes_..._impl_...(%arg0: index loc(unknown), %arg1: index loc(unknown), %arg2: index loc(unknown), %arg3: memref<?x?xf32, #map> loc(unknown), %arg4: memref<?x?xf32, #map> loc(unknown), %arg5: memref<?x?xf32, #map> loc(unknown)) attributes {accv.output_verifiers = ["""", """", """", """", """", ""_debug_check_allclose_<accera.lang.Dim.Dim object at ...>_<accera.lang.Dim.Dim object at ...>_...""], exec_target = 0 : i64} {/          %0 = ""accv.get_element""(<<UNKNOWN SSA VALUE>>) : (memref<index>) -> index loc(#loc)/          %1 = ""accv.get_element""(<<UNKNOWN SSA VALUE>>) : (memref<index>) -> index loc(#loc)/          %2 = ""accv.get_element""(<<UNKNOWN SSA VALUE>>) : (memref<index>) -> index loc(#loc)/          ""accln.nest""(%0, %1, %2) ( {/            %3 = accln.sym_index {name = ""i""} #accln<""index{i,3}""> loc(#loc)/            %4 = accln.sym_index {name = ""j""} #accln<""index{j,4}""> loc(#loc)/            %5 = accln.sym_index {name = ""k""} #accln<""index{k,5}""> loc(#loc)/            ""accln.kernel""() ( {/              %7 = ""accv.slice""(%arg5, %3, %4) {sliceDimensions = [0, 1]} : (memref<?x?xf32, #map>, index, index) -> memref<f32> loc(#loc)/              ... .../              accln.terminator loc(#loc)/            }) {sym_name = ""_""} : () -> () loc(#loc)/            ... .../            accln.terminator loc(#loc)/          }) {domain = #domain0, exec_target = 0 : i64, kernels = []} : (index, index, index) -> () loc(#loc)/          accv.return loc(#loc)/        } loc(#loc)/        accv.func @runtimesizes_...(%arg0: index loc(unknown), %arg1: index loc(unknown), %arg2: index lo...//commit 75553672d92f6e60638b4cb6169bda9712401eef/Author: JUBI TANEJA <jubitaneja@microsoft.com>/Date:   Wed Jul 27 23:34:03 2022 +0000//    Merged PR 2793: support sign extend op in canVectorize() function to improve generated MLIR//    While trying to optimize `int16` `MatMul` with vectorize transformation in DSL, we noticed an unrolled loop with load, binop, sexti, store instructions. There was no vector instruction emitted and it hinted us that sign extend instruction is not supported in `canVectorize` function and now with this op supported, we can emit some vector instructions in the MLIR.//commit 4fa740166b1c17359d40b540b7b7eb623caa167a/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Jul 27 07:02:01 2022 +0000//    Merged PR 2790: Filter invalid kernels from GPU benchmarks//    - Filter invalid kernels from GPU benchmarks/    - Disable verification on cuda f16 benchmarks/    - Remove frequent cleanups//commit 6cff78412b04f15c3257bc2286a3805974a56012/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Jul 26 03:27:14 2022 +0000//    Merged PR 2787: Remove MLIR flag from package format in benchmarks//    Remove MLIR flag from package format in benchmarks//commit 0e7b7ef930f177e6a70b88aad7982e9a36dd116f/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Mon Jul 25 23:10:43 2022 +0000//    Merged PR 2784: Merge Github changes to ADO//    Author: Lisa Ong <11318241+lisaong@users.noreply.github.com>/    Date:   Mon Jul 25 19:13:00 2022 +0800//        Update Building_on_Ubuntu.md//    commit 474d7e4c6fd7dcd2f723193e69446da4c63f97ee/    Author: Lisa Ong <11318241+lisaong@users.noreply.github.com>/    Date:   Mon Jul 25 19:03:30 2022 +0800//        Github codespaces configuration (#48)//    commit 0e8ffcd806bfc1671c89e599c2562592c4d06f21/    Author: Anthony Shaw <anthony.p.shaw@gmail.com>/    Date:   Mon Jul 25 15:34:18 2022 +1000//        Set license field in metadata of package (#46)//        * Set license field in meta//        * Update all setup.cfg files//    commit 9a8ea90b22b02379072a98eacc8d5f49c1a28e69/    Author: Lisa Ong <11318241+lisaong@users.noreply.github.com>/    Date:   Mon Jul 25 10:24:26 2022 +0800//        Enable CIs from pull requests from forks//commit 8275363815c0e128ff477a8c7692ad44353db5aa/Author: Chuck Jacobs <cjacobs@microsoft.com>/Date:   Mon Jul 25 20:41:39 2022 +0000//    Merged PR 2776: Make fusing more efficient//    This PR refactors the code generation for schedules and makes it more efficient. This makes a big difference for complex schedules with constraints on the kernels (like the ones generated when fusing schedules).//    Here are some timings on a few tests (modified versions of Mason's example script) I ran://    | test | main branch | PR branch |/    |----|----|----|/    | 3 fused schedules, tile first only | 18.8s | 5.8s |/    | 3 fused schedules, tile 1 & 2 | 190s | 6.2s |/    | 3 fused schedules, tile all 3 | ???? | 7.2s |//    Related work items: #3731//commit 2306afbb9425dcecced6a38590da2ae31937d23e/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Jul 25 06:51:24 2022 +0000//    Merged PR 2781: Fix benchmark with MLIR format and add repro test//commit 6e72de99c9f1952111081dc320cc055eb09aabf6/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Jul 23 04:26:14 2022 +0000//    Merged PR 2780: Type support for tensor ops in CUDA//    - Add support for FP32 input (TF32 compute)/    - Add support for bfloat16 input/FP32 output/    - Add support for integer types//    Related work items: #3709, #3710//commit 3bedc2c51c7b93865462df68b154db9c4bdda5ec/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Jul 22 04:11:41 2022 +0000//    Merged PR 2779: Some assorted benchmark fixes//    - Build Accera in release mode/    - Shuffle gemm sizes to run small sizes first/    - Increase tolerance to account for floating point drift for large k-split//commit cb010de71df47c75c48ae3a8a749e03fc606e24f/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Jul 21 19:43:11 2022 +0000//    Merged PR 2774: Add input caching tests for CUDA, enable tests in PR pipelines//    Add input caching tests in CUDA//    Related work items: #3725//commit 85c09542106b4e685ba4141d9cb34b823d0d02b7/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Jul 20 23:55:04 2022 +0000//    Merged PR 2677: Unify rocm/cuda tensor ops lowering under accv dialect//    - remove gpu dialect lowering (CUDA)/    - add accv dialect lowering for CUDA/    - rocm and cuda lowering use the same semantics//    Related work items: #3728//commit 282d66743b4d5d828998198d94003ea93228165c/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jul 19 02:14:58 2022 +0000//    Merged PR 2764: [doc] Rename acc.Dim to acc.Dimension and add create_dimensions()//    * Rename `acc.Dim` to `acc.Dimension`, `acc.Dim.Role` to `acc.Dimension.Role`/    * Add the simplified `acc.create_dimensions()` construction pattern/    * Kept the `acc.Dimension` constructor for advanced use cases involving generator patterns//    Related work items: #3720//commit e8a0a7475acc2b117b41b97238b2ecb11060cbd6/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Jul 14 03:27:17 2022 +0000//    Merged PR 2752: Add nargs to input args in benchmark tool//    add nargs to input args in benchmark tool//commit 2c5083a721b4cbef11d1782b43d34d67b76caa0e/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Wed Jul 13 05:07:40 2022 +0000//    Merged PR 2680: [doc] Manual and Reference doc updates for Runtime Array DSL//    Proposed DSL changes for supporting runtime array sizes:/    * Adds a new dimension type that serves as a placeholder for runtime dimension sizes for `Array` and `Nest`. Supports both input and output dimensions/    * Adds output-only Arrays/    * Add the Scalar type/    * Example kernels demonstrating different aspects:/      * Gather: basic features/      * Range: scalar function arguments/      * ReduceMean: fusion//    Related work items: #3720//commit dbdbbb94c98f787782e8e4a6171a3af067f91e58/Author: Denny Sun <dennys@microsoft.com>/Date:   Wed Jul 13 01:45:07 2022 +0000//    Merged PR 2683: Support conditionals in Logic Function//    Before this change, there is no way to emit conditionals in logic function.//    With this change, the user is able to write the following logic function://    ```/                def if_func():/                    T[i, j] = A[i, j] + B[i, j]/                    C[i, j] += T[i, j]**2.//                def elseif_func():/                    T[i, j] = A[i, j] - B[i, j]/                    C[i, j] += T[i, j]**2.//                def else_func():/                    C[i, j] = A[i, j] + B[i, j]//                @nest.iteration_logic/                def _():/                    _If(j<100, if_func).ElseIf(i>100, elseif_func).Else(else_func)/    ```//    Related work items: #3706//commit f3a1a2becb6740ae8cf7873b5029c6df140f5c19/Author: Kern Handa <kerha@microsoft.com>/Date:   Tue Jul 12 16:52:41 2022 +0000//    Merged PR 2744: [doc] Fixes link in reference/functions/cast.md, revs version on all docs//    [doc] Fixes link in reference/functions/cast.md//commit 23f4c8fbf2415b02e8b0090a76380d34790205fa/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jul 12 05:55:48 2022 +0000//    Merged PR 2743: [DSL] Document implicit casting rules and the explicit `cast` function//    * Document implicit casting rules implemented by !2693/    * Promote `acc.cast` to a documented function to give the user control to override implicit casting behavior//commit 3ec63b62705327a65decc4da7ec4cb5412dc7299/Author: Kern Handa <kerha@microsoft.com>/Date:   Mon Jul 11 23:57:23 2022 +0000//    Merged PR 2739: Updates ROCM tensorization pattern to handle casting//    Updates ROCM tensorization pattern to handle casting//commit 60c082dd38ff1b0bc030a7e28dc19f553bad9099/Author: Mason Remy <masonr@microsoft.com>/Date:   Mon Jul 11 22:58:42 2022 +0000//    Merged PR 2643: Some fixes for last major array caching in tensorization//    Some fixes for last major array caching in tensorization//commit 812c3065b7d4d6c9d716acf4fb1df4be66ef101d/Author: Kern Handa <kerha@microsoft.com>/Date:   Mon Jul 11 20:43:12 2022 +0000//    Merged PR 2693: Updates DSL codegen to implicitly cast if possible//    Updates DSL codegen to implicitly cast if possible//commit 6ed316e50e8f9e398f9ee6b8bfa8e6aa05fbffb1/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Jul 9 05:52:22 2022 +0000//    Merged PR 2735: Pass multiple input files as comma-separated list to benchmark tool//    https://intelligentdevices.visualstudio.com/ELL/_build/results?buildId=41588&view=logs&j=d78921a4-2f18-50b0-77ad-4c6803f3371b&t=f97c60f6-ada7-5ec9-5ea1-510216c408e9//    Above pipeline did not run the 2nd set of input sizes since the 1st process did not exit until pipeline timeout was hit. After the fix, we will always have a single job.//commit e5010caebc5a135e40464a06432a5cf1fc965203/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Jun 27 23:32:49 2022 +0000//    Merged PR 2721: Remove unnecessary logging in benchmarks//    Remove unnecessary logging in benchmarks//commit e0c5945d3ef218a5be858bc0934274793972abdb/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jun 21 01:12:02 2022 +0000//    Merged PR 2674: Support emitting runtime array sizes in the Value DSL//    * Minimum set of changes to support runtime sizes in the Value DSL without transformations/    * Add a ScalarDimension type (name TBC) which is aliased to Scalar/    * Support variable ends in MemoryLayout, ScheduledLoopOp, RangeValueAnalysis/    * Use mlir::ShapedType::kDynamicSize and mlir::ShapedType::kDynamicStrideOrOffset as sentinel values, following the pattern in MemRefOps, TensorOps, etc./    * TODO: E2E verification in the next PR/    * TODO: Python DSL changes in the next PR//    Output of mlir-translate for the runtime_sizes_all case, where %21, %22 and %23 are the runtime sizes for M, N, and K://    ```/    define void @NestMatMul(float* %0, float* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, float* %7, float* %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13, float* %14, float* %15, i64 %16, i64 %17, i64 %18, i64 %19, i64 %20, i64 %21, i64 %22, i64 %23) !dbg !3 {/      br label %25, !dbg !7//    25:                                               ; preds = %57, %24/      %26 = phi i64 [ %58, %57 ], [ 0, %24 ]/      %27 = icmp slt i64 %26, %21, !dbg !9/      br i1 %27, label %28, label %59, !dbg !10//    28:                                               ; preds = %25/      br label %29, !dbg !11//    29:                                               ; preds = %55, %28/      %30 = phi i64 [ %56, %55 ], [ 0, %28 ]/      %31 = icmp slt i64 %30, %22, !dbg !12/      br i1 %31, label %32, label %57, !dbg !13//    32:                                               ; preds = %29/      br label %33, !dbg !14//    33:                                               ; preds = %36, %32/      %34 = phi i64 [ %54, %36 ], [ 0, %32 ]/      %35 = icmp slt i64 %34, %23, !dbg !15/      br i1 %35, label %36, label %55, !dbg !16//    36:                                               ; preds = %33/      %37 = mul i64 %26, %5, !dbg !17/      %38 = add i64 %37, %34, !dbg !18/      %39 = getelementptr float, float* %1, i64 %38, !dbg !19/      %40 = load float, float* %39, align 4, !dbg !20/      %41 = mul i64 %34, %12, !dbg !21/      %42 = add i64 %41, %30, !dbg !22/      %43 = getelementptr float, float* %8, i64 %42, !dbg !23/      %44 = load float, float* %43, align 4, !dbg !24/      %45 = fmul float %40, %44, !dbg !25/      %46 = mul i64 %26, %19, !dbg !26/      %47 = add i64 %46, %30, !dbg !27/      %48 = getelementptr float, float* %15, i64 %47, !dbg !28/      %49 = load float, float* %48, align 4, !dbg !29/      %50 = fadd float %49, %45, !dbg !30/      %51 = mul i64 %26, %19, !dbg !31/      %52 = add i64 %51, %30, !dbg !32/      %53 = getelementptr float, float* %15, i64 %52, !dbg !33/      store float %50, float* %53, align 4, !dbg !34/      %54 = add i64 %34, 1, !dbg !35/      br label %33, !dbg !36//    55:                                               ; preds = %33/      %56 = add i64 %30, 1, !dbg !37/      br label %29, !dbg !38//    57:                                               ; preds = %29/      %58 = add i64 %26, 1, !dbg !39/      br label %25, !dbg !40//    59:                                               ; preds = %25/      ret void, !dbg !41/    }/    ```//    Related work items: #3716, #3717//commit 51a07e5c60009c47c3b375b402ac96f47619ca8f/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Tue Jun 21 00:18:02 2022 +0000//    Merged PR 2682: Add nvidia device optimized sizes and some benchmark fixes//    Add nvidia dev opt sizes and some bench fixes//commit 6325b5e5bc68136d29e4a65d657699a4e781214d/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Sat Jun 18 17:59:50 2022 +0000//    Merged PR 2676: Add automated weekly rocm baseline benchmark//    https://intelligentdevices.visualstudio.com/ELL/_build/results?buildId=41316&view=logs&j=4f7f213a-5f0f-58b0-1189-99ef12faf0d8&t=687344d2-d6b6-5d8c-dd9d-6aab558fd96c//    https://intelligentdevices.visualstudio.com/ELL/_build/results?buildId=41314&view=logs&j=4f7f213a-5f0f-58b0-1189-99ef12faf0d8//commit 940e599ff7026e7c41cb1b2566eec44d70709e96/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Fri Jun 17 16:34:22 2022 +0000//    Merged PR 2673: Add automated weekly baseline benchmarks on Nvidia GPU//commit 1a521c78783538e233230ecc90d2bc347092e0da/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Thu Jun 16 00:07:26 2022 +0000//    Merged PR 2657: Add conversion pass from gpu ops to rocdl ops//    - switch to gpu dialect for gpu index ops/    - add conversion pass from gpu dialect to rocdl//commit 3c3271deb2a2a42bac5e6356f28d7e04e6ff7678/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Wed Jun 15 02:52:50 2022 +0000//    Merged PR 2652: Add integer tensor ops support for AMD targets//    - int mfma ops/    - tests/    - static_cast in c++//    Related work items: #3727//commit 8b96d139067119de37ab6bcd1ecb0382ce7f46b3/Author: Lisa Ong <onglisa@microsoft.com>/Date:   Tue Jun 14 20:25:33 2022 +0000//    Merged PR 2650: [release] Docs version to 1.2.6, sync Github to ADO//    Author: Lisa Ong <onglisa@microsoft.com>/    Date:   Tue Jun 14 17:04:53 2022 +0800//        bump docs version to 1.2.6//    commit 4014c176e8e5eb270404915c1bdc7404d657d9f6/    Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>/    Date:   Sat Jun 4 07:11:15 2022 +0800//        Bump bottle from 0.12.19 to 0.12.20 in /tools/viz (#44)//        Bumps [bottle](https://github.com/bottlepy/bottle) from 0.12.19 to 0.12.20./        - [Release notes](https://github.com/bottlepy/bottle/releases)/        - [Changelog](https://github.com/bottlepy/bottle/blob/master/docs/changelog.rst)/        - [Commits](https://github.com/bottlepy/bottle/compare/0.12.19...0.12.20)//commit 72ede2b19b5e21f3d96fc800bcc1ed30d69c389c/Author: Ritwik Das <ritdas@microsoft.com>/Date:   Mon Jun 13 23:17:59 2022 +0000//    Merged PR 2624: Add more MMA shapes for CUDA//    Add more MMA s…",https://github.com/microsoft/Accera/commit/8f72830cd89d470a0d57ccdf9f5f63c7bf470e0b,410044642,microsoft/Accera,False,False,"['#3704', '#3736', '#52', '#3735', '#3684', '#3726', '#50', '#50', '#3725', '#3730', '#3733', '#3732', '#3646', '#48', '#46', '#3731', '#3709', '#3710', '#3725', '#3728', '#3720', '#3720', '#3706', '#3716', '#3717', '#3727', '#44']",92
307,968db6e7a12f080c24e021955c97758766eb7481,"Added Models, Parser Logic, Console App, Tests. (#12)//* Added Console App Conditions////* Added TB7 and TM7 models////* Removed test code////* Project name fix////* Fixed reference////* Implemented strategy pattern for parser////* Deleted unused project////* Added commands to command line tool////* Added arguments for console app////* Added models and test cases////* Added GetData Method////* Removed Unused Nuget Packages////* Added Models////* Added TM7 Models////* Added null check////* Handled Exception in Console Application////* Replaced preprocessing with regular expression////* Updated .net version////* Updated dependencies////* Handled case sensitivity////* Modified tm7 models////* Handled xxe attacks////Co-authored-by: Chaitanya Babu M G <chmg@microsoft.com>",https://github.com/microsoft/tm-file-parser/commit/968db6e7a12f080c24e021955c97758766eb7481,337742691,microsoft/tm-file-parser,False,False,['#12'],93
308,654c759b3ef2538220508ca390bf0e94c12e4d24,Added models and read logic (#10)//* Added Console App Conditions////* Added TB7 and TM7 models////* Removed test code////* Project name fix////* Fixed reference////* Implemented strategy pattern for parser////* Deleted unused project////* Added commands to command line tool////* Added arguments for console app////* Added models and test cases////* Added GetData Method////* Removed Unused Nuget Packages////* Added Models////* Added TM7 Models////* Added null check////* Handled Exception in Console Application////* Replaced preprocessing with regular expression////* Updated .net version////* Updated dependencies////* Handled case sensitivity////* Modified tm7 models////* Handled xxe attacks////Co-authored-by: Chaitanya Babu M G <chmg@microsoft.com>,https://github.com/microsoft/tm-file-parser/commit/654c759b3ef2538220508ca390bf0e94c12e4d24,337742691,microsoft/tm-file-parser,False,False,['#10'],94
312,327411990d5770dac335a7d4ac3476a9cddcfeca,"Add oss-reproducible tool (#237)//These changes implement OSS Reproducible.////* Add nice banner to tool output.//* Improve detection for GitHub tags.//* Improve RubyGems version detector.//* Minor fixups.//* Add oss-reproducible.//* Fix reference to non-self-contained executables.//* Improve output JSON.//* Add reproducibility tests.//* Remove bluebird tests, which needs Docker.//* Add extra metadata to cpan version detector.//* Add support for cpan builders; fix ignore filters.//* Add ignore list for find source tool.//* Add additional ignore patterns.//* Improve directory comparison algorithm.//* Add diff output (optional)//* Add cmdline options for running specific strategies.//* Add Python support.//* Reduced some log noise.//* Typo.//* Refactor build strategies.//* Add ansi output, some overriding builders, cmdline options.//* GitHub: Pull versions from `git ls-remote` and then find the best match.//* Nicer (color) output, fix bug in 'matches source'. Add tests.//* Fix reproducibility tests.//* Minor tweaks.//* Temporary workaround for #240.//* Add automatic decompression.//* Reduce warning level for missing versions.//* Add diffoscope, scoring algorithm.//* Add additional backdoor rules (obfuscation).//* Fix tag distinct bug #241//* Fix broken test.//* Minor cleanup//* More cleanup//* Improve NPM autobuilder.//* Refactor strategyresult//* Minor tweaks.//* Refactor IsReproducible//* Tweaks//* Improve Ubuntu download test.",https://github.com/microsoft/OSSGadget/commit/327411990d5770dac335a7d4ac3476a9cddcfeca,245338537,microsoft/OSSGadget,False,False,"['#237', '#240', '#241']",95
316,e19dba8c2e465357c16929e5c61398d2525e70ca,Added ability to auto update Insiders build of extension (#6308)//* Fixes////* Fixes////* Added implementation plan////* Added user setting////* Added tests for setting////* Added classes////* Updated README////* Added installer////* Added channel service and rules////* Added prompt////* Added insiders extension service////* Fixed bugs////* Fix unit tests////* Refactor and added logs////* Simplified stuff////* Added logic for reload////* More strategy pattern////* Code reviews and more////* Update README////* Code reviews////* Added context to commands////* Added logging////* Fixed reload prompt bug////* Added download channel rule tests////* Added tests for download channel service////* Handled edge cases////* Updated tests////* More tests////* Added tests////* Added tests for commands and handlers////* Fix CI////* Code review bug////* Added tests for extension build,https://github.com/microsoft/vscode-jupyter/commit/e19dba8c2e465357c16929e5c61398d2525e70ca,294546561,microsoft/vscode-jupyter,False,False,['#6308'],96
317,e19dba8c2e465357c16929e5c61398d2525e70ca,Added ability to auto update Insiders build of extension (#6308)//* Fixes////* Fixes////* Added implementation plan////* Added user setting////* Added tests for setting////* Added classes////* Updated README////* Added installer////* Added channel service and rules////* Added prompt////* Added insiders extension service////* Fixed bugs////* Fix unit tests////* Refactor and added logs////* Simplified stuff////* Added logic for reload////* More strategy pattern////* Code reviews and more////* Update README////* Code reviews////* Added context to commands////* Added logging////* Fixed reload prompt bug////* Added download channel rule tests////* Added tests for download channel service////* Handled edge cases////* Updated tests////* More tests////* Added tests////* Added tests for commands and handlers////* Fix CI////* Code review bug////* Added tests for extension build,https://github.com/microsoft/vscode-python/commit/e19dba8c2e465357c16929e5c61398d2525e70ca,106462765,microsoft/vscode-python,False,True,['#6308'],97
333,6115887e97899c09a8d19f828adadd2152e05137,[CI Checks] Add check for sources diff (#17541)//* [CI] Add check for package-lock version////* [CI] Add verify-source-changes check////* Add newline////* Remove error in case if package-lock doesn't exist////* Fix in verify package lock check////* Remove version check and update diff check////* Update checks template////* Update checks conditions////* Update output////* Update output////* Update output////* Update output////* Update output////* Add jsdoc////* Add safe exit in case of empty task_pattern variable////Co-authored-by: Kirill Ivlev <102740624+kirill-ivlev@users.noreply.github.com>,https://github.com/microsoft/azure-pipelines-tasks/commit/6115887e97899c09a8d19f828adadd2152e05137,27631673,microsoft/azure-pipelines-tasks,False,False,['#17541'],98
336,9441f131243abc07d900f8c9f68fc9bc79087486,Merge pull request #191 from microsoft/validate/libtemplate//Apply the Library.Template repo patterns,https://github.com/microsoft/vs-mef/commit/9441f131243abc07d900f8c9f68fc9bc79087486,89300492,microsoft/vs-mef,False,False,['#191'],99
337,f1df6523f878314e3261f0190ff2cd9c146dc917,"Zoma/json keyword (#2636)//* add schema for basic types testing////* fix bugs in array templates////* support format////* fix basic types and format issues////* add templates to support keyword format////* remove addMissing function////* update mergeAssets////* update boolean////* update standard.schema////* delete allmissing functions////* fix getPropertyValueText function////* support date-time////* move templates////* max min pattern////* implement max min and pattern////* update launch.json////* update date/time templates////* refactor pattern, max, min templates////* fix comments////* update getValueText function////Co-authored-by: Zongyang Ma <zoma@microsoft.com>",https://github.com/microsoft/BotBuilder-Samples/commit/f1df6523f878314e3261f0190ff2cd9c146dc917,68730444,microsoft/BotBuilder-Samples,False,False,['#2636'],100
340,a724ce3296959b70d3859d909faaebd3245d2524,"fix: include missing template exports, patterns, and utilities (#3091)//* fix: include missing template exports, patterns, and utilities////* export size utils////* export system colors and match media behavior////* export radio, radio group, slider, slider label",https://github.com/microsoft/fast/commit/a724ce3296959b70d3859d909faaebd3245d2524,123625732,microsoft/fast,False,False,['#3091'],101
341,a724ce3296959b70d3859d909faaebd3245d2524,"fix: include missing template exports, patterns, and utilities (#3091)//* fix: include missing template exports, patterns, and utilities////* export size utils////* export system colors and match media behavior////* export radio, radio group, slider, slider label",https://github.com/microsoft/fast-react/commit/a724ce3296959b70d3859d909faaebd3245d2524,278721810,microsoft/fast-react,False,False,['#3091'],102
344,196e19f8a2b60246ab3639683252ef278b6b5be4,Merge pull request #30 from AArnott/validate/lib.template//Apply Library.Template pattern,https://github.com/microsoft/vs-validation/commit/196e19f8a2b60246ab3639683252ef278b6b5be4,70063898,microsoft/vs-validation,False,False,['#30'],103
345,1b78fac052529a2da09ee5593fb9f7869a206882,Merge pull request #313 from AArnott/lib.template//Apply Library.Template pattern,https://github.com/microsoft/vs-streamjsonrpc/commit/1b78fac052529a2da09ee5593fb9f7869a206882,70068232,microsoft/vs-streamjsonrpc,False,False,['#313'],104
346,50b04ccd98c1f3ef4d26a040abc9f53e48a953aa,Merge pull request #528 from AArnott/lib.template//Apply Library.Template pattern,https://github.com/microsoft/vs-threading/commit/50b04ccd98c1f3ef4d26a040abc9f53e48a953aa,70068171,microsoft/vs-threading,False,False,['#528'],105
355,4595058501842ef1ef347e66ab13764c7f4f88ac,"Polymorphic Rules using Type.Any (#795)//* Type: don't allow None inside Type; update can_accept_value_of_type that ""Any"" can accept anything.//* cav_subst.py: replace_subtree copies types//* rewrites.py: rename Subst{Template=>Pattern} (pattern = template or replacement)//* SubstPattern re-calculates type of any Expr (node) created by substitution whose type involves Any//* Add rewrites_prim.py with index_of_build//* Add test of a case we can't handle with pytest.xfail//* test_parsed_rule_side_conditions: use isinstance with list (en-passante fix to #817)",https://github.com/microsoft/knossos-ksc/commit/4595058501842ef1ef347e66ab13764c7f4f88ac,191408255,microsoft/knossos-ksc,False,False,"['#795', '#817']",106
356,02f4aa8b3f2ccd769eaf9683a81347e59a9f6856,First draft of the Graph guidelines (#303)//* test commit////* Create Modelling with Subtypes Pattern.md////* Fixed formatting////* Check boxes////* Need formatting////* format testing////* formatting and TOC////* formatting////* Legend////* Formatting with icons////* Fixing legend////* Cleaning////* Combine behavior rules////* formatting////* Editing and alignment////* reordering////* Added formatting and patterns////* Added TOC////* Update graph/GuidelinesGraph.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* formatting////* moving to RFC 2119 conventions////* resource modeling////* icon updates////* domain model  image////* whiteboard picture////* cropped picture////* cropped picture////* generic context////* moved deprecation to standalone md////* formatting////* template update////* grammar////* first statement////* added finctions and actions////* Updated TOC////* editing////* added entity and complex////* type hierarchy////* patterns////* facets pattern////* example////* examples////* diagram update////* Update graph/Modelling with Facets Pattern.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* Update graph/Modelling with Facets Pattern.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* Update graph/Modelling with Facets Pattern.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* Update graph/Modelling with Facets Pattern.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* Update graph/GuidelinesGraph.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* removed Odata from breaking changes list////* fix for complex types////* versionsning////* updates////* added relationships////* added POST example////* Approach update////* applied Gareth's comments////* Update graph/GuidelinesGraph.md////Co-authored-by: Darrel <darrmi@microsoft.com>////* corrections////* updates////* removed variants and naming conv////* deprecation updates////* deprecation////* Update graph/GuidelinesGraph.md////Co-authored-by: Gareth Jones <garethj@microsoft.com>////* Update graph/GuidelinesGraph.md////Co-authored-by: Darrel <darrmi@microsoft.com>////Co-authored-by: Darrel <darrmi@microsoft.com>//Co-authored-by: Gareth Jones <garethj@microsoft.com>,https://github.com/microsoft/api-guidelines/commit/02f4aa8b3f2ccd769eaf9683a81347e59a9f6856,63188650,microsoft/api-guidelines,False,False,['#303'],107
357,2be72b820c0c7e79d9964360d077bcc26284ee11,Refactor Flask Endpoints into separate template to make generation smoother (#738)//* add grid merging to make consistent with pattern////* create flask endpoints templates,https://github.com/microsoft/WebTemplateStudio/commit/2be72b820c0c7e79d9964360d077bcc26284ee11,168244151,microsoft/WebTemplateStudio,False,False,['#738'],108
361,b48c07bf14f45e775692344b11c7dae958e0a0b7,Merge pull request #146 from microsoft/feature/visitor//visitor pattern for language writers,https://github.com/microsoft/kiota/commit/b48c07bf14f45e775692344b11c7dae958e0a0b7,323665366,microsoft/kiota,False,False,['#146'],109
365,e9a8a22771301c807548f70c9b5e613f591ca727,"Merged PR 2644: add a visitor pattern for code rewriting transforms.//add a visitor pattern for code rewriting transforms.//Related work items: #4442, #4496, #4644",https://github.com/microsoft/coyote/commit/e9a8a22771301c807548f70c9b5e613f591ca727,202449779,microsoft/coyote,False,False,"['#4442', '#4496', '#4644']",110
372,7bec658763c2b19da4118d185f6b3dc7b31848ca,Remove duplicate FileData entries after rebasing (#1098)//* Rebase FileLocations.////* Update visitor pattern to provide for dictionary entry visits.////* Remove unused property////* Fix build breaks.////* Fix up NotYetAutogenerated copy case.////* Minimize project file changes for excluding NotYetAutogenerated code,https://github.com/microsoft/sarif-sdk/commit/7bec658763c2b19da4118d185f6b3dc7b31848ca,45640472,microsoft/sarif-sdk,False,False,['#1098'],111
