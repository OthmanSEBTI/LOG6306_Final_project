sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
9a52cc8bcd580238f4a8b12036e698823847fd65,"Convert ReactLazy-test to waitFor pattern (#26304)//I'm in the process of codemodding our test suite to the waitFor pattern.//See #26285 for full context.////This module required a lot of manual changes so I'm doing it as its own//PR. The reason is that most of the tests involved simulating an async//import by wrapping them in `Promise.resolve()`, which means they would//immediately resolve the next time the microtask queue was flushed. I//rewrote the tests to resolve the simulated import explicitly.////While converting these tests, I also realized that the `waitFor` helpers//weren't properly waiting for the entire microtask queue to recursively//finish — if a microtask schedules another microtask, the subsequent one//wouldn't fire until after `waitFor` had resolved. To fix this, I used//the same strategy as `act` — wait for a real task to finish before//proceeding, such as a message event.",https://github.com/facebook/react/commit/9a52cc8bcd580238f4a8b12036e698823847fd65,10270250,facebook/react,False,False
1f5cdf8c77182fc51910787e48384ec4620dc40d,"Update Suspense fuzz tests to use `act` (#26498)//This updates the Suspense fuzz tester to use `act` to recursively flush//timers instead of doing it manually.////This still isn't great because ideally the fuzz tester wouldn't fake//timers at all. It should resolve promises using a custom queue instead//of Jest's fake timer queue, like we've started doing in our other//Suspense tests (i.e. the `resolveText` pattern). That's because our//internal `act` API (not the public one, the one we use in our tests)//uses Jest's fake timer queue as a way to force Suspense fallbacks to//appear.////However I'm not interested in upgrading this test suite to a better//strategy right now because if I were writing a Suspense fuzzer today I//would probably use an entirely different approach. So this is just an//incremental improvement to make it slightly less decoupled to React//implementation details.",https://github.com/facebook/react/commit/1f5cdf8c77182fc51910787e48384ec4620dc40d,10270250,facebook/react,False,False
ddba780c0cb44d75d41fc252d8212181040a3020,"fix: Change checkout cache strategy (#35259)//Summary:/This PR updates he cache strategy for the `checkout_with_cache command`.//The previous strategy was using three keys in descending priority order to restore from the cache:/* `<< parameters.checkout_base_cache_key >>-{{ arch }}-{{ .Branch }}-{{ .Revision }}`/* `<< parameters.checkout_base_cache_key >>-{{ arch }}-{{ .Branch }}`/*`<< parameters.checkout_base_cache_key >>-{{ arch }}`//When it saves, it always saves using the first key.//The restore works as it follows:/1. It tries to restore the cache using the first key/2. If it fails, it checks whether there is a cache hit for a key that matches the second key as a pattern/3. If it fails, it checks whether there is a cache hit for a key that matches the third pattern/4. Otherwise, it is a cache miss.//This does not work well. Imagine that you submit some code in commit `xxxx` for branch `abc`./The CI run the first time, it misses all the three keys and checks out the code normally./Then, it stores the checked out code in the `checkout_key-abc-xxxx` key.//Then, you submit a commit `yyyy` in the same branch./The CI starts, it tries with the key `checkout_key-abc-yyyy` but it misses/It tries with the key `checkout_key-abc` and it finds the cache for `checkout_key-abc-xxxx` and it restores it, forgetting about your changes.//While doing the release, we created a tag in a commit X. Then we manually had to remove it, but the CI had a cached version of .git with the tag for/the `0.71-stable` branch. And the release failed because the tag was already existing.//### Why this should work//With this solution, we are going to cache using the commit. If there is no cache for a specific commit, it will be a miss. It won't try to be smart and/retrieve the code from previous caches.//This should prevent stale caches and if we manually remove a tag, and then we do a new commit, it should work.//This is a good trade-off that allows to pay the checkout cost only for the first batch of jobs of the pipeline.//**NOTE:** This still won't work if we don't do a new commit.//## Changelog//[General] [Fixed] - Change Cache strategy to avoid cache bumps in Release//Pull Request resolved: https://github.com/facebook/react-native/pull/35259//Test Plan: 1. CircleCI must be green//Reviewed By: jacdebug//Differential Revision: D41120895//Pulled By: cipolleschi//fbshipit-source-id: 2b45da01803197dbe4a25a313a9dfc53a976d096",https://github.com/facebook/react-native/commit/ddba780c0cb44d75d41fc252d8212181040a3020,29028775,facebook/react-native,False,False
fe61ebd6c9f83a016edb5587ece9f2640d9d5dc8,"[new-env] Use refined value for initialization for identifiers in object destructuring patterns//Summary:/Right now in the new env, when we encounter an object destructuring patterns like `{a:{b:c}} = obj`, we have no understanding that `c` refers to `obj.a.b.c`, which is problematic for refinements as `obj.a.b.c` might be refined.//In the old env in [`destrucuring.ml`](https://github.com/facebook/flow/blob/309dcc932686fcf36fbcfae2fd3f8343f306bb99/src/typing/destructuring.ml#L110-L130), we build up an member expression as we go deeper into the object pattern, and use that to track refinements. This diff mirrors the same strategy, except that we only query for existing refinements when we reached the leaf of the pattern, and then use that refined value to initialize the id. Before querying the refinement, we will read the synthetic object, so that all the refinements, including those on `object` subexpressions, will be recorded and picked up by `destructuring.ml`//Changelog: [internal]//Reviewed By: jbrown215//Differential Revision: D35268179//fbshipit-source-id: 737d216b1750710022d5acb70fae0f0f203d6569",https://github.com/facebook/flow/commit/fe61ebd6c9f83a016edb5587ece9f2640d9d5dc8,25880891,facebook/flow,False,False
e96f741bcb157177a13eb2a547514a45ed5544d0,"[resolved-env] Use refined type if it exists when resolving a selector//Summary:/Changelog: [internal]//In D35268179 (https://github.com/facebook/flow/commit/fe61ebd6c9f83a016edb5587ece9f2640d9d5dc8), I implemented the support to make initialized names in an object destructuring pattern to read refined values in new-env. Here in resolved-env, we are currently always using destructuring to initialize the names without considering these possible refinements.//In this diff, I made the resolution of selector binding to first check whether the refinement exists. If it does, we directly return the refined type, and we will only fallback to normal destructuring if there is no refinement available. This strategy is consistent with the current implementation in destructuring.ml.//Reviewed By: mvitousek//Differential Revision: D37363784//fbshipit-source-id: d8690c083147f6dd6e42fd657d62176cbe05125b",https://github.com/facebook/flow/commit/e96f741bcb157177a13eb2a547514a45ed5544d0,25880891,facebook/flow,False,False
ca73087e18abcb8acb593686629d814c9a0644c4,"Add UnannotatedGlobalEnvironment.Overlay (update only)//Summary:/UnannotatedGlobalEnvironment is more complicated than ModuleTracker and AstEnvironment because - due to the wildcard import dependencies coming from preprocessing - it is the first layer where we have to start worrying about dependency fan-out.//As a result its update function needs to update the underlying AstEnvironment overlay and also filter down the invalidated_modules to only those that are ""owned"" by the overlay - this prevents us from fanning out unsaved changes to downstream wildcard imports.//For the same reason, this layer will eventually need a function that propagates parent updates, but that is out of scope for this diff: I want to get the basic functionality for an overlay (how does it behave given a static parent) in place before worrying about parent propagation.//The implementation of `read_only` here is nontrivial because there are so many data structures owned by `UnannotatedGlobalEnvironment`. The strategy is:/- for all functions of the form `all_.*`, we just use the parent environment; these functions are not used except by `pyre query`, debugging tools in `check`, and pysa - none of which should ever need overlay support/- for all other functions, we follow a standard pattern:/   - first do an ownership check for the key/   - if the key is not owned, proxy to the corresponding function on the parent/   - otherwise, use the read-only backed by our own `from_upstream_readonly` (which should contain only the overlay data, a ""skinny"" dataset)//Reviewed By: pradeep90//Differential Revision: D36992180//fbshipit-source-id: 63db0d82f6e317ee929ecca3558d994d5e102dce",https://github.com/facebook/pyre-check/commit/ca73087e18abcb8acb593686629d814c9a0644c4,110274488,facebook/pyre-check,False,False
689922dc8eb36a83bf0461408c202b5bd0d66924,"WL#5347: Refactor optimizer function at_sjmat_pos()/  /Renamed at_sjmat_pos() to semijoin_order_allows_materialization(), simplified/arguments to this function, and simplified the code slightly./Added Doxygen header./   /Descriptions of allowed table patterns for MaterializeLookup and/MaterializeScan were added to the function header of/setup_semijoin_dups_elimination(). Added Doxygen header./  /sql/sql_select.cc/  Rewritten at_sjmat_pos(), new name semijoin_order_allows_materialization./  Added description about use pattern for materialization strategies.//revid:roy.lyseng@sun.com-20100429121506-0vz5ofnwh2i548fw",https://github.com/facebook/mysql-5.6/commit/689922dc8eb36a83bf0461408c202b5bd0d66924,9454675,facebook/mysql-5.6,False,False
9fbf12be2c73617fb22829bb4c02b311346b491d,"Try to inline singleton pattern functions//Summary: We see a lot of code roughly of the form//  function getSingletonFoo() {/    static $instance = null;/    if ($instance === null) {/      // Do some stuff and set $instance./    }/    return $instance;/  }//Let's optimistically assume that such patterns are in fact singleton/patterns (as opposed to, say, some means of inter-method communication/to avoid threading arguments) and try to inline these checks.  The first/time we hit each callsite, we'll side-exit to do the call, and/subsequent calls will simply return the value at $instance, assuming the/checks still pass.//We also introduce a TransFlags struct which we thread through BindJmp/requests and into the translation routines so that we turn the inlining/off in the stub.//Presently, this inlining strategy is restricted to non-resumable/functions with no arguments passed and which don't return refs.//Reviewed By: bertrand//Differential Revision: D1344602",https://github.com/facebook/hhvm/commit/9fbf12be2c73617fb22829bb4c02b311346b491d,455600,facebook/hhvm,False,False
5abe7aa53bf9abe78c9446c1a4c0b515eb37ec6e,"Encapsulate intrusive OCaml value caching in RcOc//Summary:/The PositionedToken type wraps its implementation in an `Rc`, since tokens are shared between many nodes in a positioned CST (since each node holds on to references to the leading token in its first child and the trailing token in its last child). Originally, we preserved this sharing while converting to OCaml by maintaining a HashMap from the token address to the converted OCaml value in a SerializationContext. In {D16541139}, we improved performance by storing this mapping intrusively instead. AIUI, we used `mem::transmute` here rather than `Cell` because of the use of `catch_unwind` in the parser--since `Cell` does not implement `RefUnwindSafe`, we used unsafe code to hide our use of internal mutability from the compiler.//In {D17772800}, we are considering adding fields to RelativePath to implement the same intrusive-caching strategy. I'm proposing here that instead, we encapsulate this pattern in a type named `RcOc`, and use `RcOc` rather than `Rc` in situations where conversion-to-OCaml performance is critical. I did not find that `Cell` not being `RefUnwindSafe` was a problem for this implementation, so this diff just uses `Cell`s rather than transmutes.//Reviewed By: shiqicao, losvald//Differential Revision: D17955577//fbshipit-source-id: b33567f54914ac569ba26b61dcb6ca0d32e1d933",https://github.com/facebook/hhvm/commit/5abe7aa53bf9abe78c9446c1a4c0b515eb37ec6e,455600,facebook/hhvm,False,False
845398eecb173a718ae7730f4db9d2e723ab9c8a,"Bug#12664936: Same query executed as where subquery gives different/              results on in() compare #2//Step 1 of 2 - Refactoring//This is a local refactoring done before the actual bugfix./It makes get_best_combination() a public member function of class/JOIN, and splits the main work over a few smaller functions./It also changes the order of some evaluations so that compiled/semi-join information is now available in the JOIN_TAB objects at/an earlier stage./get_best_combination() should actually be private, because it is/only called from make_join_statistics(), which is a free function/that should also be a private member function of class JOIN.//sql/sql_select.cc/  get_best_combination() is refactored according to pseudo code:/   - Fix semi-join strategies after table order selection./   - Create the new JOIN_TAB array./   - A loop that initializes this JOIN_TAB array./   - A function set_semijoin_info() that sets semi-join information/     for the selected table order in the JOIN_TAB array./   - A function set_access_methods() that sets up access methods/     based on key information./   - Update dependencies between tables based on the selected/     key access patterns.//sql/sql_select.h/  Defined get_best_combination() as public member function of JOIN./  Created set_semijoin_info() and set_access_methods() as private/  member functions of class JOIN.",https://github.com/facebook/mysql-5.6/commit/845398eecb173a718ae7730f4db9d2e723ab9c8a,9454675,facebook/mysql-5.6,False,False
b11a6f4fa90ecfc581866fb9c6c4d307c9b369b1,"Bug#13541406: Wrong result with loosescan on select .. where .. in //To explain this problem, let's look at the query in the attached test://SELECT ot1.col_int_key AS field1/FROM t2 AS ot1, t2 AS ot2/WHERE (ot1.col_varchar_key, ot2.col_varchar_nokey) IN (/    SELECT it2.col_varchar_nokey, it1.col_varchar_key/    FROM t2 AS it1 JOIN t1 AS it2 ON it2.col_int_key = it1.pk);//The selected plan for this query is (abbreviated):/ ot2  ALL/ it1  index                      col_varchar_key  ... LooseScan/ it2  ref(it1.pk)                col_int_key      FirstMatch(it1)/ ot1  ref(it2.col_varchar_nokey) col_varchar_key  Using index//In English, this means:/- The outermost loop is over the outer table ot2./- For each row of ot2, we perform a loose scan over it1./  (Notice that we could have used a ref access using index/   col_varchar_key, but loosescan and ref access cannot be combined yet)./- We use FirstMatch on table it2 to weed out duplicate rows from the/  subquery./- We use a ref access to look up rows in ot1, based on values from it2.//However, this means that there is a dependency from it2 to ot1 and/FirstMatch is only able to handle dependencies to outer tables that/are earlier in the join prefix. Hence, LooseScan (combined with FirstMatch)/is not a valid strategy for this query.//The source of the problem is that get_bound_sj_equalities() sets the/zeroth bit in bound_sj_equalities, even though the Loose_scan_opt/function add_keyuse() performs a complete analysis of bound_sj_equalities/and handled_sj_equalities later. Setting the zeroth bit has fatal/consequences in few cases, because it is later overwritten or ignored,/but it did have consequences in this case.//Thus, the problem is solved by removing get_bound_sj_equalities() and/initializing bound_sj_equalities to the empty set. As for the question/on equality propagation inside the function, I do not think that is a/problem because separate keyuse objects are set up for individual/fields of a multiple equality.//mysql-test/include/subquery_sj.inc/  Added test case for bug#13541406./  Make sure that LooseScan is not selected.//mysql-test/r/subquery_sj_all.result/mysql-test/r/subquery_sj_all_bka.result/mysql-test/r/subquery_sj_all_bka_nixbnl.result/mysql-test/r/subquery_sj_all_bkaunique.result/mysql-test/r/subquery_sj_dupsweed.result/mysql-test/r/subquery_sj_dupsweed_bka.result/mysql-test/r/subquery_sj_dupsweed_bka_nixbnl.result/mysql-test/r/subquery_sj_dupsweed_bkaunique.result/mysql-test/r/subquery_sj_firstmatch.result/mysql-test/r/subquery_sj_firstmatch_bka.result/mysql-test/r/subquery_sj_firstmatch_bka_nixbnl.result/mysql-test/r/subquery_sj_firstmatch_bkaunique.result/mysql-test/r/subquery_sj_loosescan.result/mysql-test/r/subquery_sj_loosescan_bka.result/mysql-test/r/subquery_sj_loosescan_bka_nixbnl.result/mysql-test/r/subquery_sj_loosescan_bkaunique.result/mysql-test/r/subquery_sj_mat.result/mysql-test/r/subquery_sj_mat_bka.result/mysql-test/r/subquery_sj_mat_bka_nixbnl.result/mysql-test/r/subquery_sj_mat_bkaunique.result/mysql-test/r/subquery_sj_mat_nosj.result/mysql-test/r/subquery_sj_none.result/mysql-test/r/subquery_sj_none_bka.result/mysql-test/r/subquery_sj_none_bka_nixbnl.result/mysql-test/r/subquery_sj_none_bkaunique.result/  Added test case results for bug#13541406.//sql/sql_planner.cc/  Removed the function get_bound_sj_equalities() and initialized/  bound_sj_equalities to an empty set./  Comment updates.//sql/sql_select.h/  Comment updates in allowed table patterns for semi-join strategies.//sql/sql_select.h/  Fixed a minor documentation inconsistency.",https://github.com/facebook/mysql-5.6/commit/b11a6f4fa90ecfc581866fb9c6c4d307c9b369b1,9454675,facebook/mysql-5.6,False,False
694dfc9351ac171c70aa303243d19cacf31d9fa2,"WL#5561 - Enable semi-join transformation with outer join queries//mysql-test/include/join_cache.inc/  Turned off semi-join to preserve plan for an existing test.//mysql-test/include/subquery_sj.inc/  Added new tests for queries that combine outer join with semi-join./  See HLS of WL#5561 for a basic description of the new tests./  The tests are grouped according to the ""subquery patterns"" defined/  in the WL.//mysql-test/r/derived.result/  Test result changes//mysql-test/r/explain_json_all.result/  Test result changes//mysql-test/r/join_cache_bka.result/mysql-test/r/join_cache_bka_nixbnl.result/mysql-test/r/join_cache_bkaunique.result/mysql-test/r/join_cache_bnl.result/mysql-test/r/join_cache_nojb.result/  Turned off semi-join to preserve plan for an existing test.//mysql-test/r/join_outer.result/mysql-test/r/join_outer_bka.result/mysql-test/r/join_outer_bka_nixbnl.result/  Test result changes//mysql-test/r/subquery_all.result/mysql-test/r/subquery_all_bka.result/mysql-test/r/subquery_all_bka_nixbnl.result/mysql-test/r/subquery_mat.result/mysql-test/r/subquery_mat_all.result/  Some queries containing inner joins and outer joins that previously/  where executed as ""DEPENDENT SUBQUERY"" are now transformed/  to semi-joins.//mysql-test/r/subquery_sj_all.result/mysql-test/r/subquery_sj_all_bka.result/mysql-test/r/subquery_sj_all_bka_nixbnl.result/mysql-test/r/subquery_sj_all_bkaunique.result/mysql-test/r/subquery_sj_dupsweed.result/mysql-test/r/subquery_sj_dupsweed_bka.result/mysql-test/r/subquery_sj_dupsweed_bka_nixbnl.result/mysql-test/r/subquery_sj_dupsweed_bkaunique.result/mysql-test/r/subquery_sj_firstmatch.result/mysql-test/r/subquery_sj_firstmatch_bka.result/mysql-test/r/subquery_sj_firstmatch_bka_nixbnl.result/mysql-test/r/subquery_sj_firstmatch_bkaunique.result/mysql-test/r/subquery_sj_loosescan.result/mysql-test/r/subquery_sj_loosescan_bka.result/mysql-test/r/subquery_sj_loosescan_bka_nixbnl.result/mysql-test/r/subquery_sj_loosescan_bkaunique.result/mysql-test/r/subquery_sj_mat.result/mysql-test/r/subquery_sj_mat_bka.result/mysql-test/r/subquery_sj_mat_bka_nixbnl.result/mysql-test/r/subquery_sj_mat_bkaunique.result/mysql-test/r/subquery_sj_mat_nosj.result/mysql-test/r/subquery_sj_none.result/mysql-test/r/subquery_sj_none_bka.result/mysql-test/r/subquery_sj_none_bka_nixbnl.result/mysql-test/r/subquery_sj_none_bkaunique.result/  Contains new results for tests added in WL#5561./  Some queries containing inner joins and outer joins that previously/  where executed as ""DEPENDENT SUBQUERY"" are now transformed/  to semi-joins./  Some results are reordered because of the new plans.//mysql-test/r/subselect_innodb.result/  Some plans changed because of semi-join transformation.//mysql-test/r/type_time.result/  Turned off semi-join to preserve plan for an existing test.//mysql-test/r/user_var.result/  Test case results for bug#14058892.//mysql-test/r/view.result/  One result reordering because plan was changed.//mysql-test/suite/opt_trace/r/general_no_prot_all.result/mysql-test/suite/opt_trace/r/general_ps_prot_all.result/mysql-test/suite/opt_trace/r/general_no_prot_all.result/mysql-test/suite/opt_trace/r/general_ps_prot_all.result/  Changed optimizer trace because plans were changed.//mysql-test/t/join_outer.test/  Test case for bug#13980954.//mysql-test/t/type_time.test/  Turned off semi-join to preserve plan for an existing test.//mysql-test/t/user_var.test/  Test case for bug#14058892.//sql/item_func.cc/  Item_func::fix_fields() was called for a previously fixed item./  In order to avoid having yet another test in the caller, the/  DBUG_ASSERT(fixed == 0) was removed and fix_fields() will instead/  exit early when the item is already fixed./  See LLD section 2.1.//sql/item_subselect.cc/  Removed setting of const_item_cache from fix_after_pullout()./  Changed name of materialized subquery table from ""materialized subselect""/  to ""materialized-subquery"".//sql/sql_class.h/  Added field copy_field_count to class Semijoin_mat_exec.//sql/sql_executor.cc/  do_sj_dups_weedout(): Corrected bug in NULL handling when writing/  duplicate weedout row./  See LLD section 2.7./  evaluate_null_complemented_join_record(): Made sure that/  duplicate weedout table is properly reset also when we add a/  null complemented row./  See LLD section 2.6.//sql/sql_optimizer.cc/  record_semijoin_nests() was split out from simplify_joins(), because/  sometimes a semi-join nest was recorded twice./  Simplifying the complex simplify_joins() (sic) was also reasonable./  See LLD section 2.9./  semijoin_types_allow_materialization(): Small interface change./  optimize_semijoin_nests(): as a short-term measure, disallow/  materialization when there are dependencies to the outer tables./  See LLD section 2.2./  build_bitmap_for_nested_join(): Updated to use the new nj_xxx fields./  Record tables belonging in semi-join nests in the embedding outer join/  nest (if any)./  See LLD section 2.5./  convert_subquery_to_semijoin(): Removed disabling of semi-join/  transformation when there are outer joins in the outer query./  See LLD chapter 1./  convert_subquery_to_semijoin(): Made changes to on_expr to be/  reflected in the permanent data as well (prep_on_expr)./  See LLD section 2.4./  make_outerjoin_info(): Updated to use the new nj_xxx fields./  See LLD section 2.5.//sql/sql_optimizer.h/  Added definition of function set_prefix_tables().//sql/sql_planner.cc/  check_interleaving_with_nj(): Updated to ignore join nests without/  nj_map information, and use new nj_xxx fields./  backout_nj_sj_state(): Updated to use new nj_xxx fields.//sql/sql_select.cc/  setup_semijoin_dups_elimination(): Code that assures that duplicate/  weedout extends across all tables of an outer join operation./  See LLD section 2.8./  setup_join_buffering(): Eliminated use of join cache when there/  is an outer join operation and first match strategy is used.//sql/sql_select.h/  Added fields prefix_tables_map and added_tables_map to class/  JOIN_TAB.//sql/table.cc/  When resolving a view, call fix_fields() on the view's WHERE/  condition only once. This fix_fields() call enables some needed/  initial transformations to the condition, and is prerequisite to/  separate out the view check option. However for subsequent/  executions, the view condition is part of complete query condition,/  and will be resolved as part of this. There was a crash because of/  this, because fix_fields() did non-permanent transformations on/  subquery transformed to semi-join on second execution.//sql/table.h/  Replaced fields used to analyze nested joins with new ones:/  nj_total, nj_counter, nj_map./  See LLD section 2.5.",https://github.com/facebook/mysql-5.6/commit/694dfc9351ac171c70aa303243d19cacf31d9fa2,9454675,facebook/mysql-5.6,False,False
