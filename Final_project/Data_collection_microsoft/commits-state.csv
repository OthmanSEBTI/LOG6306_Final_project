sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
284da7c9d57b33abce253aed5fc19b02898f6e0c, chore(FluentProvider): implement useContextValues() pattern (#19341)//* chore(FluentProvider): implement useContextValues() pattern////* Change files////* Update packages/react-provider/src/components/FluentProvider/useFluentProviderContextValues.test.ts////Co-authored-by: ling1726 <lingfan.gao@microsoft.com>////* fix state////Co-authored-by: ling1726 <lingfan.gao@microsoft.com>,https://github.com/microsoft/fluentui/commit/284da7c9d57b33abce253aed5fc19b02898f6e0c,60537144,microsoft/fluentui,False,False
f438da600091adb8fee45a029db9aea70049d26f,Update Echobot to use Corebot state pattern (#1229)//* Update Echobot to use Corebot state pattern////* Fix Param description,https://github.com/microsoft/BotBuilder-Samples/commit/f438da600091adb8fee45a029db9aea70049d26f,68730444,microsoft/BotBuilder-Samples,False,False
9a197208c06356c5cdd03428ed08ecce1bec3c91,Fix zero or one when pattern contains loop back to start (#144)//* Fix ZeroOrOne when there are states transitioning back to the start state////* clean up,https://github.com/microsoft/Trill/commit/9a197208c06356c5cdd03428ed08ecce1bec3c91,150474379,microsoft/Trill,False,False
b99bd771626fbbf8b9b29ce312d4151968796826,"[mlir][Pattern] Refactor the Pattern class into a ""metadata only"" class//The Pattern class was originally intended to be used for solely matching operations, but that use never materialized. All of the pattern infrastructure uses RewritePattern, and the infrastructure for pure matching(Matchers.h) is implemented inline. This means that this class isn't a useful abstraction at the moment, so this revision refactors it to solely encapsulate the ""metadata"" of a pattern. The metadata includes the various state describing a pattern; benefit, root operation, etc. The API on PatternApplicator is updated to now operate on `Pattern`s as nothing special from `RewritePattern` is necessary.//This refactoring is also necessary for the upcoming use of PDL patterns alongside C++ rewrite patterns.//Differential Revision: https://reviews.llvm.org/D86258",https://github.com/microsoft/checkedc-clang/commit/b99bd771626fbbf8b9b29ce312d4151968796826,60645050,microsoft/checkedc-clang,False,False
3569dd5ff1c0f10e658131cf6a1d7fb18c4d1914,"make all onTurnError functions consistent (#967)//- use the load, clear, save pattern for samples that use state",https://github.com/microsoft/BotBuilder-Samples/commit/3569dd5ff1c0f10e658131cf6a1d7fb18c4d1914,68730444,microsoft/BotBuilder-Samples,False,False
4514d900b0dc8752e9dd96ce40984590eea2de91,Hoists visual editor selection state to Shell state (#1278)//* merge focused & drag selection as onSelect input////* add `focusedActions` as new shell state////* consume `focusedActions` in visual editor////* generate correct select ids in ObiEditor hook////* remove anti-pattern usage in ShellApi////* hoists 'selection' to Shell state////* consume the newly added 'visualEditorSelection' state in design page////* change editor selection judgement////* Fix bas merge,https://github.com/microsoft/BotFramework-Composer/commit/4514d900b0dc8752e9dd96ce40984590eea2de91,170615717,microsoft/BotFramework-Composer,False,False
cd4f38579576348d74c474329764dd969808009d,[PowerPC][NFC] Explicitly state types on FP SDAG patterns in anticipation of adding the f128 type//llvm-svn: 327319,https://github.com/microsoft/checkedc-clang/commit/cd4f38579576348d74c474329764dd969808009d,60645050,microsoft/checkedc-clang,False,False
6cc9786c3e47a6531c52e947d2c4d26315102810,"Uniformize access pattern to state.//We seem to be using *& quite consistently across the codebase./Replacing 2 occurences of **.//With this, `grep -R ""\*\*"" .` does not return instances of/accesses  to state anymore.//PiperOrigin-RevId: 210385345",https://github.com/microsoft/checkedc-clang/commit/6cc9786c3e47a6531c52e947d2c4d26315102810,60645050,microsoft/checkedc-clang,False,False
eb6698572623f7f704596949bfc2a6bdcc7940d1,[UpdateCCTestChecks] Detect function mangled name on separate line//Sometimes functions with large comment blocks in front of them have their/declarations output on several lines by c-index-test.  Hence the one-line/function name/line/mangled pattern will not work to detect them.  Break the/pattern up into two patterns and keep state after seeing the name/line/information until we finally see the mangled name.//Differential Revision: https://reviews.llvm.org/D68272//llvm-svn: 374078,https://github.com/microsoft/checkedc-clang/commit/eb6698572623f7f704596949bfc2a6bdcc7940d1,60645050,microsoft/checkedc-clang,False,False
1ba5ea67a30170053964a28f2f47aea4bb7f5ff1,"[mlir] Add a hook for initializing passes before execution and use it in the Canonicalizer//This revision adds a new `initialize(MLIRContext *)` hook to passes that allows for them to initialize any heavy state before the first execution of the pass. A concrete use case of this is with patterns that rely on PDL, given that PDL is compiled at run time it is imperative that compilation results are cached as much as possible. The first use of this hook is in the Canonicalizer, which has the added benefit of reducing the number of expensive accesses to the context when collecting patterns.//Differential Revision: https://reviews.llvm.org/D93147",https://github.com/microsoft/checkedc-clang/commit/1ba5ea67a30170053964a28f2f47aea4bb7f5ff1,60645050,microsoft/checkedc-clang,False,False
fa8cbfd8e84fb653ecb5f23fd506b39e58118dcb,Reduce the amount of state in the lowering code and drop old pattern ISel functions//llvm-svn: 30881,https://github.com/microsoft/checkedc-clang/commit/fa8cbfd8e84fb653ecb5f23fd506b39e58118dcb,60645050,microsoft/checkedc-clang,False,False
37d4d3bb4daf409102237132ae8e1db250da83be,"[lldb] [test/Register] Use initial state for write tests//Reset registers to their 'initial' state instead of a semi-random/pattern in write tests.  While the latter might have been helpful/while debugging failures (i.e. to distinguish unmodified registers/from mistakenly written zeroes), the former makes it possible to test/whether xstate_bv field is written correctly when using XSAVE.//With this change, the four relevant tests start failing on NetBSD/without D90105.//Differential Revision: https://reviews.llvm.org/D90114",https://github.com/microsoft/checkedc-clang/commit/37d4d3bb4daf409102237132ae8e1db250da83be,60645050,microsoft/checkedc-clang,False,False
e298e91a06df38fd624f9d2771909db07e937f05,Task/msal2 auth (#18)//* feat: upgrade to @azure/msal-browser////* chore: update readme to list msal-interactor package////* fix: readme typo////* refactor: MsalInteractor singleton////- remove duplicate singleton/instance state.////* chore: interactively bump package version////* refactor: msal-interactor////- use public constructor instead of singleton pattern.////* fix: spelling and add jsdoc comments,https://github.com/microsoft/essex-toolkit/commit/e298e91a06df38fd624f9d2771909db07e937f05,267420737,microsoft/essex-toolkit,False,False
6ce01cdcb48c67f3aec98423e0c1de077b234894,"Workaround for new OpenXR issue.  (#187)//* Workaround for new OpenXR issue. OpenXR is now returning a session subsystem, but the session always (incorrectly) reports tracking state = None. Ignoring.////* Update UPM generation files to v1.4.1.////* Add 1 second delay in bootstrap to give ASA Spatial Anchor Manager time to finish starting before trying to utilize it.////* Conditionally for Unity 2020.4 or newer, switch to new AddComponent<ARAnchor> pattern, from old anchrMgr.AddAnchor().//It looks like the AddComponent<ARAnchor> started working sometime between U2020.3.2f1 (doesn't work) and U2020.3.8f1 (does work).////* Update supported versions for ASA.",https://github.com/microsoft/MixedReality-WorldLockingTools-Unity/commit/6ce01cdcb48c67f3aec98423e0c1de077b234894,187043415,microsoft/MixedReality-WorldLockingTools-Unity,False,False
f752706506b4f53a68819eebb376bfc2da762557,Added Windows store file system watcher (#14577)//* Added Windows store file system watcher////* Use glob pattern matcher instead of regex////* Code reviews////* Code reviews////* Remove picomatch and use already existing minimatch////* Code reviews////* Correct python exe glob for python3.10////* Add a comment stating why we only capture python3.*.exes////* Refactor locator setup out of tests////* Correct glob////* Oops////* Cleanly indent,https://github.com/microsoft/vscode-python/commit/f752706506b4f53a68819eebb376bfc2da762557,106462765,microsoft/vscode-python,False,True
7bd75b630144ec639dbbf7bcb2797f48380b953b,"scudo: Add an API for disabling memory initialization per-thread.//Here ""memory initialization"" refers to zero- or pattern-init on/non-MTE hardware, or (where possible to avoid) memory tagging on MTE/hardware. With shared TSD the per-thread memory initialization state/is stored in bit 0 of the TLS slot, similar to PointerIntPair in LLVM.//Differential Revision: https://reviews.llvm.org/D87739",https://github.com/microsoft/checkedc-clang/commit/7bd75b630144ec639dbbf7bcb2797f48380b953b,60645050,microsoft/checkedc-clang,False,False
39503590e03d05e9e475fe84ce094d64bdea6975,Make it so you can format state values in patterns./Fixed a bug where a default date time would be considered a value.,https://github.com/microsoft/BotBuilder-Calling/commit/39503590e03d05e9e475fe84ce094d64bdea6975,95050150,microsoft/BotBuilder-Calling,False,False
39503590e03d05e9e475fe84ce094d64bdea6975,Make it so you can format state values in patterns./Fixed a bug where a default date time would be considered a value.,https://github.com/microsoft/BotBuilder-V3/commit/39503590e03d05e9e475fe84ce094d64bdea6975,148844296,microsoft/BotBuilder-V3,False,False
39503590e03d05e9e475fe84ce094d64bdea6975,Make it so you can format state values in patterns./Fixed a bug where a default date time would be considered a value.,https://github.com/microsoft/botframework-sdk/commit/39503590e03d05e9e475fe84ce094d64bdea6975,53092757,microsoft/botframework-sdk,False,False
2d098bea0361461f49f50c86d957dbbd69dc1e3b,[globalisel][docs] Rework the Legalizer page slightly//The legalizer page was in a fairly good state. I've mostly just inlined/some information as a note and removed a reference to potential future/work that I think is very unlikely to be done (it's very hard to tell if/a pattern or set of patterns fully covers a node due to C++ predicates).//Also added a note that 'selectable' doesn't mean that InstructionSelect/must do it.,https://github.com/microsoft/checkedc-clang/commit/2d098bea0361461f49f50c86d957dbbd69dc1e3b,60645050,microsoft/checkedc-clang,False,False
016659d5db758bbbf4a15123595e5942aec98e78,"fix: Update Automated Checks GroupItem HelpText to reflect IsExpanded state (#1203)//#### Details//Currently, the HelpText for the GroupItems in the Automated Checks ListView is always ""Press right arrow key to expand, enter or space to toggle children highlighting"", regardless of expanded/collapsed state. With this PR, it will now be ""Press left arrow key to collapse, enter or space to toggle children highlighting"" when the items are expanded. ////Example of NVDA reading these items now://- Collapsed://> 2 errors - A button must not support both the Invoke and Toggle patterns., all children highlighted  grouping  collapsed Press right arrow key to expand, enter or space to toggle children highlighting  1 of 6////- Expanded://> 2 errors - A button must not support both the Invoke and Toggle patterns., some children highlighted  grouping  expanded  Press left arrow key to collapse, enter or space to toggle children highlighting  1 of 6//////##### Motivation//Addresses ADO 1750592////##### Context//- It took a few tries to find the right place to put the `Trigger`////#### Pull request checklist//<!-- If a checklist item is not applicable to this change, write ""n/a"" in the checkbox -->////- [n/a] Run through of all [test scenarios](https://github.com/Microsoft/accessibility-insights-windows/blob/main/docs/Scenarios.md) completed?//- [x] Does this address an existing issue? If yes, Issue# - 1750592//- [n/a] Includes UI changes?//  - [x] Run the production version of Accessibility Insights for Windows against a version with changes.//  - [n/a] Attach any screenshots / GIF's that are applicable.////> Note: After the PR has been created, certain checks will be kicked off. All of these checks must pass before a merge.",https://github.com/microsoft/accessibility-insights-windows/commit/016659d5db758bbbf4a15123595e5942aec98e78,160750843,microsoft/accessibility-insights-windows,False,False
c396c044e6553d953dfda1e43533ba3918e2c88f,Match the op via isa instead of string compare.//* Match using isa/  - This limits the rewrite pattern to ops defined in op registry but that is probably better end state (esp. for additional verification).//PiperOrigin-RevId: 227598946,https://github.com/microsoft/checkedc-clang/commit/c396c044e6553d953dfda1e43533ba3918e2c88f,60645050,microsoft/checkedc-clang,False,False
a767ee5af05ce660fcb1ed4886141c39a16dccdc,"[InstCombine] make sure tests are providing coverage for the stated pattern; NFC//Without extra instructions and uses, swapMayExposeCSEOpportunities() would change/the icmp (as seen in the check lines), so we were not actually testing patterns /that should be handled by D41480.//llvm-svn: 324143",https://github.com/microsoft/checkedc-clang/commit/a767ee5af05ce660fcb1ed4886141c39a16dccdc,60645050,microsoft/checkedc-clang,False,False
467e95dae58b1507259468d512c89e93a1491f95,"[InstCombine] make sure tests are providing coverage for the stated pattern; NFC//Without extra instructions and uses, swapMayExposeCSEOpportunities() would change/the icmp (as seen in the check lines), so we were not actually testing patterns /that should be handled by D41480.///git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@324143 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/467e95dae58b1507259468d512c89e93a1491f95,29704274,microsoft/llvm,False,False
467e95dae58b1507259468d512c89e93a1491f95,"[InstCombine] make sure tests are providing coverage for the stated pattern; NFC//Without extra instructions and uses, swapMayExposeCSEOpportunities() would change/the icmp (as seen in the check lines), so we were not actually testing patterns /that should be handled by D41480.///git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@324143 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/467e95dae58b1507259468d512c89e93a1491f95,60644745,microsoft/checkedc-llvm,False,False
de8d3a7d94ab0e832fd9a6f7785976542979e6fd,[PowerPC][NFC] Explicitly state types on FP SDAG patterns in anticipation of adding the f128 type//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@327319 91177308-0d34-0410-b5e6-96231b3b80d8,https://github.com/microsoft/llvm/commit/de8d3a7d94ab0e832fd9a6f7785976542979e6fd,29704274,microsoft/llvm,False,False
a9e57e0eff635daad8c75f6c20b5a1860b17ab88,"Rework passing parent pointers into complexpatterns, I forgot/that complex patterns are matched after the entire pattern has/a structural match, therefore the NodeStack isn't in a useful/state when the actual call to the matcher happens.//llvm-svn: 114489",https://github.com/microsoft/checkedc-clang/commit/a9e57e0eff635daad8c75f6c20b5a1860b17ab88,60645050,microsoft/checkedc-clang,False,False
d847bc20b89679279e75412ddc51dc1d299da942,"Rework passing parent pointers into complexpatterns, I forgot/that complex patterns are matched after the entire pattern has/a structural match, therefore the NodeStack isn't in a useful/state when the actual call to the matcher happens.////git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@114489 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/d847bc20b89679279e75412ddc51dc1d299da942,29704274,microsoft/llvm,False,False
de8d3a7d94ab0e832fd9a6f7785976542979e6fd,[PowerPC][NFC] Explicitly state types on FP SDAG patterns in anticipation of adding the f128 type//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@327319 91177308-0d34-0410-b5e6-96231b3b80d8,https://github.com/microsoft/checkedc-llvm/commit/de8d3a7d94ab0e832fd9a6f7785976542979e6fd,60644745,microsoft/checkedc-llvm,False,False
d847bc20b89679279e75412ddc51dc1d299da942,"Rework passing parent pointers into complexpatterns, I forgot/that complex patterns are matched after the entire pattern has/a structural match, therefore the NodeStack isn't in a useful/state when the actual call to the matcher happens.////git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@114489 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/d847bc20b89679279e75412ddc51dc1d299da942,60644745,microsoft/checkedc-llvm,False,False
