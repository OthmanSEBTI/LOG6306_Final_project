sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
d633ef457e8ad765ae4a9cd428b41f478a535b26,Add builder pattern to Constraints,https://github.com/microsoft/lain/commit/d633ef457e8ad765ae4a9cd428b41f478a535b26,174432798,microsoft/lain,False,False
ca2efe689ac9e8e666f1569a23332f531a3b74c0,Get rid of builder-pattern,https://github.com/microsoft/vscode-pull-request-github/commit/ca2efe689ac9e8e666f1569a23332f531a3b74c0,134777298,microsoft/vscode-pull-request-github,False,False
a83f194ffeb4fa4ee57ad0413612b832dcd2ab9a,builder pattern fix,https://github.com/microsoft/project-rome/commit/a83f194ffeb4fa4ee57ad0413612b832dcd2ab9a,72044791,microsoft/project-rome,False,False
e88a9f035a46724dc020ec7c5d01d29a7c8e4483,Let's use builder-pattern to construct test fixtures.,https://github.com/microsoft/vscode-pull-request-github/commit/e88a9f035a46724dc020ec7c5d01d29a7c8e4483,134777298,microsoft/vscode-pull-request-github,False,False
e01dd442989bab823d19fb0aff2f453657c4bbbc,Merged PR 1509: Merge pafarley-builder-pattern-fix to master,https://github.com/microsoft/project-rome/commit/e01dd442989bab823d19fb0aff2f453657c4bbbc,72044791,microsoft/project-rome,False,False
8098db491eb98df84a28c6f795f5d2efdbd6ab39,"Refactor regexp creator (#184)//* it now should work in IE, but it needs optimizations////* second refactor shaves it from 139k to 67k////* all tests pass, one more pattern to convert////* uncommenting regex builders////* renaming, updating patterns",https://github.com/microsoft/powerquery-parser/commit/8098db491eb98df84a28c6f795f5d2efdbd6ab39,177661498,microsoft/powerquery-parser,False,False
90c861d7c2f5767ae85fb98b807a114931d77eca,[tf.data / Bigtable] Use builder pattern for client options//PiperOrigin-RevId: 204140674,https://github.com/microsoft/tensorflow-directml/commit/90c861d7c2f5767ae85fb98b807a114931d77eca,291217084,microsoft/tensorflow-directml,False,False
82dc6a878cb54bc67b150a28ff3eb0416f4417a2,Add fallback to native code op builder specification for patterns.//This allow for arbitrarily complex builder patterns which is meant to cover initial cases while the modelling is improved and long tail cases/cases for which expanding the DSL would result in worst overall system.//NFC just sorting the emit replace methods alphabetical in the class and file body.//PiperOrigin-RevId: 231890352,https://github.com/microsoft/checkedc-clang/commit/82dc6a878cb54bc67b150a28ff3eb0416f4417a2,60645050,microsoft/checkedc-clang,False,False
ab5f89bf930b2918232293820280c7eea5da690e,Rework Config.Builder.Build to return new each time (#109)//The expectation for a builder pattern seems to be that a new object should be created each time Build() is called. This change fixes the issue where Config.Builder.Build() would have returned the same object if Build() had been called multiple times.,https://github.com/microsoft/axe-windows/commit/ab5f89bf930b2918232293820280c7eea5da690e,182308830,microsoft/axe-windows,False,False
a5d79e5fa14f8c9aea9d731637e37f57598847ab,build: use Python3 for compiler-rt//compiler-rt is built in a unified configuration on some of the builders/which requires that this is updated to follow the same pattern as LLVM.,https://github.com/microsoft/checkedc-clang/commit/a5d79e5fa14f8c9aea9d731637e37f57598847ab,60645050,microsoft/checkedc-clang,False,False
9dd48c8ed47728ea35a225f4da793ba3af683f5c,Mark all x86 Int_ and _Int patterns as isCodeGenOnly so the disassembler table builder doesn't need to string match them to exclude them.//llvm-svn: 198323,https://github.com/microsoft/checkedc-clang/commit/9dd48c8ed47728ea35a225f4da793ba3af683f5c,60645050,microsoft/checkedc-clang,False,False
f643fabb525f797f574600d20b46c7aa0bd6c1ee,Revert [DAGCombine] Match more patterns for half word bswap//This reverts r373850 (git commit 25ba49824d2d4f2347b4a7cb1623600a76ce9433)//This patch appears to cause multiple codegen regression test failures - http://lab.llvm.org:8011/builders/clang-cmake-armv7-quick/builds/10680//llvm-svn: 373853,https://github.com/microsoft/checkedc-clang/commit/f643fabb525f797f574600d20b46c7aa0bd6c1ee,60645050,microsoft/checkedc-clang,False,False
78972572657e34b009398205e843613338a381d2,"Add binary broadcastable builder.//* Add common broadcastable binary adder in TF ops and use for a few ops;/  - Adding Sub, Mul here/* Change the prepare lowering to use TF variants;/* Add some more legalization patterns;//PiperOrigin-RevId: 233310952",https://github.com/microsoft/checkedc-clang/commit/78972572657e34b009398205e843613338a381d2,60645050,microsoft/checkedc-clang,False,False
359164f810282035b55e7b8bb7bbecb2ed0175d0,"[mlir][OpBuilder] Remove the vtable from OpBuilder in favor of using the listener pattern//The current OpBuilder has a set of virtual functions required by the fact that the PatternRewriter inherits from it for convenience. The PatternRewriter is required to know about IR mutations for correctness. This revision changes the relationship to be explicit by having users register a listener with the builder instead of using inheritance/vtables. This still requires that users properly transfer the listener when creating new builders, but has several benefits://* More than one builder can be created during pattern rewrites(assuming that the listener is properly forwarded)/* OpBuilder no longer requires a vtable, and thus does not incur the cost when a listener isn't present.//Differential Revision: https://reviews.llvm.org/D79206",https://github.com/microsoft/checkedc-clang/commit/359164f810282035b55e7b8bb7bbecb2ed0175d0,60645050,microsoft/checkedc-clang,False,False
db387eb770c24a931da1633469b7d3da29fefdb2,Fixing the layering in the base folder (#5308)//* removes more builder references////* remove builder from profiler////* formatting////* fix profiler dailog////* remove builder from oatuhdialog////* remove the rest of builder references////* formatting////* add more strict null checks to base////* enable strict tslint rules////* code layering of base////* wip////* working through changes to table data view////* fix tests////* update editabledropdown to not use layout service////* wip////* fix imports////* fix import////* fix compile error////* add more localization////* add comments to changes to import patterns////* add more import comments,https://github.com/microsoft/azuredatastudio/commit/db387eb770c24a931da1633469b7d3da29fefdb2,109200851,microsoft/azuredatastudio,False,False
69970defe095bfe5003511c9e655fb9f70bb40d8,Relax a FileCheck pattern to make it pass on Windows.//Should fix Windows bot failure:/http://lab.llvm.org:8011/builders/llvm-clang-lld-x86_64-scei-ps4-windows10pro-fast/builds/16956//llvm-svn: 331681,https://github.com/microsoft/checkedc-clang/commit/69970defe095bfe5003511c9e655fb9f70bb40d8,60645050,microsoft/checkedc-clang,False,False
f8cbd6591f8453ae2c015cbfffb66a1509ec3f32,"Fix Windows bot failures from r268627//Remove ""/"" path separator from expected pattern which should fix a/couple of Windows bots that have failed://http://lab.llvm.org:8011/builders/llvm-clang-lld-x86_64-scei-ps4-windows10pro-fast/builds/4816/http://bb.pgr.jp/builders/ninja-clang-i686-msc19-R/builds/2610//llvm-svn: 268629",https://github.com/microsoft/checkedc-clang/commit/f8cbd6591f8453ae2c015cbfffb66a1509ec3f32,60645050,microsoft/checkedc-clang,False,False
987fbae0add347b72a1d705ca6349e39549a25d5,"[mlir] StandardToLLVM: make one-to-one convresion pattern publicly available//Summary:/The Standard-to-LLVM dialect convresion has a set of utility classes that/simplify conversions, including patterns that provide one-to-one conversion/operation conversion with optional result packing. Expose these classes in a/public header so that conversions other than Standard-to-LLVM (e.g. vectors, or/LLVM-based intrinsics) could also use them. Since the patterns are implemented/as class templates and in order to keep the code size limited, keep the/implementation private by resorting to op identifiers instead of template-based/builders.//Differential Revision: https://reviews.llvm.org/D76864",https://github.com/microsoft/checkedc-clang/commit/987fbae0add347b72a1d705ca6349e39549a25d5,60645050,microsoft/checkedc-clang,False,False
31cfee60773c6277f652aab5fa1f8f824a551627,"Support variadic ops in declarative rewrite rules//This CL extends declarative rewrite rules to support matching and/generating ops with variadic operands/results. For this, the/generated `matchAndRewrite()` method for each pattern now are/changed to//* Use ""range"" types for the local variables used to store captured/  values (`operand_range` for operands, `ArrayRef<Value *>` for/  values, *Op for results). This allows us to have a unified way/  of handling both single values and value ranges./* Create local variables for each operand for op creation. If the/  operand is variadic, then a `SmallVector<Value*>` will be created/  to collect all values for that operand; otherwise a `Value*` will/  be created./* Use a collective result type builder. All result types are/  specified via a single parameter to the builder.//We can use one result pattern to replace multiple results of the/matched root op. When that happens, it will require specifying/types for multiple results. Add a new collective-type builder.//PiperOrigin-RevId: 264588559",https://github.com/microsoft/checkedc-clang/commit/31cfee60773c6277f652aab5fa1f8f824a551627,60645050,microsoft/checkedc-clang,False,False
f3e4aa8cdd207f377dd7a0e634bd288e3fb446a8,Use iPTR instead of i32 for extract_subvector/insert_subvector index in lowering and patterns. This makes it consistent with the incoming DAG nodes from the DAG builder.//llvm-svn: 163293,https://github.com/microsoft/checkedc-clang/commit/f3e4aa8cdd207f377dd7a0e634bd288e3fb446a8,60645050,microsoft/checkedc-clang,False,False
e9b4ad7391d88e7a81cb863ae5da78b2635080ea,"switch the constantexpr, target folder, and IRBuilder interfaces/for NSW/NUW binops to follow the pattern of exact binops.  This/allows someone to use Builder.CreateAdd(x, y, ""tmp"", MaybeNUW);//llvm-svn: 125270",https://github.com/microsoft/checkedc-clang/commit/e9b4ad7391d88e7a81cb863ae5da78b2635080ea,60645050,microsoft/checkedc-clang,False,False
2dfa00c0f4bd3d0de184df83d0c91ca24d6daee1,Add basic build crate for build.rs support (#154)//* Add basic build crate for build.rss support////* Use builder pattern////* Build in example////* Rebuild only if changed////* Support nuget////* Address PR feedback////* Last PR comments////Co-authored-by: Kenny Kerr <kekerr@microsoft.com>,https://github.com/microsoft/windows-rs/commit/2dfa00c0f4bd3d0de184df83d0c91ca24d6daee1,208102250,microsoft/windows-rs,False,False
7a62e35644ffb8eef9947b299f0b4d6fe999c637,"Use dag instead of list for operands to allow named operands.//Named operands allow generating builders with more meaningful names + lay the groundwork for allowing the specification of attributes as part of the inputs pattern of an op (which allows the declarative pattern rewrite generator to define ops with attributs). This is a minimal change that just changes how input operands are represented, changes to attributes in follow up and returnTypes later.//PiperOrigin-RevId: 225509805",https://github.com/microsoft/checkedc-clang/commit/7a62e35644ffb8eef9947b299f0b4d6fe999c637,60645050,microsoft/checkedc-clang,False,False
15869cb65bb23f98f52c1ff4f4fb3b5767fad104,"Fix Windows bot failures from r268627//Remove ""/"" path separator from expected pattern which should fix a/couple of Windows bots that have failed://http://lab.llvm.org:8011/builders/llvm-clang-lld-x86_64-scei-ps4-windows10pro-fast/builds/4816/http://bb.pgr.jp/builders/ninja-clang-i686-msc19-R/builds/2610//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@268629 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/15869cb65bb23f98f52c1ff4f4fb3b5767fad104,60644745,microsoft/checkedc-llvm,False,False
15869cb65bb23f98f52c1ff4f4fb3b5767fad104,"Fix Windows bot failures from r268627//Remove ""/"" path separator from expected pattern which should fix a/couple of Windows bots that have failed://http://lab.llvm.org:8011/builders/llvm-clang-lld-x86_64-scei-ps4-windows10pro-fast/builds/4816/http://bb.pgr.jp/builders/ninja-clang-i686-msc19-R/builds/2610//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@268629 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/15869cb65bb23f98f52c1ff4f4fb3b5767fad104,29704274,microsoft/llvm,False,False
311af4abf3ac0f3ccfcad3494b5ac87ef6220ebe,"Const fold splat vectors/tensors in standard add, sub, and mul ops//The const folding logic is structurally similar, so use a template/to abstract the common part.//Moved mul(x, 0) to a legalization pattern to be consistent with/mul(x, 1).//Also promoted getZeroAttr() to be a method on Builder since it is/expected to be frequently used.//PiperOrigin-RevId: 228891989",https://github.com/microsoft/checkedc-clang/commit/311af4abf3ac0f3ccfcad3494b5ac87ef6220ebe,60645050,microsoft/checkedc-clang,False,False
8174281b939481f0d734b9a4614243dc93fd5f6b,"Revert r333226 ""[ValueTracking] Teach computeKnownBits that the result of an absolute value pattern that uses nsw flag is always positive.""//This breaks some libFuzzer tests. http://lab.llvm.org:8011/builders/sanitizer-x86_64-linux-fuzzer/builds/15589/steps/check-fuzzer/logs/stdio//Reverting to investigate//llvm-svn: 333253",https://github.com/microsoft/checkedc-clang/commit/8174281b939481f0d734b9a4614243dc93fd5f6b,60645050,microsoft/checkedc-clang,False,False
b226f6bedd59bd25c33280a1eccf447ab03c700b,Relax a FileCheck pattern to make it pass on Windows.//Should fix Windows bot failure:/http://lab.llvm.org:8011/builders/llvm-clang-lld-x86_64-scei-ps4-windows10pro-fast/builds/16956//git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@331681 91177308-0d34-0410-b5e6-96231b3b80d8,https://github.com/microsoft/checkedc-clang/commit/b226f6bedd59bd25c33280a1eccf447ab03c700b,60645050,microsoft/checkedc-clang,False,False
84a74917968b784e68e419fa31bc4e385d650f72,"Revert r333226 ""[ValueTracking] Teach computeKnownBits that the result of an absolute value pattern that uses nsw flag is always positive.""//This breaks some libFuzzer tests. http://lab.llvm.org:8011/builders/sanitizer-x86_64-linux-fuzzer/builds/15589/steps/check-fuzzer/logs/stdio//Reverting to investigate//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@333253 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/84a74917968b784e68e419fa31bc4e385d650f72,60644745,microsoft/checkedc-llvm,False,False
84a74917968b784e68e419fa31bc4e385d650f72,"Revert r333226 ""[ValueTracking] Teach computeKnownBits that the result of an absolute value pattern that uses nsw flag is always positive.""//This breaks some libFuzzer tests. http://lab.llvm.org:8011/builders/sanitizer-x86_64-linux-fuzzer/builds/15589/steps/check-fuzzer/logs/stdio//Reverting to investigate//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@333253 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/84a74917968b784e68e419fa31bc4e385d650f72,29704274,microsoft/llvm,False,False
