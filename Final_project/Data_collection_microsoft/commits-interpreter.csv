sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
dc5812c083e967b2adf1c085422d6539e2f409b3,Refresh list of interpreters if python env is created in workspace (#3024)//* Refresh list of interpreters if venv is created in workspace//* Remove check//* Add tests//* Add news entry//* Skip test if not unit test//* Add functional tests//* Get DI container from Extension api//* Use RelativePattern as pattern string does not work on Windows//* Dynamic venv dirs//* Skip python 2,https://github.com/microsoft/vscode-jupyter/commit/dc5812c083e967b2adf1c085422d6539e2f409b3,294546561,microsoft/vscode-jupyter,False,False
dc5812c083e967b2adf1c085422d6539e2f409b3,Refresh list of interpreters if python env is created in workspace (#3024)//* Refresh list of interpreters if venv is created in workspace//* Remove check//* Add tests//* Add news entry//* Skip test if not unit test//* Add functional tests//* Get DI container from Extension api//* Use RelativePattern as pattern string does not work on Windows//* Dynamic venv dirs//* Skip python 2,https://github.com/microsoft/vscode-python/commit/dc5812c083e967b2adf1c085422d6539e2f409b3,106462765,microsoft/vscode-python,False,True
d289a97f91443177b605926668512479c2cee37b,"[mlir][PDL] Add a PDL Interpreter Dialect//The PDL Interpreter dialect provides a lower level abstraction compared to the PDL dialect, and is targeted towards low level optimization and interpreter code generation. The dialect operations encapsulates low-level pattern match and rewrite ""primitives"", such as navigating the IR (Operation::getOperand), creating new operations (OpBuilder::create), etc. Many of the operations within this dialect also fuse branching control flow with some form of a predicate comparison operation. This type of fusion reduces the amount of work that an interpreter must do when executing.//An example of this representation is shown below://```mlir/// The following high level PDL pattern:/pdl.pattern : benefit(1) {/  %resultType = pdl.type/  %inputOperand = pdl.input/  %root, %results = pdl.operation ""foo.op""(%inputOperand) -> %resultType/  pdl.rewrite %root {/    pdl.replace %root with (%inputOperand)/  }/}//// May be represented in the interpreter dialect as follows:/module {/  func @matcher(%arg0: !pdl.operation) {/    pdl_interp.check_operation_name of %arg0 is ""foo.op"" -> ^bb2, ^bb1/  ^bb1:/    pdl_interp.return/  ^bb2:/    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb3, ^bb1/  ^bb3:/    pdl_interp.check_result_count of %arg0 is 1 -> ^bb4, ^bb1/  ^bb4:/    %0 = pdl_interp.get_operand 0 of %arg0/    pdl_interp.is_not_null %0 : !pdl.value -> ^bb5, ^bb1/  ^bb5:/    %1 = pdl_interp.get_result 0 of %arg0/    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6, ^bb1/  ^bb6:/    pdl_interp.record_match @rewriters::@rewriter(%0, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0]), root(""foo.op"") -> ^bb1/  }/  module @rewriters {/    func @rewriter(%arg0: !pdl.value, %arg1: !pdl.operation) {/      pdl_interp.replace %arg1 with(%arg0)/      pdl_interp.return/    }/  }/}/```//Differential Revision: https://reviews.llvm.org/D84579",https://github.com/microsoft/checkedc-clang/commit/d289a97f91443177b605926668512479c2cee37b,60645050,microsoft/checkedc-clang,False,False
47c6f6d43df659cdeb4b2051a68846e36259cca1,Decoupling of lock-related code from the core of ScriptInterpreterPython. All that concerns locking the Python interpreter is now delegated to the internal ScriptInterpreterPython::Locker class. Several changes in ScriptInterpreterPython to accommodate this new pattern.//llvm-svn: 142802,https://github.com/microsoft/checkedc-clang/commit/47c6f6d43df659cdeb4b2051a68846e36259cca1,60645050,microsoft/checkedc-clang,False,False
8a1ca2cd347cf80b377b36d1a7af3f31ec5b575e,"[mlir] Add a conversion pass between PDL and the  PDL Interpreter Dialect//The conversion between PDL and the interpreter is split into several different parts./** The Matcher://The matching section of all incoming pdl.pattern operations is converted into a predicate tree and merged. Each pattern is first converted into an ordered list of predicates starting from the root operation. A predicate is composed of three distinct parts:/* Position/  - A position refers to a specific location on the input DAG, i.e. an/    existing MLIR entity being matched. These can be attributes, operands,/    operations, results, and types. Each position also defines a relation to/    its parent. For example, the operand `[0] -> 1` has a parent operation/    position `[0]` (the root)./* Question/  - A question refers to a query on a specific positional value. For/  example, an operation name question checks the name of an operation/  position./* Answer/  - An answer is the expected result of a question. For example, when/  matching an operation with the name ""foo.op"". The question would be an/  operation name question, with an expected answer of ""foo.op"".//After the predicate lists have been created and ordered(based on occurrence of common predicates and other factors), they are formed into a tree of nodes that represent the branching flow of a pattern match. This structure allows for efficient construction and merging of the input patterns. There are currently only 4 simple nodes in the tree:/* ExitNode: Represents the termination of a match/* SuccessNode: Represents a successful match of a specific pattern/* BoolNode/SwitchNode: Branch to a specific child node based on the expected answer to a predicate question.//Once the matcher tree has been generated, this tree is walked to generate the corresponding interpreter operations.// ** The Rewriter:/The rewriter portion of a pattern is generated in a very straightforward manor, similarly to lowerings in other dialects. Each PDL operation that may exist within a rewrite has a mapping into the interpreter dialect. The code for the rewriter is generated within a FuncOp, that is invoked by the interpreter on a successful pattern match. Referenced values defined in the matcher become inputs the generated rewriter function.//An example lowering is shown below://```mlir/// The following high level PDL pattern:/pdl.pattern : benefit(1) {/  %resultType = pdl.type/  %inputOperand = pdl.input/  %root, %results = pdl.operation ""foo.op""(%inputOperand) -> %resultType/  pdl.rewrite %root {/    pdl.replace %root with (%inputOperand)/  }/}//// is lowered to the following:/module {/  // The matcher function takes the root operation as an input./  func @matcher(%arg0: !pdl.operation) {/    pdl_interp.check_operation_name of %arg0 is ""foo.op"" -> ^bb2, ^bb1/  ^bb1:/    pdl_interp.return/  ^bb2:/    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb3, ^bb1/  ^bb3:/    pdl_interp.check_result_count of %arg0 is 1 -> ^bb4, ^bb1/  ^bb4:/    %0 = pdl_interp.get_operand 0 of %arg0/    pdl_interp.is_not_null %0 : !pdl.value -> ^bb5, ^bb1/  ^bb5:/    %1 = pdl_interp.get_result 0 of %arg0/    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6, ^bb1/  ^bb6:/    // This operation corresponds to a successful pattern match./    pdl_interp.record_match @rewriters::@rewriter(%0, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0]), root(""foo.op"") -> ^bb1/  }/  module @rewriters {/    // The inputs to the rewriter from the matcher are passed as arguments./    func @rewriter(%arg0: !pdl.value, %arg1: !pdl.operation) {/      pdl_interp.replace %arg1 with(%arg0)/      pdl_interp.return/    }/  }/}/```//Differential Revision: https://reviews.llvm.org/D84580",https://github.com/microsoft/checkedc-clang/commit/8a1ca2cd347cf80b377b36d1a7af3f31ec5b575e,60645050,microsoft/checkedc-clang,False,False
abfd1a8b3bc5ad8516a83c3ae7ba9f16032525ad,"[mlir][PDL] Add support for PDL bytecode and expose PDL support to OwningRewritePatternList//PDL patterns are now supported via a new `PDLPatternModule` class. This class contains a ModuleOp with the pdl::PatternOp operations representing the patterns, as well as a collection of registered C++ functions for native constraints/creations/rewrites/etc. that may be invoked via the pdl patterns. Instances of this class are added to an OwningRewritePatternList in the same fashion as C++ RewritePatterns, i.e. via the `insert` method.//The PDL bytecode is an in-memory representation of the PDL interpreter dialect that can be efficiently interpreted/executed. The representation of the bytecode boils down to a code array(for opcodes/memory locations/etc) and a memory buffer(for storing attributes/operations/values/any other data necessary). The bytecode operations are effectively a 1-1 mapping to the PDLInterp dialect operations, with a few exceptions in cases where the in-memory representation of the bytecode can be more efficient than the MLIR representation. For example, a generic `AreEqual` bytecode op can be used to represent AreEqualOp, CheckAttributeOp, and CheckTypeOp.//The execution of the bytecode is split into two phases: matching and rewriting. When matching, all of the matched patterns are collected to avoid the overhead of re-running parts of the matcher. These matched patterns are then considered alongside the native C++ patterns, which rewrite immediately in-place via `RewritePattern::matchAndRewrite`,  for the given root operation. When a PDL pattern is matched and has the highest benefit, it is passed back to the bytecode to execute its rewriter.//Differential Revision: https://reviews.llvm.org/D89107",https://github.com/microsoft/checkedc-clang/commit/abfd1a8b3bc5ad8516a83c3ae7ba9f16032525ad,60645050,microsoft/checkedc-clang,False,False
d8b840d50c3b10bfd6ac4fabf2d07c1de0759cbc,1944 Crash in analyzer when analyzing Jython/Replaces callable specializations with safer pattern.//1945 Scrapers do not support Jython/Adds import of __builtin__/builtins as __builtins__ if necessary to BuiltinScraper.py./Removes type check from generate_module().//1977 Lambdas in annotations not correctly added to AST/Ensures PythonNameBinder correctly adds annotations to the AST./Fixes parser including return annotation span in function body./Adds tests for annotations.//Adds Jython as a detectable interpreter for tests./Fixes ProcessOutputTests to try all available interpreters./Adds null checks to PythonToolsInstallPath.GetFromRegistry/Adds missing CPython 3.4 test,https://github.com/microsoft/PTVS/commit/d8b840d50c3b10bfd6ac4fabf2d07c1de0759cbc,32487763,microsoft/PTVS,False,False
ff2743bf047deac7ef6cc6c3efd30ff05e55b2ad,"[libTooling] In Transformer, allow atomic changes to span multiple files.//Summary:/Currently, all changes returned by a single application of a rule must fit in/one atomic change and therefore must apply to one file. However, there are/patterns in which a single rule will want to modify multiple files; for example,/a header and implementation to change a declaration and its definition. This/patch relaxes Transformer, libTooling's interpreter of RewriteRules, to support/multiple changes.//Reviewers: gribozavr//Subscribers: mgrang, jfb, cfe-commits//Tags: #clang//Differential Revision: https://reviews.llvm.org/D80239",https://github.com/microsoft/checkedc-clang/commit/ff2743bf047deac7ef6cc6c3efd30ff05e55b2ad,60645050,microsoft/checkedc-clang,False,False
850de7171cb5a56afc31ee1359462266e117292c,"Merge back from release to main (#14758)//* Cherry pick from main (#14644)////* Update shipped wheels version (#14615)////* Update shipped wheels version////* News item////* Remove redundant files (#14620)////* Add extension dependencies at build time (#14636)////* Use Node 12.15 in Insiders and Release GitHub Actions (#14641)////* Use Node 12.15 on all Insiders and Release GitHub Actions jobs (#14642)////Co-authored-by: Joyce Er <joyceerhuiling@gmail.com>////* Cherry pic fixes into release for tests. (#14673)////* Added FSWatching base class and made related changes (#14605)////* Add FSWatching locator base class////* Correct glob pattern to not match python3.2whoa////* Add documentation of python binary watcher////* Fix lint errors////* Update ignore list////* Add disposable registry////* Modify FSWatching Locator////* Code reviews////* Use string[]////* Remove list disposable getter////* Fix failing global virtual env watcher tests (#14633)////Co-authored-by: Kartik Raj <karraj@microsoft.com>////* Version, change log and cherrypicks for nov release (#14696)////* change log updates////* Update gifs////* Fix for interpreter selection (#14693)////* Fix for interpreter selection////* Fix linting errors////* Minor tweak to property removal////* Cherry pick ""Bind function to correct this for workspace syms"" (#14743)////* Fix #14674: Enable overriding ""pythonPath"" in the launcher////Fix #12462: Update launch.json schema to add ""python"" and remove ""pythonPath""////Split the ""pythonPath"" debug property into ""python"", ""debugAdapterPython"", and ""debugLauncherPython"".////Do most debug config validation on fully expanded property values via resolveDebugConfigurationWithSubstitutedVariables().////Add fixups for legacy launch.json with ""pythonPath"".////* Point release change log and version update (#14750)////* Point release change log and version update////* Fix process picker (#14700)////* Workaround VSCode bug for process picker////* Fix how we pass in icons to VSCode////* update change log with cherry pick////Co-authored-by: Kartik Raj <karraj@microsoft.com>////Co-authored-by: Joyce Er <joyceerhuiling@gmail.com>//Co-authored-by: Kartik Raj <karraj@microsoft.com>//Co-authored-by: Jake Bailey <5341706+jakebailey@users.noreply.github.com>//Co-authored-by: Pavel Minaev <pminaev@microsoft.com>",https://github.com/microsoft/vscode-python/commit/850de7171cb5a56afc31ee1359462266e117292c,106462765,microsoft/vscode-python,False,True
360cc3188db5f5b65c7fcddba0b2e38fd3483d15,"Implementing the notion of externally-acquirable ScriptInterpreter lock/With this notion, if parties outside the ScriptInterpreter itself need to acquire a lock on script APIs, they can do so by a pattern like this://{/auto lock = interpeter->AcquireInterpreterLock();/// do whatever you need to do.../} // lock will automatically be released here//This might be useful for classes that use the Python convenience objects (e.g. PythonDictionary) to ensure they keep the underlying interpreter in a safe and controlled condition while they call through the C API functions/Of course, the ScriptInterpreter still manages its internal locking correctly when necessary :-)//llvm-svn: 178189",https://github.com/microsoft/checkedc-clang/commit/360cc3188db5f5b65c7fcddba0b2e38fd3483d15,60645050,microsoft/checkedc-clang,False,False
dee983d382b9afb1d8f1182efdbfb03a45604fa0,"939 enable C++ like intellisense/Adds FuzzyComparer to compare strings against patterns./Adds DynamicallyVisibleCompletion, which is a regular Completion with a Visible attribute for use with filtering/Replaces PythonCompletionSet with one that uses a fuzzy search to select and filter the displayed items/Removed prefix filtering from completions/Changes default completion settings to show the union of types, to filter completions and to hide advanced types/Adds Filter list based on search string option to Text Editor-Advanced/Updates Navigate To window to use FuzzyComparer and regex if search string starts and ends with '/'/Fixes two instances of DjangoIntellisenseController being created/Fixes path to Django.targets file in test data/Improves output for ReplWindow tests to include interpreter name/Adds MockTrackingPoint to TestUtilities",https://github.com/microsoft/PTVS/commit/dee983d382b9afb1d8f1182efdbfb03a45604fa0,32487763,microsoft/PTVS,False,False
4a000883c76b751e1edc1542337b6cf62a1f2996,"[LoopSimplify] Re-instate r306081 with a bug fix w.r.t. indirectbr.//This was reverted in r306252, but I already had the bug fixed and was/just trying to form a test case.//The original commit factored the logic for forming dedicated exits/inside of LoopSimplify into a helper that could be used elsewhere and/with an approach that required fewer intermediate data structures. See/that commit for full details including the change to the statistic, etc.//The code looked fine to me and my reviewers, but in fact didn't handle/indirectbr correctly -- it left the 'InLoopPredecessors' vector dirty.//If you have code that looks *just* right, you can end up leaking these/predecessors into a subsequent rewrite, and crash deep down when trying/to update PHI nodes for predecessors that don't exist.//I've added an assert that makes the bug much more obvious, and then/changed the code to reliably clear the vector so we don't get this bug/again in some other form as the code changes.//I've also added a test case that *does* manage to catch this while also/giving some nice positive coverage in the face of indirectbr.//The real code that found this came out of what I think is CPython's/interpreter loop, but any code with really ""creative"" interpreter loops/mixing indirectbr and other exit paths could manage to tickle the bug./I was hard to reduce the original test case because in addition to/having a particular pattern of IR, the whole thing depends on the order/of the predecessors which is in turn depends on use list order. The test/case added here was designed so that in multiple different predecessor/orderings it should always end up going down the same path and tripping/the same bug. I hope. At least, it tripped it for me without/manipulating the use list order which is better than anything bugpoint/could do...//llvm-svn: 306257",https://github.com/microsoft/checkedc-clang/commit/4a000883c76b751e1edc1542337b6cf62a1f2996,60645050,microsoft/checkedc-clang,False,False
5a62abf88ed17d369545a4e2a1aec4304d2bd18a,"Fix ConvenienceVariablesCase.test_with_dsym_and_run_command test after r227285//Summary:/This fixes test_with_dsym_and_run_command and test_with_dwarf_and_run_commands tests after r227285: ""SBThread::GetDescription should use the Thread format instead of making up""//log:/```/======================================================================/FAIL: test_with_dsym_and_run_command (TestConvenienceVariables.ConvenienceVariablesCase)/Test convenience variables lldb.debugger, lldb.target, lldb.process, lldb.thread, and lldb.frame./----------------------------------------------------------------------/Traceback (most recent call last):/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 456, in wrapper/    return func(self, *args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 612, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 18, in test_with_dsym_and_run_command/    self.convenience_variables()/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 83, in convenience_variables/    patterns = ['SBThread: tid = 0x[0-9a-f]+'])/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 2091, in expect/    msg if msg else EXP_MSG(str, exe))/AssertionError: False is not True : 'print lldb.thread/thread #1: tid = 0x80d885, 0x0000000100000f4d a.out`main(argc=1, argv=0x00007fff5fbff078) + 29 at main.c:4, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1/' matches expected result/Config=x86_64-clang/======================================================================/FAIL: test_with_dwarf_and_run_commands (TestConvenienceVariables.ConvenienceVariablesCase)/      Test convenience variables lldb.debugger, lldb.target, lldb.process, lldb.thread, and lldb.frame./----------------------------------------------------------------------/Traceback (most recent call last):/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 473, in wrapper/    return func(self, *args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 641, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 612, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 537, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 537, in wrapper/    func(*args, **kwargs)/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 28, in test_with_dwarf_and_run_commands/    self.convenience_variables()/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/functionalities/embedded_interpreter/TestConvenienceVariables.py"", line 83, in convenience_variables/    patterns = ['SBThread: tid = 0x[0-9a-f]+'])/  File ""/Users/testuser/build/workspace/LLDB_master_release_OSX/llvm_master/tools/lldb/test/lldbtest.py"", line 2091, in expect/    msg if msg else EXP_MSG(str, exe))/AssertionError: False is not True : 'print lldb.thread/thread #1: tid = 0x80d8d3, 0x0000000100000f4d a.out`main(argc=1, argv=0x00007fff5fbff078) + 29 at main.c:4, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1/' matches expected result/Config=x86_64-clang/```///Reviewers: zturner, jingham, abidh, clayborg//Subscribers: abidh, lldb-commits, jingham, clayborg, zturner//Differential Revision: http://reviews.llvm.org/D7464//llvm-svn: 228415",https://github.com/microsoft/checkedc-clang/commit/5a62abf88ed17d369545a4e2a1aec4304d2bd18a,60645050,microsoft/checkedc-clang,False,False
6bc3fe8e7e172d5584e529a04cf9eec946428768,"tools: mark 'test_vmalloc.sh' executable//Several of these scripts have come in as old-fashioned patches, and in/the process lost the executable bit.  In most cases it doesn't matter,/since the test infrastructure will explicitly execute them using the/proper shell interpreter, but at least in the case of the new vmalloc/test, the lack of execurable bit caused the test to fail with//    ./run_vmtests: line 217: ./test_vmalloc.sh: Permission denied//because of the lacking exectuable permissions bit.//This patch fixes that up.//NOTE! A simple script to look for non-executable scripts in the kernel,/something like//    git ls-files --stage -- '*.sh' |/        grep 100644 |/        cut -f2 |/        xargs grep -l '#!'//will show that there's a lot of other files that _look_ like executable/shell scripts, but don't have the executable bit set.  I considered just/scripting them all to be executable, but since it looks like the common/pattern is to not really require it, I'm just doing the minimal fix as/pointed out by the kernel test robot.//Fixes: a05ef00c9790 (""selftests/vm: add script helper for CONFIG_TEST_VMALLOC_MODULE"")/Reported-by: kernel test robot <rong.a.chen@intel.com>/Cc: Andrew Morton <akpm@linux-foundation.org>/Cc: Uladzislau Rezki <urezki@gmail.com>/Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",https://github.com/microsoft/WSL2-Linux-Kernel/commit/6bc3fe8e7e172d5584e529a04cf9eec946428768,187922067,microsoft/WSL2-Linux-Kernel,False,False
e6e2bb38428822f9183634cde2c8543512ee8d7d,"Rework LLDB system initialization.//In an effort to reduce binary size for components not wishing to/link against all of LLDB, as well as a parallel effort to reduce/link dependencies on Python, this patch splits out the notion of/LLDB initialization into ""full"" and ""common"" initialization.//All code related to initializing the full LLDB suite lives directly/in API now.  Previously it was only referenced from API, but because/it was defined in lldbCore, it would get implicitly linked against/by everything including lldb-server, causing a considerable/increase in binary size.//By moving this to the API layer, it also creates a better layering/for the ongoing effort to make the embedded interpreter replacable/with one from a different language (or even be completely removeable).//One semantic change necessary to get this all working was to remove/the notion of a shared debugger refcount.  The debugger is either/initialized or uninitialized now, and calling Initialize() multiple/times will simply have no effect, while the first Terminate() will/now shut it down no matter how many times Initialize() was called./This behaves nicely with all of our supported usage patterns though,/and allows us to fix a number of nasty hacks from before.//Differential Revision: http://reviews.llvm.org/D8462//llvm-svn: 233758",https://github.com/microsoft/checkedc-clang/commit/e6e2bb38428822f9183634cde2c8543512ee8d7d,60645050,microsoft/checkedc-clang,False,False
e27904f6c7d3d80aede100c6491d0571ce0f1d1b,"[LoopSimplify] Re-instate r306081 with a bug fix w.r.t. indirectbr.//This was reverted in r306252, but I already had the bug fixed and was/just trying to form a test case.//The original commit factored the logic for forming dedicated exits/inside of LoopSimplify into a helper that could be used elsewhere and/with an approach that required fewer intermediate data structures. See/that commit for full details including the change to the statistic, etc.//The code looked fine to me and my reviewers, but in fact didn't handle/indirectbr correctly -- it left the 'InLoopPredecessors' vector dirty.//If you have code that looks *just* right, you can end up leaking these/predecessors into a subsequent rewrite, and crash deep down when trying/to update PHI nodes for predecessors that don't exist.//I've added an assert that makes the bug much more obvious, and then/changed the code to reliably clear the vector so we don't get this bug/again in some other form as the code changes.//I've also added a test case that *does* manage to catch this while also/giving some nice positive coverage in the face of indirectbr.//The real code that found this came out of what I think is CPython's/interpreter loop, but any code with really ""creative"" interpreter loops/mixing indirectbr and other exit paths could manage to tickle the bug./I was hard to reduce the original test case because in addition to/having a particular pattern of IR, the whole thing depends on the order/of the predecessors which is in turn depends on use list order. The test/case added here was designed so that in multiple different predecessor/orderings it should always end up going down the same path and tripping/the same bug. I hope. At least, it tripped it for me without/manipulating the use list order which is better than anything bugpoint/could do...//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@306257 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/e27904f6c7d3d80aede100c6491d0571ce0f1d1b,29704274,microsoft/llvm,False,False
e27904f6c7d3d80aede100c6491d0571ce0f1d1b,"[LoopSimplify] Re-instate r306081 with a bug fix w.r.t. indirectbr.//This was reverted in r306252, but I already had the bug fixed and was/just trying to form a test case.//The original commit factored the logic for forming dedicated exits/inside of LoopSimplify into a helper that could be used elsewhere and/with an approach that required fewer intermediate data structures. See/that commit for full details including the change to the statistic, etc.//The code looked fine to me and my reviewers, but in fact didn't handle/indirectbr correctly -- it left the 'InLoopPredecessors' vector dirty.//If you have code that looks *just* right, you can end up leaking these/predecessors into a subsequent rewrite, and crash deep down when trying/to update PHI nodes for predecessors that don't exist.//I've added an assert that makes the bug much more obvious, and then/changed the code to reliably clear the vector so we don't get this bug/again in some other form as the code changes.//I've also added a test case that *does* manage to catch this while also/giving some nice positive coverage in the face of indirectbr.//The real code that found this came out of what I think is CPython's/interpreter loop, but any code with really ""creative"" interpreter loops/mixing indirectbr and other exit paths could manage to tickle the bug./I was hard to reduce the original test case because in addition to/having a particular pattern of IR, the whole thing depends on the order/of the predecessors which is in turn depends on use list order. The test/case added here was designed so that in multiple different predecessor/orderings it should always end up going down the same path and tripping/the same bug. I hope. At least, it tripped it for me without/manipulating the use list order which is better than anything bugpoint/could do...//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@306257 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/e27904f6c7d3d80aede100c6491d0571ce0f1d1b,60644745,microsoft/checkedc-llvm,False,False
f0dc9fa934fa145523636930e77dd7c15db3ecb1,"[GlobalISel] Improving InstructionSelect's performance by reducing MatchTable, mostly NFC, perf patch 1//This patch starts a series of patches that decrease time spent by/GlobalISel in its InstructionSelect pass by roughly 60% for -O0 builds/for large inputs as measured on sqlite3-amalgamation/(http://sqlite.org/download.html) targeting AArch64.//The performance improvements are achieved solely by reducing the/number of matching GIM_* opcodes executed by the MatchTable's/interpreter during the selection by approx. a factor of 30, which also/brings contribution of this particular part of the selection process/to the overall runtime of InstructionSelect pass down from approx./60-70% to 5-7%, thus making further improvements in this particular/direction not very profitable.//The improvements described above are expected for any target that/doesn't have many complex patterns. The targets that do should/strictly benefit from the changes, but by how much exactly is hard to/estimate beforehand. It's also likely that such target WILL benefit/from further improvements to MatchTable, most likely the ones that/bring it closer to a perfect decision tree.//This commit specifically is rather large mostly NFC commit that does/necessary preparation work and refactoring, there will be a following/series of small patches introducing a specific optimization each/shortly after.//This commit specifically is expected to cause a small compile time/regression (around 2.5% of InstructionSelect pass time), which should/be fixed by the next commit of the series.//Every commit planned shares the same Phabricator Review.//Reviewers: qcolombet, dsanders, bogner, aemerson, javed.absar//Reviewed By: qcolombet//Subscribers: rovka, llvm-commits, kristof.beyls//Differential Revision: https://reviews.llvm.org/D44700//llvm-svn: 332907",https://github.com/microsoft/checkedc-clang/commit/f0dc9fa934fa145523636930e77dd7c15db3ecb1,60645050,microsoft/checkedc-clang,False,False
6e0e0759900d603c7a3fdc2e56142c4111563ea6,"[GlobalISel] Improving InstructionSelect's performance by reducing MatchTable, mostly NFC, perf patch 1//This patch starts a series of patches that decrease time spent by/GlobalISel in its InstructionSelect pass by roughly 60% for -O0 builds/for large inputs as measured on sqlite3-amalgamation/(http://sqlite.org/download.html) targeting AArch64.//The performance improvements are achieved solely by reducing the/number of matching GIM_* opcodes executed by the MatchTable's/interpreter during the selection by approx. a factor of 30, which also/brings contribution of this particular part of the selection process/to the overall runtime of InstructionSelect pass down from approx./60-70% to 5-7%, thus making further improvements in this particular/direction not very profitable.//The improvements described above are expected for any target that/doesn't have many complex patterns. The targets that do should/strictly benefit from the changes, but by how much exactly is hard to/estimate beforehand. It's also likely that such target WILL benefit/from further improvements to MatchTable, most likely the ones that/bring it closer to a perfect decision tree.//This commit specifically is rather large mostly NFC commit that does/necessary preparation work and refactoring, there will be a following/series of small patches introducing a specific optimization each/shortly after.//This commit specifically is expected to cause a small compile time/regression (around 2.5% of InstructionSelect pass time), which should/be fixed by the next commit of the series.//Every commit planned shares the same Phabricator Review.//Reviewers: qcolombet, dsanders, bogner, aemerson, javed.absar//Reviewed By: qcolombet//Subscribers: rovka, llvm-commits, kristof.beyls//Differential Revision: https://reviews.llvm.org/D44700///git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@332907 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/6e0e0759900d603c7a3fdc2e56142c4111563ea6,29704274,microsoft/llvm,False,False
6e0e0759900d603c7a3fdc2e56142c4111563ea6,"[GlobalISel] Improving InstructionSelect's performance by reducing MatchTable, mostly NFC, perf patch 1//This patch starts a series of patches that decrease time spent by/GlobalISel in its InstructionSelect pass by roughly 60% for -O0 builds/for large inputs as measured on sqlite3-amalgamation/(http://sqlite.org/download.html) targeting AArch64.//The performance improvements are achieved solely by reducing the/number of matching GIM_* opcodes executed by the MatchTable's/interpreter during the selection by approx. a factor of 30, which also/brings contribution of this particular part of the selection process/to the overall runtime of InstructionSelect pass down from approx./60-70% to 5-7%, thus making further improvements in this particular/direction not very profitable.//The improvements described above are expected for any target that/doesn't have many complex patterns. The targets that do should/strictly benefit from the changes, but by how much exactly is hard to/estimate beforehand. It's also likely that such target WILL benefit/from further improvements to MatchTable, most likely the ones that/bring it closer to a perfect decision tree.//This commit specifically is rather large mostly NFC commit that does/necessary preparation work and refactoring, there will be a following/series of small patches introducing a specific optimization each/shortly after.//This commit specifically is expected to cause a small compile time/regression (around 2.5% of InstructionSelect pass time), which should/be fixed by the next commit of the series.//Every commit planned shares the same Phabricator Review.//Reviewers: qcolombet, dsanders, bogner, aemerson, javed.absar//Reviewed By: qcolombet//Subscribers: rovka, llvm-commits, kristof.beyls//Differential Revision: https://reviews.llvm.org/D44700///git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@332907 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/6e0e0759900d603c7a3fdc2e56142c4111563ea6,60644745,microsoft/checkedc-llvm,False,False
979d63d50c0c0f7bc537bf821e056cc9fe5abd38,"bpf: prevent out of bounds speculation on pointer arithmetic//Jann reported that the original commit back in b2157399cc98/(""bpf: prevent out-of-bounds speculation"") was not sufficient/to stop CPU from speculating out of bounds memory access:/While b2157399cc98 only focussed on masking array map access/for unprivileged users for tail calls and data access such/that the user provided index gets sanitized from BPF program/and syscall side, there is still a more generic form affected/from BPF programs that applies to most maps that hold user/data in relation to dynamic map access when dealing with/unknown scalars or ""slow"" known scalars as access offset, for/example://  - Load a map value pointer into R6/  - Load an index into R7/  - Do a slow computation (e.g. with a memory dependency) that/    loads a limit into R8 (e.g. load the limit from a map for/    high latency, then mask it to make the verifier happy)/  - Exit if R7 >= R8 (mispredicted branch)/  - Load R0 = R6[R7]/  - Load R0 = R6[R0]//For unknown scalars there are two options in the BPF verifier/where we could derive knowledge from in order to guarantee/safe access to the memory: i) While </>/<=/>= variants won't/allow to derive any lower or upper bounds from the unknown/scalar where it would be safe to add it to the map value/pointer, it is possible through ==/!= test however. ii) another/option is to transform the unknown scalar into a known scalar,/for example, through ALU ops combination such as R &= <imm>/followed by R |= <imm> or any similar combination where the/original information from the unknown scalar would be destroyed/entirely leaving R with a constant. The initial slow load still/precedes the latter ALU ops on that register, so the CPU/executes speculatively from that point. Once we have the known/scalar, any compare operation would work then. A third option/only involving registers with known scalars could be crafted/as described in [0] where a CPU port (e.g. Slow Int unit)/would be filled with many dependent computations such that/the subsequent condition depending on its outcome has to wait/for evaluation on its execution port and thereby executing/speculatively if the speculated code can be scheduled on a/different execution port, or any other form of mistraining/as described in [1], for example. Given this is not limited/to only unknown scalars, not only map but also stack access/is affected since both is accessible for unprivileged users/and could potentially be used for out of bounds access under/speculation.//In order to prevent any of these cases, the verifier is now/sanitizing pointer arithmetic on the offset such that any/out of bounds speculation would be masked in a way where the/pointer arithmetic result in the destination register will/stay unchanged, meaning offset masked into zero similar as/in array_index_nospec() case. With regards to implementation,/there are three options that were considered: i) new insn/for sanitation, ii) push/pop insn and sanitation as inlined/BPF, iii) reuse of ax register and sanitation as inlined BPF.//Option i) has the downside that we end up using from reserved/bits in the opcode space, but also that we would require/each JIT to emit masking as native arch opcodes meaning/mitigation would have slow adoption till everyone implements/it eventually which is counter-productive. Option ii) and iii)/have both in common that a temporary register is needed in/order to implement the sanitation as inlined BPF since we/are not allowed to modify the source register. While a push //pop insn in ii) would be useful to have in any case, it/requires once again that every JIT needs to implement it/first. While possible, amount of changes needed would also/be unsuitable for a -stable patch. Therefore, the path which/has fewer changes, less BPF instructions for the mitigation/and does not require anything to be changed in the JITs is/option iii) which this work is pursuing. The ax register is/already mapped to a register in all JITs (modulo arm32 where/it's mapped to stack as various other BPF registers there)/and used in constant blinding for JITs-only so far. It can/be reused for verifier rewrites under certain constraints./The interpreter's tmp ""register"" has therefore been remapped/into extending the register set with hidden ax register and/reusing that for a number of instructions that needed the/prior temporary variable internally (e.g. div, mod). This/allows for zero increase in stack space usage in the interpreter,/and enables (restricted) generic use in rewrites otherwise as/long as such a patchlet does not make use of these instructions./The sanitation mask is dynamic and relative to the offset the/map value or stack pointer currently holds.//There are various cases that need to be taken under consideration/for the masking, e.g. such operation could look as follows:/ptr += val or val += ptr or ptr -= val. Thus, the value to be/sanitized could reside either in source or in destination/register, and the limit is different depending on whether/the ALU op is addition or subtraction and depending on the/current known and bounded offset. The limit is derived as/follows: limit := max_value_size - (smin_value + off). For/subtraction: limit := umax_value + off. This holds because/we do not allow any pointer arithmetic that would/temporarily go out of bounds or would have an unknown/value with mixed signed bounds where it is unclear at/verification time whether the actual runtime value would/be either negative or positive. For example, we have a/derived map pointer value with constant offset and bounded/one, so limit based on smin_value works because the verifier/requires that statically analyzed arithmetic on the pointer/must be in bounds, and thus it checks if resulting/smin_value + off and umax_value + off is still within map/value bounds at time of arithmetic in addition to time of/access. Similarly, for the case of stack access we derive/the limit as follows: MAX_BPF_STACK + off for subtraction/and -off for the case of addition where off := ptr_reg->off +/ptr_reg->var_off.value. Subtraction is a special case for/the masking which can be in form of ptr += -val, ptr -= -val,/or ptr -= val. In the first two cases where we know that/the value is negative, we need to temporarily negate the/value in order to do the sanitation on a positive value/where we later swap the ALU op, and restore original source/register if the value was in source.//The sanitation of pointer arithmetic alone is still not fully/sufficient as is, since a scenario like the following could/happen ...//  PTR += 0x1000 (e.g. K-based imm)/  PTR -= BIG_NUMBER_WITH_SLOW_COMPARISON/  PTR += 0x1000/  PTR -= BIG_NUMBER_WITH_SLOW_COMPARISON/  [...]//... which under speculation could end up as ...//  PTR += 0x1000/  PTR -= 0 [ truncated by mitigation ]/  PTR += 0x1000/  PTR -= 0 [ truncated by mitigation ]/  [...]//... and therefore still access out of bounds. To prevent such/case, the verifier is also analyzing safety for potential out/of bounds access under speculative execution. Meaning, it is/also simulating pointer access under truncation. We therefore/""branch off"" and push the current verification state after the/ALU operation with known 0 to the verification stack for later/analysis. Given the current path analysis succeeded it is/likely that the one under speculation can be pruned. In any/case, it is also subject to existing complexity limits and/therefore anything beyond this point will be rejected. In/terms of pruning, it needs to be ensured that the verification/state from speculative execution simulation must never prune/a non-speculative execution path, therefore, we mark verifier/state accordingly at the time of push_stack(). If verifier/detects out of bounds access under speculative execution from/one of the possible paths that includes a truncation, it will/reject such program.//Given we mask every reg-based pointer arithmetic for/unprivileged programs, we've been looking into how it could/affect real-world programs in terms of size increase. As the/majority of programs are targeted for privileged-only use/case, we've unconditionally enabled masking (with its alu/restrictions on top of it) for privileged programs for the/sake of testing in order to check i) whether they get rejected/in its current form, and ii) by how much the number of/instructions and size will increase. We've tested this by/using Katran, Cilium and test_l4lb from the kernel selftests./For Katran we've evaluated balancer_kern.o, Cilium bpf_lxc.o/and an older test object bpf_lxc_opt_-DUNKNOWN.o and l4lb/we've used test_l4lb.o as well as test_l4lb_noinline.o. We/found that none of the programs got rejected by the verifier/with this change, and that impact is rather minimal to none./balancer_kern.o had 13,904 bytes (1,738 insns) xlated and/7,797 bytes JITed before and after the change. Most complex/program in bpf_lxc.o had 30,544 bytes (3,817 insns) xlated/and 18,538 bytes JITed before and after and none of the other/tail call programs in bpf_lxc.o had any changes either. For/the older bpf_lxc_opt_-DUNKNOWN.o object we found a small/increase from 20,616 bytes (2,576 insns) and 12,536 bytes JITed/before to 20,664 bytes (2,582 insns) and 12,558 bytes JITed/after the change. Other programs from that object file had/similar small increase. Both test_l4lb.o had no change and/remained at 6,544 bytes (817 insns) xlated and 3,401 bytes/JITed and for test_l4lb_noinline.o constant at 5,080 bytes/(634 insns) xlated and 3,313 bytes JITed. This can be explained/in that LLVM typically optimizes stack based pointer arithmetic/by using K-based operations and that use of dynamic map access/is not overly frequent. However, in future we may decide to/optimize the algorithm further under known guarantees from/branch and value speculation. Latter seems also unclear in/terms of prediction heuristics that today's CPUs apply as well/as whether there could be collisions in e.g. the predictor's/Value History/Pattern Table for triggering out of bounds access,/thus masking is performed unconditionally at this point but could/be subject to relaxation later on. We were generally also/brainstorming various other approaches for mitigation, but the/blocker was always lack of available registers at runtime and/or/overhead for runtime tracking of limits belonging to a specific/pointer. Thus, we found this to be minimally intrusive under/given constraints.//With that in place, a simple example with sanitized access on/unprivileged load at post-verification time looks as follows://  # bpftool prog dump xlated id 282/  [...]/  28: (79) r1 = *(u64 *)(r7 +0)/  29: (79) r2 = *(u64 *)(r7 +8)/  30: (57) r1 &= 15/  31: (79) r3 = *(u64 *)(r0 +4608)/  32: (57) r3 &= 1/  33: (47) r3 |= 1/  34: (2d) if r2 > r3 goto pc+19/  35: (b4) (u32) r11 = (u32) 20479  |/  36: (1f) r11 -= r2                | Dynamic sanitation for pointer/  37: (4f) r11 |= r2                | arithmetic with registers/  38: (87) r11 = -r11               | containing bounded or known/  39: (c7) r11 s>>= 63              | scalars in order to prevent/  40: (5f) r11 &= r2                | out of bounds speculation./  41: (0f) r4 += r11                |/  42: (71) r4 = *(u8 *)(r4 +0)/  43: (6f) r4 <<= r1/  [...]//For the case where the scalar sits in the destination register/as opposed to the source register, the following code is emitted/for the above example://  [...]/  16: (b4) (u32) r11 = (u32) 20479/  17: (1f) r11 -= r2/  18: (4f) r11 |= r2/  19: (87) r11 = -r11/  20: (c7) r11 s>>= 63/  21: (5f) r2 &= r11/  22: (0f) r2 += r0/  23: (61) r0 = *(u32 *)(r2 +0)/  [...]//JIT blinding example with non-conflicting use of r10://  [...]/   d5:	je     0x0000000000000106    _/   d7:	mov    0x0(%rax),%edi       |/   da:	mov    $0xf153246,%r10d     | Index load from map value and/   e0:	xor    $0xf153259,%r10      | (const blinded) mask with 0x1f./   e7:	and    %r10,%rdi            |_/   ea:	mov    $0x2f,%r10d          |/   f0:	sub    %rdi,%r10            | Sanitized addition. Both use r10/   f3:	or     %rdi,%r10            | but do not interfere with each/   f6:	neg    %r10                 | other. (Neither do these instructions/   f9:	sar    $0x3f,%r10           | interfere with the use of ax as temp/   fd:	and    %r10,%rdi            | in interpreter.)/  100:	add    %rax,%rdi            |_/  103:	mov    0x0(%rdi),%eax/ [...]//Tested that it fixes Jann's reproducer, and also checked that test_verifier/and test_progs suite with interpreter, JIT and JIT with hardening enabled/on x86-64 and arm64 runs successfully.//  [0] Speculose: Analyzing the Security Implications of Speculative/      Execution in CPUs, Giorgi Maisuradze and Christian Rossow,/      https://arxiv.org/pdf/1801.04084.pdf//  [1] A Systematic Evaluation of Transient Execution Attacks and/      Defenses, Claudio Canella, Jo Van Bulck, Michael Schwarz,/      Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens,/      Dmitry Evtyushkin, Daniel Gruss,/      https://arxiv.org/pdf/1811.05441.pdf//Fixes: b2157399cc98 (""bpf: prevent out-of-bounds speculation"")/Reported-by: Jann Horn <jannh@google.com>/Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>/Acked-by: Alexei Starovoitov <ast@kernel.org>/Signed-off-by: Alexei Starovoitov <ast@kernel.org>",https://github.com/microsoft/WSL2-Linux-Kernel/commit/979d63d50c0c0f7bc537bf821e056cc9fe5abd38,187922067,microsoft/WSL2-Linux-Kernel,False,False
e4c8c807bb609daa9be3fb9977703355b119fe8c,"BPF backend//Summary:/V8->V9:/- cleanup tests//V7->V8:/- addressed feedback from David:/- switched to range-based 'for' loops/- fixed formatting of tests//V6->V7:/- rebased and adjusted AsmPrinter args/- CamelCased .td, fixed formatting, cleaned up names, removed unused patterns/- diffstat: 3 files changed, 203 insertions(+), 227 deletions(-)//V5->V6:/- addressed feedback from Chandler:/- reinstated full verbose standard banner in all files/- fixed variables that were not in CamelCase/- fixed names of #ifdef in header files/- removed redundant braces in if/else chains with single statements/- fixed comments/- removed trailing empty line/- dropped debug annotations from tests/- diffstat of these changes:/  46 files changed, 456 insertions(+), 469 deletions(-)//V4->V5:/- fix setLoadExtAction() interface/- clang-formated all where it made sense//V3->V4:/- added CODE_OWNERS entry for BPF backend//V2->V3:/- fix metadata in tests//V1->V2:/- addressed feedback from Tom and Matt/- removed top level change to configure (now everything via 'experimental-backend')/- reworked error reporting via DiagnosticInfo (similar to R600)/- added few more tests/- added cmake build/- added Triple::bpf/- tested on linux and darwin//V1 cover letter:/---------------------/recently linux gained ""universal in-kernel virtual machine"" which is called/eBPF or extended BPF. The name comes from ""Berkeley Packet Filter"", since/new instruction set is based on it./This patch adds a new backend that emits extended BPF instruction set.//The concept and development are covered by the following articles:/http://lwn.net/Articles/599755//http://lwn.net/Articles/575531//http://lwn.net/Articles/603983//http://lwn.net/Articles/606089//http://lwn.net/Articles/612878///One of use cases: dtrace/systemtap alternative.//bpf syscall manpage:/https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b4fc1a460f3017e958e6a8ea560ea0afd91bf6fe//instruction set description and differences vs classic BPF:/http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/filter.txt//Short summary of instruction set:/- 64-bit registers/  R0      - return value from in-kernel function, and exit value for BPF program/  R1 - R5 - arguments from BPF program to in-kernel function/  R6 - R9 - callee saved registers that in-kernel function will preserve/  R10     - read-only frame pointer to access stack/- two-operand instructions like +, -, *, mov, load/store/- implicit prologue/epilogue (invisible stack pointer)/- no floating point, no simd//Short history of extended BPF in kernel:/interpreter in 3.15, x64 JIT in 3.16, arm64 JIT, verifier, bpf syscall in 3.18, more to come in the future.//It's a very small and simple backend./There is no support for global variables, arbitrary function calls, floating point, varargs,/exceptions, indirect jumps, arbitrary pointer arithmetic, alloca, etc./From C front-end point of view it's very restricted. It's done on purpose, since kernel/rejects all programs that it cannot prove safe. It rejects programs with loops/and with memory accesses via arbitrary pointers. When kernel accepts the program it is/guaranteed that program will terminate and will not crash the kernel.//This patch implements all 'must have' bits. There are several things on TODO list,/so this is not the end of development./Most of the code is a boiler plate code, copy-pasted from other backends./Only odd things are lack or < and <= instructions, specialized load_byte intrinsics/and 'compare and goto' as single instruction./Current instruction set is fixed, but more instructions can be added in the future.//Signed-off-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>//Subscribers: majnemer, chandlerc, echristo, joerg, pete, rengolin, kristof.beyls, arsenm, t.p.northover, tstellarAMD, aemerson, llvm-commits//Differential Revision: http://reviews.llvm.org/D6494//llvm-svn: 227008",https://github.com/microsoft/checkedc-clang/commit/e4c8c807bb609daa9be3fb9977703355b119fe8c,60645050,microsoft/checkedc-clang,False,False
4fe85c75482f9d11c5a1f92a1863ce30afad8d0d,"BPF backend//Summary:/V8->V9:/- cleanup tests//V7->V8:/- addressed feedback from David:/- switched to range-based 'for' loops/- fixed formatting of tests//V6->V7:/- rebased and adjusted AsmPrinter args/- CamelCased .td, fixed formatting, cleaned up names, removed unused patterns/- diffstat: 3 files changed, 203 insertions(+), 227 deletions(-)//V5->V6:/- addressed feedback from Chandler:/- reinstated full verbose standard banner in all files/- fixed variables that were not in CamelCase/- fixed names of #ifdef in header files/- removed redundant braces in if/else chains with single statements/- fixed comments/- removed trailing empty line/- dropped debug annotations from tests/- diffstat of these changes:/  46 files changed, 456 insertions(+), 469 deletions(-)//V4->V5:/- fix setLoadExtAction() interface/- clang-formated all where it made sense//V3->V4:/- added CODE_OWNERS entry for BPF backend//V2->V3:/- fix metadata in tests//V1->V2:/- addressed feedback from Tom and Matt/- removed top level change to configure (now everything via 'experimental-backend')/- reworked error reporting via DiagnosticInfo (similar to R600)/- added few more tests/- added cmake build/- added Triple::bpf/- tested on linux and darwin//V1 cover letter:/---------------------/recently linux gained ""universal in-kernel virtual machine"" which is called/eBPF or extended BPF. The name comes from ""Berkeley Packet Filter"", since/new instruction set is based on it./This patch adds a new backend that emits extended BPF instruction set.//The concept and development are covered by the following articles:/http://lwn.net/Articles/599755//http://lwn.net/Articles/575531//http://lwn.net/Articles/603983//http://lwn.net/Articles/606089//http://lwn.net/Articles/612878///One of use cases: dtrace/systemtap alternative.//bpf syscall manpage:/https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b4fc1a460f3017e958e6a8ea560ea0afd91bf6fe//instruction set description and differences vs classic BPF:/http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/filter.txt//Short summary of instruction set:/- 64-bit registers/  R0      - return value from in-kernel function, and exit value for BPF program/  R1 - R5 - arguments from BPF program to in-kernel function/  R6 - R9 - callee saved registers that in-kernel function will preserve/  R10     - read-only frame pointer to access stack/- two-operand instructions like +, -, *, mov, load/store/- implicit prologue/epilogue (invisible stack pointer)/- no floating point, no simd//Short history of extended BPF in kernel:/interpreter in 3.15, x64 JIT in 3.16, arm64 JIT, verifier, bpf syscall in 3.18, more to come in the future.//It's a very small and simple backend./There is no support for global variables, arbitrary function calls, floating point, varargs,/exceptions, indirect jumps, arbitrary pointer arithmetic, alloca, etc./From C front-end point of view it's very restricted. It's done on purpose, since kernel/rejects all programs that it cannot prove safe. It rejects programs with loops/and with memory accesses via arbitrary pointers. When kernel accepts the program it is/guaranteed that program will terminate and will not crash the kernel.//This patch implements all 'must have' bits. There are several things on TODO list,/so this is not the end of development./Most of the code is a boiler plate code, copy-pasted from other backends./Only odd things are lack or < and <= instructions, specialized load_byte intrinsics/and 'compare and goto' as single instruction./Current instruction set is fixed, but more instructions can be added in the future.//Signed-off-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>//Subscribers: majnemer, chandlerc, echristo, joerg, pete, rengolin, kristof.beyls, arsenm, t.p.northover, tstellarAMD, aemerson, llvm-commits//Differential Revision: http://reviews.llvm.org/D6494//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@227008 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/llvm/commit/4fe85c75482f9d11c5a1f92a1863ce30afad8d0d,29704274,microsoft/llvm,False,False
4fe85c75482f9d11c5a1f92a1863ce30afad8d0d,"BPF backend//Summary:/V8->V9:/- cleanup tests//V7->V8:/- addressed feedback from David:/- switched to range-based 'for' loops/- fixed formatting of tests//V6->V7:/- rebased and adjusted AsmPrinter args/- CamelCased .td, fixed formatting, cleaned up names, removed unused patterns/- diffstat: 3 files changed, 203 insertions(+), 227 deletions(-)//V5->V6:/- addressed feedback from Chandler:/- reinstated full verbose standard banner in all files/- fixed variables that were not in CamelCase/- fixed names of #ifdef in header files/- removed redundant braces in if/else chains with single statements/- fixed comments/- removed trailing empty line/- dropped debug annotations from tests/- diffstat of these changes:/  46 files changed, 456 insertions(+), 469 deletions(-)//V4->V5:/- fix setLoadExtAction() interface/- clang-formated all where it made sense//V3->V4:/- added CODE_OWNERS entry for BPF backend//V2->V3:/- fix metadata in tests//V1->V2:/- addressed feedback from Tom and Matt/- removed top level change to configure (now everything via 'experimental-backend')/- reworked error reporting via DiagnosticInfo (similar to R600)/- added few more tests/- added cmake build/- added Triple::bpf/- tested on linux and darwin//V1 cover letter:/---------------------/recently linux gained ""universal in-kernel virtual machine"" which is called/eBPF or extended BPF. The name comes from ""Berkeley Packet Filter"", since/new instruction set is based on it./This patch adds a new backend that emits extended BPF instruction set.//The concept and development are covered by the following articles:/http://lwn.net/Articles/599755//http://lwn.net/Articles/575531//http://lwn.net/Articles/603983//http://lwn.net/Articles/606089//http://lwn.net/Articles/612878///One of use cases: dtrace/systemtap alternative.//bpf syscall manpage:/https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b4fc1a460f3017e958e6a8ea560ea0afd91bf6fe//instruction set description and differences vs classic BPF:/http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/filter.txt//Short summary of instruction set:/- 64-bit registers/  R0      - return value from in-kernel function, and exit value for BPF program/  R1 - R5 - arguments from BPF program to in-kernel function/  R6 - R9 - callee saved registers that in-kernel function will preserve/  R10     - read-only frame pointer to access stack/- two-operand instructions like +, -, *, mov, load/store/- implicit prologue/epilogue (invisible stack pointer)/- no floating point, no simd//Short history of extended BPF in kernel:/interpreter in 3.15, x64 JIT in 3.16, arm64 JIT, verifier, bpf syscall in 3.18, more to come in the future.//It's a very small and simple backend./There is no support for global variables, arbitrary function calls, floating point, varargs,/exceptions, indirect jumps, arbitrary pointer arithmetic, alloca, etc./From C front-end point of view it's very restricted. It's done on purpose, since kernel/rejects all programs that it cannot prove safe. It rejects programs with loops/and with memory accesses via arbitrary pointers. When kernel accepts the program it is/guaranteed that program will terminate and will not crash the kernel.//This patch implements all 'must have' bits. There are several things on TODO list,/so this is not the end of development./Most of the code is a boiler plate code, copy-pasted from other backends./Only odd things are lack or < and <= instructions, specialized load_byte intrinsics/and 'compare and goto' as single instruction./Current instruction set is fixed, but more instructions can be added in the future.//Signed-off-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>//Subscribers: majnemer, chandlerc, echristo, joerg, pete, rengolin, kristof.beyls, arsenm, t.p.northover, tstellarAMD, aemerson, llvm-commits//Differential Revision: http://reviews.llvm.org/D6494//git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@227008 91177308-0d34-0410-b5e6-96231b3b80d8",https://github.com/microsoft/checkedc-llvm/commit/4fe85c75482f9d11c5a1f92a1863ce30afad8d0d,60644745,microsoft/checkedc-llvm,False,False
dd964828e1ec10c6ddf8966e9b8516910273fe6a,"Merge/05 24 (#903)//* JSON definitions for colour blocks (#838)////Replaces old colour block definitions with a Blockly.defineBlocksWithJsonArray(..) call. Generator unit tests continue to load and pass, signifying compatibility with prior block definitions.////Replaces extension 'math_number_tooltip' with the reusable 'parent_tooltip_when_inline' extension, also used by colour_picker. Includes tests.////* Rewrite tree.service.js.////- Remove unnecessary code and functions.//- Add documentation where needed.//- Fix a bug arising when a block on the workspace is attached to an existing link.////* Use setValue in fieldTextInput so that procedure renaming works////* Further cleanup and removal of unnecessary functions. Pull some strings out for i18n.////* Use bindEvent_ instead of bindEventWithChecks_ for longStop////* Clean up workspace.component.js. When moving a block from one place to another, move all blocks after it too, and adjust the active descs accordingly.////* Unit tests for JSON block definitions (just the start) (#850)//// * Beginnings of a JSON block definition unit test set.// * Dispose of unit test workspaces and blocks in finally blocks.// * Clarify JSON error message by echoing arg notation.////* New blocks text_count, text_replace, and text_reverse (#830)////Includes generators for all languages and units tests on those generators.////* Fixing combo boxes getting out-of-sync with NVDA.////Combo boxes need to be special cased like text input. Also, Escape is//a reserved button in NVDA, so I added Enter as a way to ""submit and//move up a level"" in addition to escape, so these boxes can be edited//while NVDA is on.////* Temporary fix for broken text field validation.////* rebuild////* Add a block to reverse a list (#844)////* Localisation updates from https://translatewiki.net.////* Porting math.js blocks to JSON (#846)////Moving all `math.js` definitions into a single JSON array, complete with i18n syntax for all messages, dropdowns, and tooltips.////Adding Blockly.Extensions.buildTooltipForDropdown(..) to facilitate the creation and error-checking of tooltips that update based on the value of a dropdown.////Now warn on raw string in JSON 'extensions'.////* Fixing JSON support for images in dropdowns. Adding tests. (#851)////Fixes #848.////* Update README.md////Add a link to our forum.////* Correcting math_change color////* Enable custom flyout categories.////* Add some safety////* Update the set of reserved words in Python to reflect the current state of Python (2.7 and 3.6). (#861)////* Localisation updates from https://translatewiki.net.////* .getOptions_() to .getOptions() (#869)////Fixes #867.////* Blockly.Extensions.buildTooltipForDropdown(..): Deferred validation. (#870)////Defer tooltip message string check until after load, when all Blockly.Msg should be loaded.//Avoids validation in headless mode, due to lack of document.readyState.////* annotation updates////* annotation updates////* jsdoc corrections (#874)////* Remove use of Array.prototype.includes which is not implemented in IE or Edge < 14. Fixes google/blockly#876.////* Attempt to work around the IE/Edge bug where `getComputedTextLength()` throws an exception when the SVG node is not visible. This workaround forces a re-render, which in turn, forces a re-calculation of the node width once a block is inserted into the workspace SVG. This workaround is only executed on IE and Edge. See https://groups.google.com/forum/#!topic/blockly/T8IR4t4xAIY for the initial discussion of this issue.////* Change CSS transforms to work with older browsers (#879)////* Change the setting of the CSS transform properties on SVG nodes to set both the unprefixed version and the `-webkit-` prefixed version so that Blockly correctly renders in order browsers, such as Safari < 9 and iOS Safari < 9.2. For discussion of this issue, see https://groups.google.com/forum/#!topic/blockly/o3pERaRQhSg////* Correct the separation between the CSS transform property and the rest of the CSS that was in the variable misleadingly called ""transform"".////* Don't try to get block position in a headless workspace////* Stop bumping neighbours in headless blockly////* Place context menu correctly on touch////* Clear all active desc ids when the 'Erase Workspace' button is pressed.////* Fix a bug where splicing a block between two linked blocks disconnects the group and messes up the focus.////* Deleting a top-level block does not cause blocks after it to be deleted. Properly handle the active desc for this case.////* Localisation updates from https://translatewiki.net.////* Use the empty field placeholder for dropdowns that do not have a value selected.////* Bugfix for #892. I incorrectly converted one CSS transform setting to use the cross-browser setting function in 40a063763c74b3f712c3057565966c25d5cfdb10. (#895)////* Adding @namespace annotations for JSDoc. (#900)////* Fix typo causing TypeError (#901)////* Pinning the angular2 dependency, and including licenses. (#893)////* Add skeleton for tests on rendered workspaces////* Fix some lint errors////* Localisation updates from https://translatewiki.net.////* Correct changedState in setWarningText() (#908)////When clearing warnings on blocks with IDs, the changedState variable should be true if the text changed. This will trigger the block being reshaped and remove the space for the notification icon (this.bumpNeighbours_).////* Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin(). (#907)////Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin().//This adds support for a common use pattern in extensions, and adds//error checking to avoid future incompatibilities.////* Porting Logic blocks to JSON (#913)////Extensions, mixins, mutators and constants now grouped under the new namespace Blockly.Constants.Logic.////* Improving errors/warnings with Block.toDevString() and Connection.toString(). (#911)////* Add isEditable to field, and add tests////* Separate tests////* Blockly.Constants.Math and Blockly.Constants.Colour extension constants (#916)////Also, correcting quotes in logic.js.////* Correction to logic_ternary type check (#920)////* Porting Loop blocks to JSON (#919)//// * Improved documentation on `Blockly.Extensions.buildTooltipForDropdown`// * Replaced incorrect uses of `@mixes` JSDoc annotation (on mixin extensions) with `@augments Blockly.Block`.// * Added Blockly.Extensions.buildTooltipWithFieldValue() extension helper.////* Workspace isDraggable////* JSONify simple list blocks////* JSONify variable blocks////* Initial text block, with a mixin to generate quote image fields. (#923)////Text block now uses the extension ""text_quotes"", supported by Blockly.Constants.Text.QUOTE_IMAGE_MIXIN.quoteField_(fieldName), so that each platform can use the best platform appropriate image (size, density, etc.) for the quotes.////* Add no-op stub .neighbors() for headless Connection.////* Adding tests for logic_ternary block in a new jsunit test framework.////* Correcting output of the logic_null block.////* Potential bug fix for issue #661////* extension controls_if => controls_if_mutator.////* Renamed extension function constant, and moved variables into the mixin.////* Dereference string table references when loading variable fields from JSON.////* Moving FieldImage string dereferencing back into Block.interpolate_() (part of jsonInit()). This sets a clear boundary of where dereferencing should happen.//Towards this, I've added message dereferencing for other field types here, as well.  I've used a pattern of field-type specific helper functions.////* Addressing comments.////* .utils.replaceMessageReferences(..) now gracefully returns non-string arguments.////* Clarification update.//Unraveling nested ternaries in Blockly.utils.tokenizeInterpolation_()////* Code correction from previous commit. Moved style to css.js and set ROUNDING=15;////* Fixing Enter so it properly propogates to dropdown selection. (#934)////Fixing FieldSegment so it updates dropdowns when the underlying dropdown changes.////* Localisation updates from https://translatewiki.net.////* Make variable add set/get block in context menu obey block limits////* Localisation updates from https://translatewiki.net.////* Use mutator extension for controls_if block////* Fix #946. Don't check for presence of constants.js////* Fix #945 (annotations) and an eslint issue (constant condition)////* Localisation updates from https://translatewiki.net.////* Fix #950: BlockFactory typo and copypasta////* Add safety checks for mutators and non-mutator extensions////* Handle mutations with both mixins and functions////* Adding warning on duplicate JSON block definition.////* period////* Make some functions private and add tests////* Localisation updates from https://translatewiki.net.////* Update help URL per #937.//Replace URL usages of %28 and %29 with normal parenthesis characters. (They aren't replaced by JavaScript's encodeURIComponent() function, and seem to work just fine without them.)//Added missing semicolon in build.py.////* Typo in comment.////* Make it easier to read the code that creates the variable category in the tolbox////* Adding Blockly.Xml.appendDomToWorkspace() (#962)////This is a copy (with additional comments) of PR #822 (and also #961) by @qnoirhomme with unrelated files removed. See #822 for full review.////* Annotation fixes////* Fix bug #904 by explicitly grabbing focus on the workspace svg element. (#964)////* Potential fix for #888.  Stops checking whether we are mid workspace drag since we do not always get mosue up events when blockly is in an iframe. (#899)////* Adding new minimap demo////* Basic code style changes. Adding a few more comments. Return early if disableScrollChange in onScrollChange listener.////* `unction` to `function` corrects #962 (#970)////* Cross browser friendly fix for #904.  This calls blur and focus from … (#972)////* Cross browser friendly fix for #904.  This calls blur and focus from workspace.markFocused and removes the event listener on focus events.  markFocused is called from all of our mouse down handlers, which triggers the focus event leading to an infinite loop of focus.  As far as I can tell, there are no uses of the focus handler that actually did anything for us.////* Localisation updates from https://translatewiki.net.////* Another attempt to fix #904 to keep the page from jumping to the focused workspace in IE 11 (#974)////* Adding horizontal scrolling. Changed scroll change callbacks from onScroll_ to setHandlePosition. onScroll_ is not challed when workspace is dragged.////* set background color to lilac if opening the playground from file:////* Registering mousemove and mouseup listener in mousedown event. Mousemove and Mouseup events are now listening over document.////* Localisation updates from https://translatewiki.net.////* Fix #967 by overriding the updateWidth method in FieldImage blocks to be a no-op. FieldImage fields should not change size after the width is set in init.  The updateWidth and, therefore, getCachedWidth is now being called by BlockSvg renderFields_ (see commit d55d9cbd9ff308ff5e361cf77acabb61a4bf4695). IIUC, updateWidth/getCachedWidth was only called from render before which is overridden in FieldImage to be a no-op already. (#979)////* Fix #969////* Localisation updates from https://translatewiki.net.////* Fix #986.  Looks like the original PR just forgot this block. (#992)////* rebuild develop (#996)////* Added the variable modal and component and implemented basic renaming functionality. (#991)////* Fixing commenting from the last commit. (#1000)////* Localisation updates from https://translatewiki.net.////* RemoveAttribute doesn't work on SVG elements in IE 10.  Use setAttribute to null instead.////* Adding the remove variable modal and functionality to accessible Blockly. (#1011)////* Minimap position bug fix for browsers other than chrome. Added touch support.////* Adding an add variable modal to accessible Blockly. (#1015)////* Adding the remove variable modal and functionality to accessible Blockly.////* Adding the add variable modal for accessible Blockly.////* Block browser context menu in the toolbox and flyout////* Add links to the dev registration form and contributor guidelines////* Miscellaneous comment cleanup////* Adding the common modal class. (#1017)////Centralizes accessible modal behavior.////* - Changed error message referencing 'procedure' instead of 'function' (#1019)////- Added iOS specific UI messages//- Fixed bug with js_to_json.py script where it didn't recognize ' character////* - Allows use of Blockly's messaging format for category name, colour,… (#1028)////...in toolbox XML.//- Updated code editor demo to use this message format//- Re-built blockly_compressed.js////* Making text_count use a text color (like text_length, which also returns a number). (#1027)////* Enable google/blockly with continuous build on travis ci (#1023) (#1035)////* create .travis for ci job////* initial checkin for blocky-web travis ci job////* rename file to .travis.yaml for typo////* remove after_script////* added cache////* rename .travis.yaml to .travis.yml////* Update .travis.yml////* include build script////* fix yaml file format issue////* debug install part////* debug build issue////* Update .travis.yml////* remove cache for now////* Update .travis.yml////* Update .travis.yml////* Update .travis.yml////* more debug info////* Update .travis.yml////* Update .travis.yml////* fix typo////* installing chrome browser////* remove chrome setting config////* run build.py as part of npm install////* Update .travis.yml////* update karma dependency////* use karma as test runner////* fix typo////* remove karma test for now////* Update .travis.yml////* Update package.json////* add npm test target////* add browserstack-runner depdendency////* update browser support////* fix typo for test target////* fix chrome typo////* added closure dependency////* add google-closure-library////* include blockly_uncompressed.js and core.js dependency////* uncomment out core/*.js files////* add kama job as part of install////* remove browserstack add on for now////* fix karma config typo////* add karma-closure////* add os support////* remove typo config////* include more closure files////* change os back to linux////* use closure-library from node_modules////* change log level back to INFO////* change npm test target to use open browser command instead of karma////* change travis test target to use open command instead of karma////* list current directory////* find what's in current dir////* typo command////* Update .travis.yml////* typo again////* open right index.html////* use right path for index.html////* xdg-open to open default browser on travis////* exit browser after 5s wait////* change timeout to 1 min////* exit after opening up browser////* use browser only////* use karma////* remove un-needed dependency////* clean up script section////* fix typo////* update build status on readme////* initial commit for selenium integration tests////* update selenium jar path////* fix test_runner.js typo////* add more debug info////* check java version////* add && instead of 9288////* fix java path////* add logic to check if selenium is running or not////* add some deugging info////* initial commit to get chromedriver////* add chromedriver flag////* add get_chromedriver.sh to package.json and .travel////* change browser to chrome for now////* fix path issue////* update chromdriver path////* fix path issue again////* more debugging////* add debug msg////* fix typo////* minor fix for getting chromedriver////* install latest chrome browser////* clean up pakcage.json////* use npm target for test run////* remove removing trailing comma////* fix another trailing comma////* updated travis test target////* clean up scripts////* not sure nmp run preinstall////* redirect selenium log to tmp file////* revert writing console log to file////* update test summary////* more clean up////* minor clean up before pull request////* resolved closure-library conflict////1. add closure-library to dependencies instead of devDependencies.//2. add lint back in scripts block////* fix typo (adding comma) in script section////* Renames Blockly.workspaceDragSurface to Blockly.WorkspaceDragSurface.////Fixes #880.////* Ensure useDragSurface is a boolean.////Fixed #988////* use pretest instead of preinstall in package.json (#1043)////* cherry pick for pretest fix////* put pretest target to test_setup.sh////* fix conflict////* cherry pick for get_chromedriver.sh////* add some sleep to wait download to finish////* use node.js stable////* use npm test target////* field_angle renders degree symbol consistently.////Fixes #973////* bumpNeighbours_ function moved to block_svg.////Fixed #1009////* Update RegEx in js-to-json to match windowi eol (#1050)////The current regex only works with the ""\n"" line endings as it expects no characters after the optional "";"" at the end of the line. In windows, if it adds the ""\r"" it counts as a characters and is not part of the line terminator so it doesn't match.////* Fix French translation of ""colour with rgb"" block (#1053)////""colorier"", which is currently used, is a verb and proposed ""couleur"" is//a noun: the block in question does not change colour of anything, it//creates new colour instead, thus noun is more applicable.////Also, noun is used in French translation of ""random colour"" block://""couleur aléatoire"".////* Enforcing non-empty names on value inputs and statement inputs. (#1054)////* Correcting #1054 (#1056)////single quotes. better logic.////* Created a variable model with name, id, and type.////Created a jsunit test file for variable model.////* Change how blockly handles cursors.  The old way was quite slow becau… (#1057)////* Change how blockly handles cursors.  The old way was quite slow because it changed the stylesheet directly.  See issue #981 for more details on implementation and tradeoffs.  This changes makes the following high level changes: deprecate Blockly.Css.setCursor, use built in open and closed hand cursor instead of custom .cur files, add css to draggable objects to set the open and closed hand cursors.////* Rebuild blockly_uncompressed to pick up a testing change to make travis happy.  Fix a build warning from a multi-line string in the process. (#1059)////* Merge master into develop (#1063)////- pick up translation changes//- clean up trailing spaces////* use goog.string.startswith instead of string.startswith (#1065)////* New jsinterpreter demo includes wait block. Both demos have improved UI for clarity. (#1001)////Refactor of interpreter demo// * Renamed demos/interpreter/index.html as demos/interpreter/step-execution.html (including redirect), and added demos/interpreter/async-execution.html.// * Refactored code to automatically generate/parse the blocks, eliminating the need for a ""Parse JavaScript"" button. Code is still shown in alert upon stepping to the first statement. Print statements now write to output <textarea> instead of modal dialogs.////* VariableMap and functions added.////* Create separate file for VariableMap and its functions.////* Fix #1069 (#1073)////* VariableMap and functions added.////* Fix #1051 (#1084)////* Improve errors when validating JSON block definitions. (#1086)////goog.asserts to not run from blockly_compressed.js. User data validation should always run.////* Dragging changes, rebased on develop (#1078)////* Add block drag surface translateSurfaceBy////* Add dragged connection manager////* Add gesture.js////* Add GestureHandler////* Implemented gesture skeleton////* Most basic workspace dragging////* Add dragged connection manager////* cleanup////* doc////* more cleanup////* Add gesture handler////* Add translateSurfaceInternal////* core/block_dragger.js////* cleanup////* Pull in changes to dragged connection manager////* Pull in changes to dragged connection manager////* comments////* more annotations////* Add workspace dragger////* Add coordinate annotations////* Start on block dragging////* Limit number of concurrent gestures////* Add some TODOs////* start using dragged connection manager////* Set origin correctly for dragging blocks////* Connect or delete at the end of a block drag.////* cleanup////* handle field clicks and block + workspace right-clicks////* move code into BlockDragger class, but still reach into Gesture internals a lot////* Clean up block dragger////* Call blockDragger constructor with correct arguments////* Enable block dragging in a mutator workspace////* Add workspace dragger////* click todos////* Drag flyout with background////* more dragging from flyout////* nit////* fix dragging from flyouts////* Remove unused code and rename gestureHandler to gestureDB////* Rename gesture handler////* Added some jsdoc in gesture.js////* Update some docs////* Move some code to block_svg and clean up code////* Lots of coordinate annotations////* Fix block dragging when zoomed.////* Remove built files from branch////* More dragging work (#1026)////-- Drag bubbles while dragging blocks//-- Use bindEventWithChecks to work in touch on Android. Not tested anywhere else yet.//-- Handle dragging blocks while zoomed//-- Handle dragging blocks in mutators//-- Handle right-clicks (I hope)//-- Removed lots of unused code////* More dragging work (#1048)////- Removed gestureDB//- Removing uses of terminateDrag//- Cleaned up disposal code////* Dragging bugfixes (#1058)////- Get rid of flyout.dragMode_ and blockly.dragMode_//- Make drags from the flyout start from the top block in the group//- Block tooltips from being scheduled or shown during gestures//- Don't resize mutator bubbles mid-drag////* Fix events in new dragging (#1060)////* rebuild for testing////* unbuild////* Fix events////* rebuild////* Fix up cursors////* Use language files from develop////* Remove handled TODOS////* attempt to fix IE rerendering bug, and recalculate workspace positions on scroll////* Rebuild all the things////* Comment cleanup; annotations; delete unused variables.////* Tidy up context menu code. (#1081)////* add osx travis test run job (#1074)////* Names are correctly fetched from VariableModels!////* add more wait time for test setup (#1091)////* Work around timing issue with travis osx issue (#1092)////* add more wait time for test setup////* increase selenium wait time////* add more wait////* Fix #1077 by adding a rule to cover the toolbox labels too. (#1099)////* Assign variable UUID to field_variable dropdown.////* Change registration link to a static one (#1106)////This lets us redirect to a different form if we change it in the future.////* Edit generators to read in Variable Models.////* Add VariableMap requirement to workspace.////* Changed parameter name in workspace for clarity.////* Add type, id, and info to the generated xml.////Add xml tests for fieldToDom.//Update workspace tests to pass with new changes.////* Fix apostrophe in tooltips and helpurls (#1111)////* Click events on shadow blocks have the correct id (#1089)////* Add image_onclick option (#1080)////* Cleanup: semicolons, spacing, etc. (#1116)////* Spelling.  Spelling is hard.////* Add variable info to xml generated in variables.js////* Add missing CLAs info to the contributing file (#1119)////* Add missing CLAs info to the contributing file////* Added larger changes paragraph////* Replacing latest prettifier hosted in repo with latest version at rawgit CDN. (#1120)////* Forgot update code demo (#1121)////* Move audio code to a new file (#1122)////* move audio code to a new file////* dispose////* null check////* Make flyout get variables from target workspace's variableMap.////* Require VariableModel in field_variable.js.////* Update contributing.md (#1126)////* Include variables at top of serialization.////* Move blockSvg.getHeightWidth to block_render_svg.js (#1118)////* Deserialization variables at top.////* Create grid object (#1131)////* Create grid object////* Doc////* Units!  Thanks @RoboErikG////* Add our sound files in other formats////* Remove duplicate merged code////* Remove translation files////* Cleanup duplicate functions////* Add back scrollbar code////* Fix variable related issues////* Revert workspace variable creation change////* Delete language files////* Appease linter////* Remove duplication////* Add spaces to jsdoc line",https://github.com/microsoft/pxt-blockly/commit/dd964828e1ec10c6ddf8966e9b8516910273fe6a,79385111,microsoft/pxt-blockly,False,False
1827255261a4086baaec63fc312fd8193d01f8b4,"Merge google/blockly, May 2017 (#881)//* Move createDom call into the constructor of block drag surface. (#790)////* Make cursor stay as a closed hand when dragging blocks around in the drag surface. Do this by applying the same style to text elements in the drag surface that we do in the main svg. (#805)////* Don't connect to blocks under the flyout.////* recompile again. (#806)////* Fix german translation////* Option for moving one block from stack.////See thread in support group before merging.////* Fix german translation of 'delete x blocks'////* Adding unit tests for ifelse block.////* Improvements to the generator test framework.////* <field>, <value> reorder due to load/save.////* Expand stack-drag modifier key to include alt and ctrl.////* Use the npm closure library instead of the same library installed at a parallel directory////* Fix undo/redo for FieldCheckbox////Thanks to PR #813 by ademenev////* Localisation updates from https://translatewiki.net.////* PR #818: Adding support for string table lookups in dropdown field labels////Adding support for string table lookups in dropdown field labels specified in JSON.////Adds Blockly.utils.replaceMessageReferences() method to handle string replacement without interpolation tokens.  Effectively uses the same old code, now moved into tokenizeInterpolation_(), which takes a parseInterpolationTokens option.////Replaces the direct JavaScript references (not pure JSON, and thus not portable).////Demonstrating this behavior in the logic_boolean dropdown.////* Integrating qqq.json changes into messages.json. (#820)////From commits b77f8cbebc5cef247116d3df6a428df8addbe53d and 4ecdedec9f8a69f78abf246e7a5db1e1a0be6b85////* Naming changes in mirror demo////* Adding support for untranslated messages. (#819)////This will be used to define constants accessible in JSON block definitions. Messages with descriptions that include `{{Notranslate}}` will not be included in the translation files sent to TranslateWiki. Instead, they are written to `msg/json/constants.json`, and later merged back into the `.js` files, similar to synonyms.////Template details: https://translatewiki.net/wiki/Template:Notranslate////* JSON support for message lookup in colour, tooltip, and help URL. (#825)////String replacement for the colour, tooltip text and help URL attributes of JSON defined blocks.//Demonstrated in logic_boolean.////* Fixes as per code review on PR.////* Localisation updates from https://translatewiki.net.////* Reduce number of Closure files in App Engine upload.////* Python false is False.  Issue #828.////* Replace 'const' with 'var'.////This unbreaks IE10 and advanced compiled apps such as Blockly Games.////* Fix bug in audioService where attached event callbacks were not being cleared properly.////* Rename workspace-tree to workspace-block.////* Minor refactoring of the modal code (add comments, guard against invalid keystrokes, etc.).////* FieldNumber & FieldAngle: Default value ""0"" (#832)////FieldNumber and FieldAngle previously accepted ""undefined"" as values, if not defined in JSON. This catches these and uses ""0"" for any NaN value.  The constructor value parameter is now optional. Includes tests.////* Remove unnecessary check when attaching a new block to a marked connection.////* Remove debug info.////* Refactor and simplify field-segment.component.js.////* Replace single quotes with double. (#836)////Fixes commits in #832.////* Adding extensions for JSON support of dynamic blocks. (#834)////Adding support for extensions, functions that can assist with loading blocks, much like init functions, but that can be referenced from JSON definitions. This allows JSON definitions to define dynamic blocks such as onchange handlers and mutators.////Rewrote math_number as an example pure JSON block.////* Add ability to add a class to a scrollbar so that different types of … (#837)////* Add ability to add a class to a scrollbar so that different types of scrollbars can//be distinguished from each other. You used to be able to do this by looking at the parent//element but now all the scrollbars are siblings in the dom.////Also, use this new class to fix #816 so that layering of the flyout and workspace scrollbars//are done correctly.////* JSON definitions for colour blocks (#838)////Replaces old colour block definitions with a Blockly.defineBlocksWithJsonArray(..) call. Generator unit tests continue to load and pass, signifying compatibility with prior block definitions.////Replaces extension 'math_number_tooltip' with the reusable 'parent_tooltip_when_inline' extension, also used by colour_picker. Includes tests.////* Rewrite tree.service.js.////- Remove unnecessary code and functions.//- Add documentation where needed.//- Fix a bug arising when a block on the workspace is attached to an existing link.////* Use setValue in fieldTextInput so that procedure renaming works////* Further cleanup and removal of unnecessary functions. Pull some strings out for i18n.////* Use bindEvent_ instead of bindEventWithChecks_ for longStop////* Clean up workspace.component.js. When moving a block from one place to another, move all blocks after it too, and adjust the active descs accordingly.////* Unit tests for JSON block definitions (just the start) (#850)//// * Beginnings of a JSON block definition unit test set.// * Dispose of unit test workspaces and blocks in finally blocks.// * Clarify JSON error message by echoing arg notation.////* New blocks text_count, text_replace, and text_reverse (#830)////Includes generators for all languages and units tests on those generators.////* Fixing combo boxes getting out-of-sync with NVDA.////Combo boxes need to be special cased like text input. Also, Escape is//a reserved button in NVDA, so I added Enter as a way to ""submit and//move up a level"" in addition to escape, so these boxes can be edited//while NVDA is on.////* Temporary fix for broken text field validation.////* rebuild////* Add a block to reverse a list (#844)////* Localisation updates from https://translatewiki.net.////* Porting math.js blocks to JSON (#846)////Moving all `math.js` definitions into a single JSON array, complete with i18n syntax for all messages, dropdowns, and tooltips.////Adding Blockly.Extensions.buildTooltipForDropdown(..) to facilitate the creation and error-checking of tooltips that update based on the value of a dropdown.////Now warn on raw string in JSON 'extensions'.////* Fixing JSON support for images in dropdowns. Adding tests. (#851)////Fixes #848.////* Update README.md////Add a link to our forum.////* Correcting math_change color////* Enable custom flyout categories.////* Add some safety////* Update the set of reserved words in Python to reflect the current state of Python (2.7 and 3.6). (#861)////* Localisation updates from https://translatewiki.net.////* .getOptions_() to .getOptions() (#869)////Fixes #867.////* Blockly.Extensions.buildTooltipForDropdown(..): Deferred validation. (#870)////Defer tooltip message string check until after load, when all Blockly.Msg should be loaded.//Avoids validation in headless mode, due to lack of document.readyState.////* annotation updates////* annotation updates////* jsdoc corrections (#874)////* Remove use of Array.prototype.includes which is not implemented in IE or Edge < 14. Fixes google/blockly#876.////* Attempt to work around the IE/Edge bug where `getComputedTextLength()` throws an exception when the SVG node is not visible. This workaround forces a re-render, which in turn, forces a re-calculation of the node width once a block is inserted into the workspace SVG. This workaround is only executed on IE and Edge. See https://groups.google.com/forum/#!topic/blockly/T8IR4t4xAIY for the initial discussion of this issue.////* Change CSS transforms to work with older browsers (#879)////* Change the setting of the CSS transform properties on SVG nodes to set both the unprefixed version and the `-webkit-` prefixed version so that Blockly correctly renders in order browsers, such as Safari < 9 and iOS Safari < 9.2. For discussion of this issue, see https://groups.google.com/forum/#!topic/blockly/o3pERaRQhSg////* Correct the separation between the CSS transform property and the rest of the CSS that was in the variable misleadingly called ""transform"".////* Don't try to get block position in a headless workspace////* Stop bumping neighbours in headless blockly////* Place context menu correctly on touch////* Clear all active desc ids when the 'Erase Workspace' button is pressed.////* Fix a bug where splicing a block between two linked blocks disconnects the group and messes up the focus.////* Deleting a top-level block does not cause blocks after it to be deleted. Properly handle the active desc for this case.////* Localisation updates from https://translatewiki.net.////* Use the empty field placeholder for dropdowns that do not have a value selected.////* Bugfix for #892. I incorrectly converted one CSS transform setting to use the cross-browser setting function in 40a063763c74b3f712c3057565966c25d5cfdb10. (#895)////* Adding @namespace annotations for JSDoc. (#900)////* Fix typo causing TypeError (#901)////* Pinning the angular2 dependency, and including licenses. (#893)////* Add skeleton for tests on rendered workspaces////* Fix some lint errors////* Localisation updates from https://translatewiki.net.////* Correct changedState in setWarningText() (#908)////When clearing warnings on blocks with IDs, the changedState variable should be true if the text changed. This will trigger the block being reshaped and remove the space for the notification icon (this.bumpNeighbours_).////* Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin(). (#907)////Adds Block.prototype.mixin() and Blockly.Extensions.registerMixin().//This adds support for a common use pattern in extensions, and adds//error checking to avoid future incompatibilities.////* Porting Logic blocks to JSON (#913)////Extensions, mixins, mutators and constants now grouped under the new namespace Blockly.Constants.Logic.////* Improving errors/warnings with Block.toDevString() and Connection.toString(). (#911)////* Add isEditable to field, and add tests////* Separate tests////* Blockly.Constants.Math and Blockly.Constants.Colour extension constants (#916)////Also, correcting quotes in logic.js.////* Correction to logic_ternary type check (#920)////* Porting Loop blocks to JSON (#919)//// * Improved documentation on `Blockly.Extensions.buildTooltipForDropdown`// * Replaced incorrect uses of `@mixes` JSDoc annotation (on mixin extensions) with `@augments Blockly.Block`.// * Added Blockly.Extensions.buildTooltipWithFieldValue() extension helper.////* Workspace isDraggable////* JSONify simple list blocks////* JSONify variable blocks////* Initial text block, with a mixin to generate quote image fields. (#923)////Text block now uses the extension ""text_quotes"", supported by Blockly.Constants.Text.QUOTE_IMAGE_MIXIN.quoteField_(fieldName), so that each platform can use the best platform appropriate image (size, density, etc.) for the quotes.////* Add no-op stub .neighbors() for headless Connection.////* Adding tests for logic_ternary block in a new jsunit test framework.////* Correcting output of the logic_null block.////* Potential bug fix for issue #661////* extension controls_if => controls_if_mutator.////* Renamed extension function constant, and moved variables into the mixin.////* Dereference string table references when loading variable fields from JSON.////* Moving FieldImage string dereferencing back into Block.interpolate_() (part of jsonInit()). This sets a clear boundary of where dereferencing should happen.//Towards this, I've added message dereferencing for other field types here, as well.  I've used a pattern of field-type specific helper functions.////* Addressing comments.////* .utils.replaceMessageReferences(..) now gracefully returns non-string arguments.////* Clarification update.//Unraveling nested ternaries in Blockly.utils.tokenizeInterpolation_()////* Code correction from previous commit. Moved style to css.js and set ROUNDING=15;////* Fixing Enter so it properly propogates to dropdown selection. (#934)////Fixing FieldSegment so it updates dropdowns when the underlying dropdown changes.////* Localisation updates from https://translatewiki.net.////* Make variable add set/get block in context menu obey block limits////* Localisation updates from https://translatewiki.net.////* Use mutator extension for controls_if block////* Fix #946. Don't check for presence of constants.js////* Fix #945 (annotations) and an eslint issue (constant condition)////* Localisation updates from https://translatewiki.net.////* Fix #950: BlockFactory typo and copypasta////* Add safety checks for mutators and non-mutator extensions////* Handle mutations with both mixins and functions////* Adding warning on duplicate JSON block definition.////* period////* Make some functions private and add tests////* Localisation updates from https://translatewiki.net.////* Update help URL per #937.//Replace URL usages of %28 and %29 with normal parenthesis characters. (They aren't replaced by JavaScript's encodeURIComponent() function, and seem to work just fine without them.)//Added missing semicolon in build.py.////* Typo in comment.////* Make it easier to read the code that creates the variable category in the tolbox////* Adding Blockly.Xml.appendDomToWorkspace() (#962)////This is a copy (with additional comments) of PR #822 (and also #961) by @qnoirhomme with unrelated files removed. See #822 for full review.////* Annotation fixes////* Fix bug #904 by explicitly grabbing focus on the workspace svg element. (#964)////* Potential fix for #888.  Stops checking whether we are mid workspace drag since we do not always get mosue up events when blockly is in an iframe. (#899)////* Adding new minimap demo////* Basic code style changes. Adding a few more comments. Return early if disableScrollChange in onScrollChange listener.////* `unction` to `function` corrects #962 (#970)////* Cross browser friendly fix for #904.  This calls blur and focus from … (#972)////* Cross browser friendly fix for #904.  This calls blur and focus from workspace.markFocused and removes the event listener on focus events.  markFocused is called from all of our mouse down handlers, which triggers the focus event leading to an infinite loop of focus.  As far as I can tell, there are no uses of the focus handler that actually did anything for us.////* Localisation updates from https://translatewiki.net.////* Another attempt to fix #904 to keep the page from jumping to the focused workspace in IE 11 (#974)////* Adding horizontal scrolling. Changed scroll change callbacks from onScroll_ to setHandlePosition. onScroll_ is not challed when workspace is dragged.////* set background color to lilac if opening the playground from file:////* Registering mousemove and mouseup listener in mousedown event. Mousemove and Mouseup events are now listening over document.////* Localisation updates from https://translatewiki.net.////* Fix #967 by overriding the updateWidth method in FieldImage blocks to be a no-op. FieldImage fields should not change size after the width is set in init.  The updateWidth and, therefore, getCachedWidth is now being called by BlockSvg renderFields_ (see commit d55d9cbd9ff308ff5e361cf77acabb61a4bf4695). IIUC, updateWidth/getCachedWidth was only called from render before which is overridden in FieldImage to be a no-op already. (#979)////* Fix #969////* Localisation updates from https://translatewiki.net.////* Fix #986.  Looks like the original PR just forgot this block. (#992)////* rebuild develop (#996)////* Added the variable modal and component and implemented basic renaming functionality. (#991)////* Fixing commenting from the last commit. (#1000)////* Localisation updates from https://translatewiki.net.////* RemoveAttribute doesn't work on SVG elements in IE 10.  Use setAttribute to null instead.////* Adding the remove variable modal and functionality to accessible Blockly. (#1011)////* Minimap position bug fix for browsers other than chrome. Added touch support.////* Adding an add variable modal to accessible Blockly. (#1015)////* Adding the remove variable modal and functionality to accessible Blockly.////* Adding the add variable modal for accessible Blockly.////* Block browser context menu in the toolbox and flyout////* Add links to the dev registration form and contributor guidelines////* Miscellaneous comment cleanup////* Adding the common modal class. (#1017)////Centralizes accessible modal behavior.////* - Changed error message referencing 'procedure' instead of 'function' (#1019)////- Added iOS specific UI messages//- Fixed bug with js_to_json.py script where it didn't recognize ' character////* - Allows use of Blockly's messaging format for category name, colour,… (#1028)////...in toolbox XML.//- Updated code editor demo to use this message format//- Re-built blockly_compressed.js////* Making text_count use a text color (like text_length, which also returns a number). (#1027)////* Enable google/blockly with continuous build on travis ci (#1023) (#1035)////* create .travis for ci job////* initial checkin for blocky-web travis ci job////* rename file to .travis.yaml for typo////* remove after_script////* added cache////* rename .travis.yaml to .travis.yml////* Update .travis.yml////* include build script////* fix yaml file format issue////* debug install part////* debug build issue////* Update .travis.yml////* remove cache for now////* Update .travis.yml////* Update .travis.yml////* Update .travis.yml////* more debug info////* Update .travis.yml////* Update .travis.yml////* fix typo////* installing chrome browser////* remove chrome setting config////* run build.py as part of npm install////* Update .travis.yml////* update karma dependency////* use karma as test runner////* fix typo////* remove karma test for now////* Update .travis.yml////* Update package.json////* add npm test target////* add browserstack-runner depdendency////* update browser support////* fix typo for test target////* fix chrome typo////* added closure dependency////* add google-closure-library////* include blockly_uncompressed.js and core.js dependency////* uncomment out core/*.js files////* add kama job as part of install////* remove browserstack add on for now////* fix karma config typo////* add karma-closure////* add os support////* remove typo config////* include more closure files////* change os back to linux////* use closure-library from node_modules////* change log level back to INFO////* change npm test target to use open browser command instead of karma////* change travis test target to use open command instead of karma////* list current directory////* find what's in current dir////* typo command////* Update .travis.yml////* typo again////* open right index.html////* use right path for index.html////* xdg-open to open default browser on travis////* exit browser after 5s wait////* change timeout to 1 min////* exit after opening up browser////* use browser only////* use karma////* remove un-needed dependency////* clean up script section////* fix typo////* update build status on readme////* initial commit for selenium integration tests////* update selenium jar path////* fix test_runner.js typo////* add more debug info////* check java version////* add && instead of 9288////* fix java path////* add logic to check if selenium is running or not////* add some deugging info////* initial commit to get chromedriver////* add chromedriver flag////* add get_chromedriver.sh to package.json and .travel////* change browser to chrome for now////* fix path issue////* update chromdriver path////* fix path issue again////* more debugging////* add debug msg////* fix typo////* minor fix for getting chromedriver////* install latest chrome browser////* clean up pakcage.json////* use npm target for test run////* remove removing trailing comma////* fix another trailing comma////* updated travis test target////* clean up scripts////* not sure nmp run preinstall////* redirect selenium log to tmp file////* revert writing console log to file////* update test summary////* more clean up////* minor clean up before pull request////* resolved closure-library conflict////1. add closure-library to dependencies instead of devDependencies.//2. add lint back in scripts block////* fix typo (adding comma) in script section////* Renames Blockly.workspaceDragSurface to Blockly.WorkspaceDragSurface.////Fixes #880.////* Ensure useDragSurface is a boolean.////Fixed #988////* use pretest instead of preinstall in package.json (#1043)////* cherry pick for pretest fix////* put pretest target to test_setup.sh////* fix conflict////* cherry pick for get_chromedriver.sh////* add some sleep to wait download to finish////* use node.js stable////* use npm test target////* field_angle renders degree symbol consistently.////Fixes #973////* bumpNeighbours_ function moved to block_svg.////Fixed #1009////* Update RegEx in js-to-json to match windowi eol (#1050)////The current regex only works with the ""\n"" line endings as it expects no characters after the optional "";"" at the end of the line. In windows, if it adds the ""\r"" it counts as a characters and is not part of the line terminator so it doesn't match.////* Fix French translation of ""colour with rgb"" block (#1053)////""colorier"", which is currently used, is a verb and proposed ""couleur"" is//a noun: the block in question does not change colour of anything, it//creates new colour instead, thus noun is more applicable.////Also, noun is used in French translation of ""random colour"" block://""couleur aléatoire"".////* Enforcing non-empty names on value inputs and statement inputs. (#1054)////* Correcting #1054 (#1056)////single quotes. better logic.////* Created a variable model with name, id, and type.////Created a jsunit test file for variable model.////* Change how blockly handles cursors.  The old way was quite slow becau… (#1057)////* Change how blockly handles cursors.  The old way was quite slow because it changed the stylesheet directly.  See issue #981 for more details on implementation and tradeoffs.  This changes makes the following high level changes: deprecate Blockly.Css.setCursor, use built in open and closed hand cursor instead of custom .cur files, add css to draggable objects to set the open and closed hand cursors.////* Rebuild blockly_uncompressed to pick up a testing change to make travis happy.  Fix a build warning from a multi-line string in the process. (#1059)////* Merge master into develop (#1063)////- pick up translation changes//- clean up trailing spaces////* use goog.string.startswith instead of string.startswith (#1065)////* New jsinterpreter demo includes wait block. Both demos have improved UI for clarity. (#1001)////Refactor of interpreter demo// * Renamed demos/interpreter/index.html as demos/interpreter/step-execution.html (including redirect), and added demos/interpreter/async-execution.html.// * Refactored code to automatically generate/parse the blocks, eliminating the need for a ""Parse JavaScript"" button. Code is still shown in alert upon stepping to the first statement. Print statements now write to output <textarea> instead of modal dialogs.////* Fix #1069 (#1073)////* Fix cursor and mistaken css from merge////* Comment out broken field angle merge////* Fix broken merge with borders////* Add back original package json (woops)////* Remove render function for field angle, may not be the right way but it was broken...////* Revert merge blocking variable shadow blocks////* Add changes from built lang files////* Add back travis and readme////* Revert broken cleanup additions////* Add notes for scratch-block specific functions////* Revert change to css so blocks stay under the toolbox////* Add back accidentally removed files////* Use getFlyout_ instead of getFlyout everywhere////* Satisfy the linter////* Re-remove deprecated function////* Remove duplicated code in block_svg////* Add back flip_rtl option for images////* Remove more duplicated functions from past merges////* Fix flip_rtl code////* Revert renaming of getFlyout",https://github.com/microsoft/pxt-blockly/commit/1827255261a4086baaec63fc312fd8193d01f8b4,79385111,microsoft/pxt-blockly,False,False
