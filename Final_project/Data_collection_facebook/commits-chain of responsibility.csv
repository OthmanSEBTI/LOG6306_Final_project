sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
3675a7c674c9731a3eef43d0fed0184a8c7a9ac6,"Introducing unidirectional stream dispatcher//Summary:/## context/In preparation of merging the `draft-20` peek-based dispatching for the unidirectional streams with the `nascent streams` which will be brought by the ServerPush, I am introducing a new abstraction - `UnidirectionalStreamReadDispatcher`//The abstraction roughly follows the [`ChainOfResponsibility`](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern) design pattern./## detailed explanation/The `Dispatcher` owns assigning the correct callbacks to streams based on the preface. It interacts with the HQSession via its callback interface - this is done intentionally so that it will be easy to test the dispatcher.//When a new stream is available, the `HQSesssion` assigns the dispatcher as a `PeekCallback` to the (not yet identified stream).//Once a preface is read (or it is confirmed that there is no preface, see below), the `Dispatcher` notifies the `HQSession` which callback should be used for that stream. `HQSession` is expected to assign the callback to the stream.//Two separate cases are distinguished:/ 1. The `Dispatcher` assigns a read callback (via `assignReadCallback`). This is used for the control streams./ 2. The `Dispatcher` assigns a peek callback (via `assignPeekCallback`).//The latter method is used for both the unframed portion of the push stream, and for the grease streams (see footnote 1)//As the data arrives to on the stream, it is being passed to the appropriate callback, where it is processed according to the stream type:/ * For control streams, the data is being processed in the same way it is done today./ * For the nascent push streams (peek callback), the unframed push id is peeked. Once read, a nascent stream object is created, as a part of the late binding process./ * For the grease streams, the data is peeked, and consumed, without any attempt to parse it.//  +------------------------+                 +----------------------+/  |                        |                 |Unidirectional Stream |/  |                        |   new stream--->|   Read Dispatcher    |--+/  |       HQSession        |---available     |                      |  |/  |                        |                 +----------------------+  |/  |                        |                             |             |/  +------------------------+                             |             |/               ^                                         |             |/               |                                         |             |/              +-----callback available for sream--------+             |/                                                                     |/                                           +--------------------+    |/                                           |   Control Stream   |    |/                                           |      callback      |<---+/                                           +--------------------+    |/                                                                     |/                                           +--------------------+    |/                                           |   NasPush Stream   |    |/                                           |      callback      |<---+/                                           +--------------------+    |/                                                                     |/                                           +--------------------+    |/                                           |   Grease Stream    |    |/                                           |      callback      |<---+/                                           +--------------------+//[footnote 1]  for the grease streams using a peek/consume becomes more efficient when there is a missing data block. With the peek/consume API, the data is dumped ASAP, vs. relying on the transport to reliably retransmit the missing data block - thus saving both the memory, and the timers.//Reviewed By: mjoras//Differential Revision: D15312250//fbshipit-source-id: f79eca1ebb3ed2bccd80371c497c8fe8d8e2357d",https://github.com/facebook/proxygen/commit/3675a7c674c9731a3eef43d0fed0184a8c7a9ac6,24776728,facebook/proxygen,False,False
