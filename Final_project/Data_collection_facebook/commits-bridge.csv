sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
b44656e083950cb0ffabdfd26f0c3ef8cc58e117,"Improve bridge pattern matching//Summary:/The pass's pattern matching is simple, and we may get some false-positive/bridge-bridgee pairs. It's not a big deal, since it's just a special kind of/inlining./The problem is that it may find bridgee-bridgee methods from different classes/and then inline the bridgee to bridge without proper access changing.//The diff keeps the simple reasonable inlining logic but adds additional checking/on whether the bridge and bridgee are in the same class.//Reviewed By: emma0303//Differential Revision: D15329107//fbshipit-source-id: ac966a79b5e4d97da2643bd817c33dd5bdf33032",https://github.com/facebook/redex/commit/b44656e083950cb0ffabdfd26f0c3ef8cc58e117,54664770,facebook/redex,False,False
4ddfa41525899d222d048635fc46760aa1abbd90,"C++ decl-provider API cleanup//Summary:/The C++ struct DeclProviderResult was handwritten in two places (hhvm/and hh_single_compile_cpp), and must be kept in sync with the rust/enum ExternDeclProviderResult. Move the C++ decl to a header file,/and provide constructors that know how to fish into a DeclResult.//The philosophy behind this change is for hackc to provide a [relatively] clean/C++ API to its C++ clients, with a goal of hiding some of the uglier aspects/of C++/Rust bridging behind that api. There is more we can do after this.//CXX understands Vec<u8>, so use that instead of Bytes in DeclResult and a few/related APIs. This removes the last use of ffi::Bytes in the cxx-based compiler_ffi,/and more clearly represents DeclResult's ownership of the serialized bytes./hackc_verify_deserialization() is now safe.//Merged FileAttributes and Bump into Decls, so that by-ref types and the arena/that owns them are grouped together in a single Rust type that is opaque to C++,/following the same pattern we have used elsewhere.//Reviewed By: shayne-fletcher//Differential Revision: D36423632//fbshipit-source-id: d36a32c80df87bb1caf0953ac1abb9a3491febf4",https://github.com/facebook/hhvm/commit/4ddfa41525899d222d048635fc46760aa1abbd90,455600,facebook/hhvm,False,False
c40e20efc4a79ac8a811a7258da705b34a855613,"introducing BridgeSynthInlinePass (replacing Bridge- and SynthPass)//Summary:/The BridgePass and SynthPass are old, performing brittle pattern matching that has even most recently caused us problems (see e.g. D30167547).//While they essential implement specialized forms of inlining, implemented at a time before Redex has a powerful general-purpose inliner, they do not check for all the potential gotchas that the inliner does.//For future better-engineering projects such as respecting Java's static initialization rules, it is cumbersome to have to understand and properly fix up these legacy passes, even though they essential just do inlining.//In this diff, the legacy BridgePass and SynthPass are effectively getting replaced by a new variation of our existing inliner, the `BridgeSynthInlinePass`. It collects a set of candidates that is the combination of what the BridgePass and SynthPass were considering, and then it leaves it up to the general purpose inliner to decide whether actually inlining a candidate is beneficial in terms of size, and doesn't violate any other obscure constraints. Note that the selection of candidates here is rather a heuristic for the inliner, mimicking for worked for the BridgePass and SynthPass, but the particular choices do not affect correctness --- the existing inliner takes care of that.//Putting it all together, the main motivation of this diff is better engineering, not achieving additional wins.//Going forward, we can tweak the selection of bridge/synth methods to inline more where beneficial, e.g. boxing/unboxing bridge methods.//Reviewed By: beicy//Differential Revision: D30213491//fbshipit-source-id: e06e0436aba1174e4ba6173ae1850425fa9e56c0",https://github.com/facebook/redex/commit/c40e20efc4a79ac8a811a7258da705b34a855613,54664770,facebook/redex,False,False
f4fd1831daf200a27db75dfe36f23b7e9a9f2085,"Fabric: `RNWrapManagedObject` and `RNUnwrapManagedObject` helpers//Summary: We use this pattern already and seems we use it more. Those two functions introduce a ""semantical"" wrappers for this context, so now there is no need to think which exact `__bridge ***` qualifier we should use, so it's much less error-prone.//Reviewed By: JoshuaGross//Differential Revision: D14896800//fbshipit-source-id: 85b86bfcefdad5aff0375e7172769df86c001506",https://github.com/facebook/react-native/commit/f4fd1831daf200a27db75dfe36f23b7e9a9f2085,29028775,facebook/react-native,False,False
deba13f698da7e6a16db8d80d8ed0d8575ab3bb9,"Refactor RCTUIManager//Summary:/Moved the view creation & property binding logic out of RCTUIManager into a separate RCTComponentData class - this follows the pattern used with the bridge.//I've also updated the property  binding to use pre-allocated blocks for setting the values, which is more efficient than the previous system that re-contructed the selectors each time it was called. This should improve view update performance significantly.",https://github.com/facebook/react-native/commit/deba13f698da7e6a16db8d80d8ed0d8575ab3bb9,29028775,facebook/react-native,False,False
27e3e135a693b99fd90ee8f4359b67c2bc8cfa63,"install library and header files (#587)//Summary:/This patch updates the cmake script to install library and header files in addition to the redex binary. This follows the common structure bin/ lib/ include/ used on Unix.//Pull Request resolved: https://github.com/facebook/redex/pull/587//Test Plan:/Before:/```/% cmake -DCMAKE_INSTALL_PREFIX=/tmp/install .. && make && make install && cd /tmp/install/% tree -L 3/./├── LICENSE/├── README.md/├── default.config/├── generated_apilevels.py/├── pyredex/│   ├── __init__.py/│   ├── logger.py/│   ├── unpacker.py/│   └── utils.py/├── redex-all/└── redex.py//1 directory, 10 files/```//After:/```/% tree -L 3/./├── bin/│   ├── generated_apilevels.py/│   ├── pyredex/│   │   ├── __init__.py/│   │   ├── logger.py/│   │   ├── unpacker.py/│   │   └── utils.py/│   ├── redex-all/│   └── redex.py/├── include/│   └── redex/│       ├── access-marking/│       ├── analysis/│       ├── analyze-pure-method/│       ├── annokill/│       ├── api-levels/│       ├── basic-block/│       ├── branch-prefix-hoisting/│       ├── bridge/│       ├── builder_pattern/│       ├── check-recursion/│       ├── check_breadcrumbs/│       ├── class-init/│       ├── class-merging/│       ├── class-splitting/│       ├── common/│       ├── constant-propagation/│       ├── copy-propagation/│       ├── cse/│       ├── dataflow/│       ├── dedup-blocks/│       ├── dedup-strings/│       ├── dedup_blocks/│       ├── delinit/│       ├── delsuper/│       ├── escape-analysis/│       ├── evaluate_type_checks/│       ├── field-ops/│       ├── final_inline/│       ├── include/│       ├── insert-source-blocks/│       ├── instrument/│       ├── interdex/│       ├── layout-reachability/│       ├── liblocator/│       ├── libredex/│       ├── libresource/│       ├── local-dce/│       ├── loop-info/│       ├── make-public/│       ├── merge_interface/│       ├── method-dedup/│       ├── method-inliner/│       ├── method-merger/│       ├── methodinline/│       ├── obfuscate/│       ├── object-sensitive-dce/│       ├── optimize_enums/│       ├── original_name/│       ├── outliner/│       ├── peephole/│       ├── print-members/│       ├── rebindrefs/│       ├── reduce-array-literals/│       ├── reduce-gotos/│       ├── reference-update/│       ├── regalloc/│       ├── remove-apilevel-checks/│       ├── remove-builders/│       ├── remove-interfaces/│       ├── remove-nullcheck-string-arg/│       ├── remove-recursive-locks/│       ├── remove-uninstantiables/│       ├── remove-unreachable/│       ├── remove-unused-args/│       ├── remove-unused-fields/│       ├── remove_empty_classes/│       ├── remove_gotos/│       ├── remove_redundant_check_casts/│       ├── renameclasses/│       ├── reorder-interfaces-decl/│       ├── resolve-proguard-values/│       ├── resolve-refs/│       ├── result-propagation/│       ├── shared/│       ├── shorten-srcstrings/│       ├── simplify_cfg/│       ├── singleimpl/│       ├── split_huge_switches/│       ├── staticrelo/│       ├── string_concatenator/│       ├── stringbuilder-outliner/│       ├── strip-debug-info/│       ├── switch-dispatch/│       ├── switch-partitioning/│       ├── synth/│       ├── test_cfg/│       ├── throw-propagation/│       ├── track_resources/│       ├── type-analysis/│       ├── type-string-rewriter/│       ├── unmark_proguard_keep/│       ├── unreferenced_interfaces/│       ├── up-code-motion/│       ├── uses-names/│       ├── util/│       ├── verifier/│       ├── vertical_merging/│       ├── virtual_merging/│       └── virtual_scope/├── lib/│   ├── libredex.a/│   ├── libresource.a/│   └── libtool.a/└── share/    └── doc/        └── redex//107 directories, 10 files/```//Also, see CircleCI tests for Windows on the PR.//Reviewed By: thezhangwei, agampe//Differential Revision: D26078924//Pulled By: arthaud//fbshipit-source-id: 5a88412d17f965cf9847efd0d5f0a3203c2d4650",https://github.com/facebook/redex/commit/27e3e135a693b99fd90ee8f4359b67c2bc8cfa63,54664770,facebook/redex,False,False
02d1bcc047e54297fc8f8dae41f1966f55d62496,"Modified deepFreezeAndThrowOnMutationInDev to use Object.prototype.ha… (#19598)//Summary:/This PR fixes a bug in `deepFreezeAndThrowOnMutationInDev` which did not take into account that objects passed to it may have been created with `Object.create(null)` and thus may not have a prototype. Such objects don't have the methods `hasOwnProperty`, `__defineGetter__`, or `__defineSetter__` on the instance.//I ran into an unrecoverable error in React Native when passing this type of object across the bridge because `deepFreezeAndThrowOnMutationInDev` attempts to call `object.hasOwnProperty(key)`, `object.__defineGetter__` and `object__defineSetter__` on objects passed to it. But my object instance does not have these prototype methods.//Changes:/* Defined `Object.prototype.hasOwnProperty` as a `const` (pattern used elsewhere in React Native)/* Modified calls to `object.hasOwnProperty(key)` to use `hasOwnProperty.call(object, key)` (Per ESLint rule [here](https://eslint.org/docs/rules/no-prototype-builtins))/* Modified calls to deprecated methods `object.__defineGetter__` and `object.__defineSetter__` to instead use `Object.defineProperty` to define get and set methods on the object. (Per guidance on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__))/* Added a new test to `deepFreezeAndThrowOnMutationInDev-test` to verify the fix.//I tried to create a reproducible example to post to Snack by passing prototype-less objects to a `Text` component, in various ways, but they appear to be converted to plain objects before crossing the bridge and therefore they do not throw an error.//However, I was able to create a new test to reproduce the issue. I added the following test to `deepFreezeAndThrowOnMutationInDev-test`://```JavaScript/it('should not throw on object without prototype', () => {/    __DEV__ = true;/    var o = Object.create(null);/    o.key = 'Value';/    expect(() => deepFreezeAndThrowOnMutationInDev(o)).not.toThrow();/  });/```//The changes in this PR include this new test.//ESLint test produced no change in Error count (3) or Warnings (671)//N/A/Other areas with _possibly_ the same issue:/https://github.com/facebook/react-native/blob/c6b96c0df789717d53ec520ad28ba0ae00db6ec2/Libraries/vendor/core/mergeInto.js#L50/https://github.com/facebook/react-native/blob/8dc3ba0444c94d9bbb66295b5af885bff9b9cd34/Libraries/ReactNative/requireNativeComponent.js#L134// [GENERAL] [BUGFIX] [Libraries/Utilities/deepFreezeAndThrowOnMutationInDev] -Fix for compatibility with objects without a prototype./Closes https://github.com/facebook/react-native/pull/19598//Differential Revision: D8310845//Pulled By: TheSavior//fbshipit-source-id: 020c414a1062a637e97f9ee99bf8e5ba2d1fcf4f",https://github.com/facebook/react-native/commit/02d1bcc047e54297fc8f8dae41f1966f55d62496,29028775,facebook/react-native,False,False
