sha,message,html_url,repository_id,repository_full_name,repository_private,repository_fork
09b832b1f8fb530b40e6e3657253f6e65fed4199,"common/rust: vendor test-case 1.2//Summary:/Fixes an annoying lint warning://```/error: unneeded unit expression/   --> interpreter/src/pattern.rs:692:5/    |/692 |     #[test_case(PhantomData::< TargetPattern >; ""parsing TargetPattern"")]/    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/    |/    = note: `-D clippy::unused-unit` implied by `-D warnings`/    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit/    = note: this error originates in the attribute macro `test_case` (in Nightly builds, run with -Z macro-backtrace for more info)/```//Reviewed By: ndmitchell//Differential Revision: D31108216//fbshipit-source-id: ab298b965a0b19643cfbdb16565c76a60ab25876",https://github.com/facebook/hhvm/commit/09b832b1f8fb530b40e6e3657253f6e65fed4199,455600,facebook/hhvm,False,False
9b883e2f19e8b81da2aa1053b3bb52df5f8eb7af,"interpreter: Factor out immediate decoding, part 1//Summary:Ihe iopReturnWrapper pattern lets us factor imm decoding/out of the bytecode function bodies, by overloading/iopReturnWrapper on the iop function signature.//Rename iopReturnWrapper to iopWrapper.//Create iopWrapper overloads for opcodes taking a litstr/immedate, and many opcodes taking no immediates.//Reviewed By: swtaarrs//Differential Revision: D3126451//fb-gh-sync-id: 05f2fbc298a7c3068538246ab8cb2d2f910d9dc2/fbshipit-source-id: 05f2fbc298a7c3068538246ab8cb2d2f910d9dc2",https://github.com/facebook/hhvm/commit/9b883e2f19e8b81da2aa1053b3bb52df5f8eb7af,455600,facebook/hhvm,False,False
255b10366675b25f51bb7251372e4009c55d8d42,"Improve memo key generation//Summary:/Make some improvements to how we generate memoization keys. The/previous scheme would use various optimized patterns depending on the/parameter's associated type-hint. Not all of these patterns could be implemented/in bytecode, so GetMemoKeyL had different semantics depending on the/type-hint. However, this meant that HHBBC, the JIT, and the interpreter had to/be all kept in sync. Instead, have HHBBC be solely responsible for implementing/specialized memo key patterns. HHBBC will lower the GetMemoKeyL opcode to the/specified generation scheme if possible. Therefore, if GetMemoKeyL remains, the/JIT and the interpreter can simply treat it using the generic scheme (rather/than peeking at the type-hints and interpreting it differently).//To enable this lowering in all the necessary ways, introduce two new/bytecodes. The first, Select, represents a simple ternary operator, and is used/for lowering where we want to decide between two values based on some/predicate. The second, DblAsBits, is used to reinterpret a double value as an/integer (with the same bit-pattern).//As a side-effect of this, the bug where a deprecated memoized function would/crash in HHBBC (when DisallowDynamicVarEnvCalls is disabled) is now fixed.//Finally, even for the generic GetMemoKeyL opcode, if the JIT knows the input/type, call the appropriate serialization function directly, rather than calling/a generic helper which checks the type and then dispatches.//Reviewed By: markw65//Differential Revision: D8302966//fbshipit-source-id: c45dec0fdf3f0b39b532f906f786bf308a582b93",https://github.com/facebook/hhvm/commit/255b10366675b25f51bb7251372e4009c55d8d42,455600,facebook/hhvm,False,False
8575f79d6438a247c168aff160224c07ef8d7305,"Translate FPushClsMethod//This adds new IR opcodes to lookup class methods from the TC/instead of interpreting.  LookupClsMethod basically does the same/thing as the interpreter; LookupClsMethodStatic is optimized for the/case where the call is in a static function.//Additionally, when the class input comes from a LdCtx we can get the/method slot at jit time and burn that into the TC.  This case is/pretty common since ""LateBoundCls; FPushClsMethod"" is a common/pattern.//Reviewed By: @jdelong//Differential Revision: D1035577",https://github.com/facebook/hhvm/commit/8575f79d6438a247c168aff160224c07ef8d7305,455600,facebook/hhvm,False,False
786b32d9c14aa5ae808777e61065763f8564aad2,"Fall back to interp from the IR.//Introduce a runtime option to allow falling back to the/interpreter, rather than to tx64. Once this is faster, we know we're/ready to ditch tx64.//Cleanups along the way://  - Start macro-izing the runtime options. For tractability, I only did/    the Eval* runtime options, but the same pattern should work for other/    parts of the hdf namespace.//  - const SrcKey& -> SrcKey in a lot of places.//  - slightly iron out the handshaking between translate and/    translateTracelet.",https://github.com/facebook/hhvm/commit/786b32d9c14aa5ae808777e61065763f8564aad2,455600,facebook/hhvm,False,False
d93ec3adb37a28753fa5a7a322d77b1b66b1b2a7,"Remove broken support for `$x::foo<T>()` reified generics//Summary:/This pattern is the last place that uses ReifiedName opcode, but/FCallClsMethod's JIT implementation never had any support for reified generics,/resulting in inconsistent behavior between interpreter and JIT.//The newly added test demonstrates that. It would previously print ""hi"" in the/interpreter mode, but throw an exception in JIT mode.//Let's remove its support altogether as it can't be possibly used. Note that the/calls to non-reified method would work fine, so let's just do that.//This diff makes it possible to nuke support for reified names, which allows/merging FCall*RD opcodes into FCall*Ds and their simplification and/generalization, which allows adding support to the FCallClsMethod opcode, which/allows reintroducing actually working support for `$x::foo<T>()`.//Another level of sadness here is inconsistency of stacktraces between/interpreter and JIT. One throws the exception at the callee, while another at/the caller, so I had to use try/catch in the test to produce a consistent/behavior. This is also something that will be fixed once reified generics are/generalized.//Reviewed By: oulgen//Differential Revision: D17181910//fbshipit-source-id: a0b81675e9921c78b2ea49b96eecde59d98e92c9",https://github.com/facebook/hhvm/commit/d93ec3adb37a28753fa5a7a322d77b1b66b1b2a7,455600,facebook/hhvm,False,False
